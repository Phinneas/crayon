package %%%PACKAGE%%%;

import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.RenderingHints;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Set;

import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

class AwtTranslationHelper {
    private AwtTranslationHelper() {}

    public static String getRawByteCodeString() {
        return readFileText("resources/bytecode.txt");
    }
	
	public static String getResourceManifest() {
		return readFileText("resources/manifest.txt");
	}

    public static String getTextResource(String path) {
        return readFileText("resources/" + path);
    }

    private static final char[] BUFFER = new char[500]; 
    public static String readFileText(String path) {
        FileReader fileReader;
        try {
            fileReader = new FileReader(path);
        } catch (FileNotFoundException e) {
            throw new RuntimeException("File not found: " + path);
        }

        BufferedReader br = new BufferedReader(fileReader);
        StringBuilder sb = new StringBuilder();
        int bytesRead = 0;
        while (bytesRead != -1) {
            try {
                bytesRead = br.read(BUFFER);
            } catch (IOException e) {
                bytesRead = -1;
            }

            if (bytesRead != -1) {
                sb.append(BUFFER, 0, bytesRead);
            }
        }

        try {
            br.close();
        } catch (IOException e) {
        }

        return sb.toString();
    }

    public static Object flushImagetteToBitmap(Imagette imagette) {
        int width = imagette.width;
        int height = imagette.height;
        BufferedImage finalImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics g = finalImage.getGraphics();
        int length = imagette.nativeBitmaps.size();
        for (int i = 0; i < length; ++i) {
            BufferedImage img = (BufferedImage) imagette.nativeBitmaps.get(i);
            int x = imagette.xs.get(i);
            int y = imagette.ys.get(i);
            g.drawImage(img, x, y, null);
        }
        g.dispose();
        return finalImage;
    }

    public static BufferedImage flipImage(Object original, boolean flipX, boolean flipY) {
        BufferedImage originalImage = (BufferedImage) original;
        if (!flipX && !flipY) return originalImage;
        int x = 0;
        int y = 0;
        int width = originalImage.getWidth();
        int height = originalImage.getHeight();
        BufferedImage flippedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = flippedImage.createGraphics();
        if (flipX) {
            x = width;
            width = -width;
        }
        if (flipY) {
            y = height;
            height = -height;
        }
        g.drawImage(originalImage, x, y, width, height, null);
        g.dispose();
        return flippedImage;
    }

    public static BufferedImage loadImageFromLocalFile(String path) {
        try {
            return ImageIO.read(new File("resources/" + path));
        } catch (IOException e) {
            return null;
        }
    }

    private static byte[] readLocalResource(String path) {
        try {
            return readLocalResourceImpl(path);
        } catch (IOException e) {
            return null;
        }
    }

    private static byte[] readLocalResourceImpl(String path) throws IOException {
        File resource = new File("resources/" + path);
        if (!resource.exists()) {
            return null;
        }
        byte[] output = new byte[(int)resource.length()];

        FileInputStream fis = null;
        try {
            fis = new FileInputStream(resource);
            int offset = 0;
            do {
                offset += fis.read(output, offset, output.length - offset);
            } while (offset < output.length);
        } finally {
            if (fis != null) {
                fis.close();
            }
        }
        return output;
    }

    public static String[] directoryListing(String path) {
        File folder = new File(path);
        ArrayList<String> output = new ArrayList<>();
        for (File file : folder.listFiles()) {
            output.add(file.getName());
        }
        return output.toArray(new String[output.size()]);
    }

    private static boolean isWindowsCached = System.getProperty("os.name").startsWith("Windows");
    public static boolean isWindows() {
        return isWindowsCached;
    }

    public static String readFile(String path) {
        try {
            byte[] bytes = Files.readAllBytes(Paths.get(path));
            return new String(bytes);
        } catch (IOException e) {
            return null;
        }
    }

    public static int writeFile(String path, String contents) {
        byte[] bytes = contents.getBytes();
        try {
            FileOutputStream fos = new FileOutputStream(path);
            fos.write(bytes);
            fos.close();
            return 0;
        } catch (IOException e) {
            // TODO: test with errors 1-3
            return 4;
        }
    }

    public static boolean checkPathExistence(String path, boolean dirOnly, boolean checkCase) {
        Path p;
        try {
            p = Paths.get(path);
        } catch (java.nio.file.InvalidPathException ipe) {
            return false;
        }
        return dirOnly ? Files.isDirectory(p) : Files.exists(p);
    }

    public static int createDirectory(String path) {
        try {
            new File(path).mkdir();
            return %%%IO_ERROR_NONE%%%;
        } catch (Exception e) {
            return %%%IO_ERROR_UNKNOWN_ERROR%%%;
        }
    }

    private static String appDataRoot = null;
    public static String getAppDataRoot() {
        if (appDataRoot == null) {
            if (isWindows()) {
                String appData = System.getenv().get("APPDATA");
                if (appData == null) throw new IllegalStateException("%APPDATA% not set on Windows. How strange is that.");
                appDataRoot = appData.replace('\\', '/') + "/%%%PROJECT_ID%%%";
            } else {
                appDataRoot = "~/.%%%PROJECT_ID%%%";
            }
        }
        return appDataRoot;
    }

    public static void makeHttpRequest(String method, String url, String body, String userAgent, String contentType, String contentLength, ArrayList<String> headerNameList, ArrayList<String> headerNameValues) {
        throw new RuntimeException("TODO: implement makeHttpRequest");
    }

    public static int ioDeleteDirectory(String path, boolean recursive) {
        try {
            File file = new File(path);
            if (recursive) {
                ioDeleteDirectoryRecursive(file);
            } else {
                if (!file.delete()) {
                    return %%%IO_ERROR_UNKNOWN_ERROR%%%;
                }
            }
        } catch (Exception e) {
            return %%%IO_ERROR_UNKNOWN_ERROR%%%;
        }
        return %%%IO_ERROR_NONE%%%;
    }

    private static void ioDeleteDirectoryRecursive(File file) {
        if (file.isDirectory()) {
            for (File child : file.listFiles()) {
                ioDeleteDirectoryRecursive(child);
            }
        }

        if (!file.delete()) {
            throw new RuntimeException("Cannot delete file.");
        }
    }

    public static int ioDeleteFile(String path) {
        File file = new File(path);
        if (!file.delete()) {
            return %%%IO_ERROR_UNKNOWN_ERROR%%%;
        }
        return %%%IO_ERROR_NONE%%%;
    }

    public static void launchBrowser(String url) {
        if(Desktop.isDesktopSupported())
        {
            try {
                Desktop.getDesktop().browse(new java.net.URI(url));
            } catch (IOException | java.net.URISyntaxException e) {
                // Not today.
            }
        }
    }

    public static Object loadMusicFromResource() {
        return null;
    }

    public static BufferedImage scaleImage(BufferedImage image, int width, int height) {
        BufferedImage newImage = new BufferedImage(width, height, image.getType());
        Graphics2D g = newImage.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        g.drawImage(image, 0, 0, width, height, 0, 0, image.getWidth(), image.getHeight(), null);
        g.dispose();
        return newImage;
    }

	public static void downloadImage(String key, String url) {
		throw new RuntimeException();
	}
}
