using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;

namespace %%%PROJECT_ID%%%
{
	internal static class ResourceReader
	{
        public static string GetResourceManifest()
        {
            return ReadTextFile("Resources/ResourceMapping.txt") ?? "";
        }

		public static string ReadTextFile(string path)
		{
			IList<byte> bytes = ReadBytes(path);
            if (bytes == null) return null;
            bool hasBom = bytes.Count >= 3 && bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191;
			StringBuilder output = new StringBuilder(bytes.Count); 
			output.Append(bytes.Skip<byte>(hasBom ? 3 : 0).Select<byte, char>(b => (char)b).ToArray<char>());
			return output.ToString();
		}

		public static string ReadByteCodeFile()
		{
			return ReadTextFile("Resources/ByteCode.txt");
		}

        public static System.Drawing.Bitmap ReadImageFile(string path)
        {
            for (int i = 0; i < 10; ++i)
            {
                IList<byte> data = ReadBytes(path);
                if (data == null)
                {
                    return null;
                }
                MemoryStream ms = new MemoryStream(data.ToArray());
                ms.Seek(0, SeekOrigin.Begin); // Seems redundant but randomly crashes without it.
                try
                {
                    return (Bitmap)Bitmap.FromStream(ms);
                }
                catch (System.ArgumentException)
                {
                    // This happens randomly like 3% of the time on valid images.
                    // I have no idea why.
                    // .03 to the 10th power is never, although a better solution/explanation would be really nice.
                }
            }
            return null;
        }

		public static System.IO.Stream GetResourceStream(string path)
		{
            System.Reflection.Assembly assembly = typeof(ResourceReader).Assembly;
			path = assembly.GetName().Name + "." + path.Replace('\\', '.').Replace('/', '.').TrimStart('.');
			return assembly.GetManifestResourceStream(path);
		}

		private const int BUFFER_LENGTH = 1000;
		private static readonly byte[] BUFFER = new byte[BUFFER_LENGTH];

		public static List<byte> ReadBytes(string path)
		{
			System.IO.Stream stream = GetResourceStream(path);
			if (stream == null)
			{
				return null;
			}
			StringBuilder sb = new StringBuilder();
			List<byte> output = new List<byte>();

			int bytesRead = 1;
			while (bytesRead > 0)
			{
				bytesRead = stream.Read(BUFFER, 0, BUFFER_LENGTH);
				if (bytesRead == BUFFER_LENGTH)
				{
					output.AddRange(BUFFER);
				}
				else
				{
					for (int i = 0; i < bytesRead; ++i)
					{
						output.Add(BUFFER[i]);
					}
					bytesRead = 0;
				}
			}
			return output;
		}
	}
}
