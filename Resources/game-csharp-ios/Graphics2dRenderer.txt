using OpenTK.Graphics.ES11;

namespace %%%PROJECT_ID%%%
{
	public static class Graphics2dRenderer
	{
		private static float[] rectanglePoints = new float[8];
		private static float[] textureCoords = new float[8];
		private static byte[] colors = new byte[16];

		public static void Render(
			int[] commands,
			int commandsLength,
			object[] texturesNativeData,
			int logicalWidth,
			int logicalHeight)
		{
			double left, top, width, height, bottom, right;
			double angle;
			int red, green, blue, alpha;
			double textureLeft, textureTop, textureRight, textureBottom, textureWidth, textureHeight;
			int cropWidth, cropHeight;
			double croppedLeft, croppedRight, croppedTop, croppedBottom;
			object[] textureNativeData, textureResourceNativeData;
			int mask;
			int textureId;
			int x, y;
			double ax, ay, bx, by, cx, cy, dx, dy;
			double r_cos, r_sin, tx, ty;
			bool rotated;

			int imageIndex = 0;

			for (int i = 0; i < commandsLength; i += 16)
			{
				switch (commands[i])
				{
					// rectangle
					case 1:
						left = commands[i | 1];
						top = commands[i | 2];
						width = commands[i | 3];
						height = commands[i | 4];
						right = left + width;
						bottom = top + height;

						rectanglePoints[0] = (float)left;
						rectanglePoints[1] = (float)top;
						rectanglePoints[2] = (float)left;
						rectanglePoints[3] = (float)bottom;
						rectanglePoints[4] = (float)right;
						rectanglePoints[5] = (float)top;
						rectanglePoints[6] = (float)right;
						rectanglePoints[7] = (float)bottom;

						red = commands[i | 5] & 255;
						green = commands[i | 6] & 255;
						blue = commands[i | 7] & 255;
						alpha = commands[i | 8] & 255;
						for (int j = 0; j < 16; j += 4)
						{
							colors[j | 0] = (byte)red;
							colors[j | 1] = (byte)green;
							colors[j | 2] = (byte)blue;
							colors[j | 3] = (byte)alpha;
						}
						GL.Disable(All.Texture2D);
						GL.VertexPointer(2, All.Float, 0, rectanglePoints);
						GL.EnableClientState(All.VertexArray);
						GL.DisableClientState(All.TextureCoordArray);
						GL.ColorPointer(4, All.UnsignedByte, 0, colors);
						GL.EnableClientState(All.ColorArray);
						GL.DrawArrays(All.TriangleStrip, 0, 4);

						break;

					// ellipse
					// TODO: this is actually a rectangle for now.
					case 2:
						left = commands[i | 1];
						top = commands[i | 2];
						width = commands[i | 3];
						height = commands[i | 4];
						right = left + width;
						bottom = top + height;

						rectanglePoints[0] = (float)left;
						rectanglePoints[1] = (float)top;
						rectanglePoints[2] = (float)left;
						rectanglePoints[3] = (float)bottom;
						rectanglePoints[4] = (float)right;
						rectanglePoints[5] = (float)top;
						rectanglePoints[6] = (float)right;
						rectanglePoints[7] = (float)bottom;

						red = commands[i | 5] & 255;
						green = commands[i | 6] & 255;
						blue = commands[i | 7] & 255;
						alpha = commands[i | 8] & 255;
						for (int j = 0; j < 16; j += 4)
						{
							colors[j | 0] = (byte)red;
							colors[j | 1] = (byte)green;
							colors[j | 2] = (byte)blue;
							colors[j | 3] = (byte)alpha;
						}
						GL.Disable(All.Texture2D);
						GL.VertexPointer(2, All.Float, 0, rectanglePoints);
						GL.EnableClientState(All.VertexArray);
						GL.DisableClientState(All.TextureCoordArray);
						GL.ColorPointer(4, All.UnsignedByte, 0, colors);
						GL.EnableClientState(All.ColorArray);
						GL.DrawArrays(All.TriangleStrip, 0, 4);

						break;

					// line
					case 3:
						// This should have been optimized into a quad before now.
						throw new System.NotImplementedException();

					// triangle
					case 4:
						throw new System.NotImplementedException();

					// quad
					case 5:
						throw new System.NotImplementedException();

					// image
					case 6:
						textureNativeData = (object[])texturesNativeData[imageIndex++];
						textureResourceNativeData = (object[])textureNativeData[0];
						mask = commands[i | 1];

                        if (!(bool)textureResourceNativeData[1])
                        {
							textureResourceNativeData[2] = LoadTexture((CryImage)textureResourceNativeData[3]);
                            textureResourceNativeData[1] = true;
                        }

                        mask = commands[i | 1];
                        rotated = (mask & 4) != 0;
                        textureId = (int)textureResourceNativeData[2];
                        alpha = 255;
                        x = commands[i | 8];
                        y = commands[i | 9];

                        // alpha
                        if ((mask & 8) != 0)
                        {
							// TODO: this is not applied yet.
							alpha = commands[i | 11];
                            if (alpha < 0 || alpha > 255) alpha = alpha < 0 ? 0 : 255;
                        }

						textureLeft = (double)textureNativeData[1];
						textureTop = (double)textureNativeData[2];
						textureRight = (double)textureNativeData[3];
						textureBottom = (double)textureNativeData[4];
						width = (int)textureNativeData[5];
						height = (int)textureNativeData[6];

                        textureWidth = textureRight - textureLeft;
                        textureHeight = textureBottom - textureTop;

                        // slice
                        if ((mask & 1) != 0)
                        {
                            ax = commands[i | 2];
                            ay = commands[i | 3];
                            cropWidth = commands[i | 4];
                            cropHeight = commands[i | 5];
							
							croppedLeft = textureLeft + textureWidth * ax / width;
							croppedRight = croppedLeft + textureWidth * (ax + cropWidth) / width;
							croppedTop = textureTop + textureHeight * ay / height;
							croppedBottom = textureTop + textureHeight * (ay + cropHeight) / height;

                            textureLeft = croppedLeft;
                            textureRight = croppedRight;
                            textureTop = croppedTop;
                            textureBottom = croppedBottom;
                            width = cropWidth;
                            height = cropHeight;
                        }

                        // stretch
                        if ((mask & 2) != 0)
                        {
                            width = commands[i | 6];
                            height = commands[i | 7];
                        }

                        if (rotated)
                        {
                            angle = commands[i | 10] / 1048576.0;
                            r_cos = System.Math.Cos(angle);
                            r_sin = System.Math.Sin(angle);
                            tx = width * 0.5;
                            ty = height * 0.5;
                            ax = (r_cos * -tx - r_sin * -ty) + x;
                            ay = (r_sin * -tx + r_cos * -ty) + y;
                            bx = (r_cos * tx - r_sin * -ty) + x;
                            by = (r_sin * tx + r_cos * -ty) + y;
                            cx = (r_cos * -tx - r_sin * ty) + x;
                            cy = (r_sin * -tx + r_cos * ty) + y;
                            dx = (r_cos * tx - r_sin * ty) + x;
                            dy = (r_sin * tx + r_cos * ty) + y;
                        }
                        else
                        {
							ax = x;
							ay = y;
                            dx = ax + width;
                            dy = ay + height;
							bx = dx;
							by = ay;
							cx = ax;
							cy = dy;
                        }

						rectanglePoints[0] = (float)ax;
						rectanglePoints[1] = (float)ay;
						rectanglePoints[2] = (float)cx;
						rectanglePoints[3] = (float)cy;
						rectanglePoints[4] = (float)bx;
						rectanglePoints[5] = (float)by;
						rectanglePoints[6] = (float)dx;
						rectanglePoints[7] = (float)dy;

						textureCoords[0] = (float)textureLeft;
						textureCoords[1] = (float)textureTop;
						textureCoords[2] = (float)textureLeft;
						textureCoords[3] = (float)textureBottom;
						textureCoords[4] = (float)textureRight;
						textureCoords[5] = (float)textureTop;
						textureCoords[6] = (float)textureRight;
						textureCoords[7] = (float)textureBottom;

						GL.Enable(All.Blend);
						GL.BlendFunc(All.SrcAlpha, All.OneMinusSrcAlpha);
						GL.Enable(All.Texture2D);
						GL.BindTexture(All.Texture2D, textureId);
						GL.EnableClientState(All.VertexArray);
						GL.EnableClientState(All.TextureCoordArray);
						GL.DisableClientState(All.ColorArray);
						GL.VertexPointer(2, All.Float, 0, rectanglePoints);
						GL.TexCoordPointer(2, All.Float, 0, textureCoords);
						GL.DrawArrays(All.TriangleStrip, 0, 4);

                        break;
						
					default:
						break;
				}
			}
		}

		private static int LoadTexture(CryImage image)
		{
			int[] intPtr = new int[1];
			GL.GenTextures(1, intPtr);
			int textureId = intPtr[0];
			GL.BindTexture(All.Texture2D, textureId);

			// setup texture parameters
			GL.TexParameterx(All.Texture2D, All.TextureMagFilter, (int)All.Linear);
			GL.TexParameterx(All.Texture2D, All.TextureMinFilter, (int)All.Linear);
			GL.TexParameterx(All.Texture2D, All.TextureWrapS, (int)All.ClampToEdge);
			GL.TexParameterx(All.Texture2D, All.TextureWrapT, (int)All.ClampToEdge);

			int width = image.Width;
			int height = image.Height;

			Foundation.NSData data = image.GetNativeImage().DataProvider.CopyData();

			GL.TexImage2D(
				All.Texture2D,
				0,
				(int)All.Rgba,
				width,
				height,
				0,
				All.Rgba,
				All.UnsignedByte,
				data.Bytes);
			
			return textureId;
		}
	}
}
