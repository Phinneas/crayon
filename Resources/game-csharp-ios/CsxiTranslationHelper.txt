using System;
using System.Collections.Generic;

namespace %%%PROJECT_ID%%%
{
	public static class CsxiTranslationHelper
	{
		public static string AppDataRoot { get { return "."; } }

		public static int GetImageWidth(object img)
		{
			CoreGraphics.CGImage cgImage = (CoreGraphics.CGImage)img;
			return (int)cgImage.Width;
		}

		public static int GetImageHeight(object img)
		{
			CoreGraphics.CGImage cgImage = (CoreGraphics.CGImage)img;
			return (int)cgImage.Height;
		}

		public static void InitializeGameWithFps(double fps)
		{
			// No-op. FPS is ignored.
		}

		public static GameViewController GVC { get; set; }

		public static void InitializeScreen(int width, int height)
		{
			GVC.LogicalWidth = width;
			GVC.LogicalHeight = height;
			GVC.ScreenInitialized = true;
		}

		public static void InitializeScreen(int gameWidth, int gameHeight, int displayWidth, int displayHeight)
		{
			// Discard window dimension params. You don't get to pick the physical screen size.
			InitializeScreen(gameWidth, gameHeight);
		}

		public static void SetTitle(string title)
		{
			// No-op.
		}

		public static List<PlatformRelayObject> GetEvents()
		{
			return new List<PlatformRelayObject>(GVC.GetEvents());
		}

		/*
		public static object FlushImagetteToNativeBitmap(Imagette imagette)
		{
			int width = 0;
			int height = 0;
			int[] xs = null;
			int[] ys = null;
			CoreGraphics.CGImage[] nativeBitmaps = null;
			byte[] bitmapData = new byte[width * height * 4];

			for (int i = 0; i < nativeBitmaps.Length; ++i)
			{
				CoreGraphics.CGImage component = nativeBitmaps[i];
				int leftX = xs[i];
				int topY = ys[i];
				int cWidth = (int)component.Width;
				int cHeight = (int)component.Height;
				IntPtr componentData = component.DataProvider.CopyData().Bytes;
				byte[] componentPixels = new byte[cWidth * cHeight * 4];
				System.Runtime.InteropServices.Marshal.Copy(componentData, componentPixels, 0, componentPixels.Length);
				for (int y = 0; y < cHeight; ++y)
				{
					int targetY = topY + y;
					int targetIndex = (targetY * width + leftX) * 4;
					int sourceIndex = y * cWidth * 4;
					int length = cWidth * 4;
					System.Array.Copy(componentPixels, sourceIndex, bitmapData, targetIndex, length);
				}
			}

			using (CoreGraphics.CGColorSpace colorSpace = CoreGraphics.CGColorSpace.CreateDeviceRGB())
			{
				IntPtr ptr = System.Runtime.InteropServices.Marshal.AllocHGlobal(bitmapData.Length);
				System.Runtime.InteropServices.Marshal.Copy(bitmapData, 0, ptr, bitmapData.Length);
				Foundation.NSData data = Foundation.NSData.FromBytes(ptr, (nuint)bitmapData.Length);
				CoreGraphics.CGDataProvider dataProvider = new CoreGraphics.CGDataProvider(data);
				CoreGraphics.CGImage output = new CoreGraphics.CGImage(
					width,
					height, 8, 32, 4 * width, colorSpace,
					CoreGraphics.CGBitmapFlags.ByteOrderDefault,
					dataProvider, null, false, CoreGraphics.CGColorRenderingIntent.Default);
				
				System.Runtime.InteropServices.Marshal.FreeHGlobal(ptr);
				return output;
			}
		}//*/

		/*
		public static void DownloadImage(string key, string url)
		{
			throw new NotImplementedException();
		}
		*/

		public static void HttpRequest(
			HttpRequest request,
			string method,
			string url,
			string body,
			string userAgent,
			string contentType,
			string contentLength,
			List<string> filteredHeaderNames,
			List<string> filteredHeaderValues)
		{
			throw new NotImplementedException();
		}

		public static string IoFileReadText(string path, bool isUserData)
		{
			throw new NotImplementedException();
		}

		public static int IoFileWriteText(string path, string content, bool isUserData)
		{
			throw new NotImplementedException();
		}

		public static string[] IoFilesInDirectory(string path, bool isUserData)
		{
			throw new NotImplementedException();
		}

		public static bool IoDoesPathExist(string path, bool isDirectoriesOnly, bool isPerformCaseCheck, bool isUserData)
		{
			throw new NotImplementedException();
		}

		public static int IoDeleteFile(string path, bool isUserData)
		{
			throw new NotImplementedException();
		}

		public static int IoDeleteDirectory(string path, bool recursive)
		{
			throw new NotImplementedException();
		}

		public static string IoCurrentDirectory()
		{
			throw new NotImplementedException();
		}

		public static int IoCreateDirectory(string path)
		{
			throw new NotImplementedException();
		}

		public static void CheckLoaderIsDone(
			object[] imageLoaderNativeData,
			object[] nativeImageDataNativeData,
			List<Value> output)
		{
			int status = 0;
			lock (imageLoaderNativeData[3])
			{
				status = (int)imageLoaderNativeData[2];
			}

			output[0] = CrayonWrapper.v_buildInteger(status);
		}

		public static void ImageLoadAsync(
			string filename,
			object[] nativeImageDataNativeData,
			object[] imageLoaderNativeData)
		{
			imageLoaderNativeData[3] = new object(); // mutex

			// TODO: Once I verify this works, switch to BackgroundWorker.
			bool loaded = ImageLoadSync(filename, nativeImageDataNativeData, null);
			imageLoaderNativeData[2] = loaded ? 1 : 2;
		}

		public static bool ImageLoadSync(
			string filename,
			object[] nativeImageDataNativeData,
			List<Value> statusOutCheesy)
		{
			CryImage image = ResourceReader.ReadImageFile("Images/" + filename);
			if (image != null)
			{
				if (statusOutCheesy != null) statusOutCheesy.Reverse();
				nativeImageDataNativeData[0] = image;
				nativeImageDataNativeData[1] = image.Width;
				nativeImageDataNativeData[2] = image.Height;
				return true;
			}
			return false;
		}

		public static string GetImageResourceManifestString()
		{
			return ResourceReader.ReadTextFile("ImageSheetManifest.txt") ?? "";
		}

		public static object GenerateNativeBitmapOfSize(int width, int height)
		{
			return new CryImage(width, height);
		}

		public static void BlitImage(
			object targetObject, object sourceObject,
			int targetX, int targetY,
			int sourceX, int sourceY,
			int width, int height)
		{
			CryImage target = (CryImage)targetObject;
			CryImage source = (CryImage)sourceObject;

			// TODO: eventually perform locking and unlocking at a layer above so that this
			// is less inefficient.
			target.LockPixels();
			target.Blit(source, targetX, targetY, sourceX, sourceY, width, height);
			target.UnlockPixels();
		}
	}
}
