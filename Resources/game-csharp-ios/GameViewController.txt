using System.Collections.Generic;
using System.Diagnostics;

using Foundation;
using GLKit;
using OpenGLES;
using OpenTK.Graphics.ES11;

namespace %%%PROJECT_ID%%%
{
	[Register("GameViewController")]
	public class GameViewController : GLKViewController, IGLKViewDelegate
	{
		EAGLContext context { get; set; }

		private bool executionBegun = false;
		private bool executionEnded = false;

		private int executionContextId;

		public int LogicalWidth { get; set; }
		public int LogicalHeight { get; set; }
		public bool ScreenInitialized { get; set; }

		[Export("initWithCoder:")]
		public GameViewController(NSCoder coder) : base(coder)
		{
			this.ScreenInitialized = false;
			ResourceReader.GVC = this;
			CsxiTranslationHelper.GVC = this;
		}

		private List<PlatformRelayObject> events = new List<PlatformRelayObject>();

		public override void TouchesBegan(NSSet touches, UIKit.UIEvent evt)
		{
			int[] coord = this.GetTouchCoord(touches, evt);
			this.events.Add(new PlatformRelayObject(33, coord[0], coord[1], 0, 0, null));
		}

		public override void TouchesEnded(NSSet touches, UIKit.UIEvent evt)
		{
			int[] coord = this.GetTouchCoord(touches, evt);
			this.events.Add(new PlatformRelayObject(34, coord[0], coord[1], 0, 0, null));
		}

		public override void TouchesMoved(NSSet touches, UIKit.UIEvent evt)
		{
			int[] coord = this.GetTouchCoord(touches, evt);
			this.events.Add(new PlatformRelayObject(32, coord[0], coord[1], 0, 0, null));
		}

		public PlatformRelayObject[] GetEvents()
		{
			PlatformRelayObject[] output = this.events.ToArray();
			this.events.Clear();
			return output;
		}

		private int[] reusableCoord = new int[2];
		private int[] GetTouchCoord(NSSet touches, UIKit.UIEvent e)
		{
			UIKit.UITouch[] touch = touches.ToArray<UIKit.UITouch>();
			UIKit.UIView view = touch[0].View;
			CoreGraphics.CGPoint pt = touch[0].GetPreciseLocation(view);
			double x = (float)pt.X;
			double y = (float)pt.Y;
			double width = (float)view.Bounds.Width;
			double height = (float)view.Bounds.Height;
			int logicalX = (int)(this.LogicalWidth * x / width);
			int logicalY = (int)(this.LogicalHeight * y / height);
			reusableCoord[0] = logicalX;
			reusableCoord[1] = logicalY;
			return reusableCoord;
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			context = new EAGLContext(EAGLRenderingAPI.OpenGLES1);

			if (context == null)
			{
				Debug.WriteLine("Failed to create ES context");
			}

			var view = (GLKView)View;
			view.Context = context;
			view.DrawableDepthFormat = GLKViewDrawableDepthFormat.Format24;

			SetupGL();
		}

		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);

			TearDownGL();

			if (EAGLContext.CurrentContext == context)
				EAGLContext.SetCurrentContext(null);
		}

		public override void DidReceiveMemoryWarning()
		{
			base.DidReceiveMemoryWarning();

			if (IsViewLoaded && View.Window == null)
			{
				View = null;

				TearDownGL();

				if (EAGLContext.CurrentContext == context)
				{
					EAGLContext.SetCurrentContext(null);
				}
			}

			// Dispose of any resources that can be recreated.
		}

		public override bool PrefersStatusBarHidden()
		{
			return true;
		}

		void SetupGL()
		{
			EAGLContext.SetCurrentContext(context);
		}

		void TearDownGL()
		{
			EAGLContext.SetCurrentContext(context);
		}

		public override void Update()
		{
			if (!this.executionBegun)
			{
				CrayonWrapper.v_main();
				this.executionBegun = true;
			}
			else if (!this.executionEnded)
			{
				int status = CrayonWrapper.v_runInterpreter(this.executionContextId);
				switch (status)
				{
					case 1: // Finished
					case 3: // Fatal error
						this.executionEnded = true;
						break;
					case 2: // Suspended
					case 4: // Suspended with lock
						break;
				}
			}
		}

		private static int[] renderCommands = new int[0];
		private static int renderCommandsLength = 0;
		private static object[] images = new object[0];

		public static void SetRenderData(int[] renderCommands, int renderCommandsLength, object[] images)
		{
			GameViewController.renderCommands = renderCommands;
			GameViewController.renderCommandsLength = renderCommandsLength;
			GameViewController.images = images;
		}

		void IGLKViewDelegate.DrawInRect(GLKView view, CoreGraphics.CGRect rect)
		{
			GL.ClearColor(0.0f, 0.0f, 0.0f, 1.0f);
			GL.Clear(ClearBufferMask.ColorBufferBit);
			GL.BlendFunc(All.SrcAlpha, All.OneMinusSrcAlpha);
			GL.Enable(All.Blend);
			GL.TexParameter(All.Texture2D, All.TextureMagFilter, (int)All.Nearest);
			GL.MatrixMode(All.ProjectionMatrix);
			GL.LoadIdentity();
			int logicalWidth = this.LogicalWidth;
			int logicalHeight = this.LogicalHeight;
			GL.Ortho(0f, logicalWidth, logicalHeight, 0f, -1f, 1f);
			GL.MatrixMode(All.Modelview);

			if (this.ScreenInitialized)
			{
				Graphics2dRenderer.Render(renderCommands, renderCommandsLength, images, logicalWidth, logicalHeight);
			}
			GL.Finish();
		}

		public string LoadResource(string name, string type)
		{
			string path = NSBundle.MainBundle.PathForResource(name, type);
			return System.IO.File.ReadAllText(path);
		}

		public CryImage LoadImage(string name, string type)
		{
			string path = NSBundle.MainBundle.PathForResource(name, type);
			if (path == null)
			{
				return null;
			}
			CoreGraphics.CGImage image = UIKit.UIImage.FromFile(path).CGImage;
			return new CryImage(image);
		}
	}
}
