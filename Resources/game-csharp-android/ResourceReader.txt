using System.Collections.Generic;

namespace %%%PROJECT_ID%%%
{
	internal static class ResourceReader
	{
		public static Android.Content.Res.AssetManager Assets { get; set; }
		public static MainActivity MainActivity { get; set; }

        private static Dictionary<string, int> pathTranslation = null;
		
        public static string GetResourceManifest()
        {
            return ReadTextResource("resourceManifest.txt");
        }

        public static int GetRawResourceId(string originalPath)
        {
            if (pathTranslation == null)
            {
                pathTranslation = new Dictionary<string, int>();
                string resourceLookup = ReadTextResource("resourceLookup.txt");
                if (resourceLookup != null)
                {
                    char[] comma = { ',' };
                    foreach (string line in resourceLookup.Split('\n'))
                    {
                        string[] parts = line.Split(comma, 2);
                        if (parts.Length == 2)
                        {
                            int id = int.Parse(parts[0].Trim());
                            string path = parts[1].Trim();
                            pathTranslation[path] = id;
                        }
                    }
                }
            }

            int output;
            if (pathTranslation.TryGetValue(originalPath, out output))
			{
				return output;
			}
			return -1;
        }
        
		private static readonly object ASSET_MUTEX = new object();
        private static readonly byte[] BUFFER = new byte[1000];
        
		private static byte[] ReadAsset(string pathInAssetsFolder)
		{
            List<byte> resource = new List<byte>();

			lock (ASSET_MUTEX)
			{
				System.IO.Stream stream = Assets.Open(pathInAssetsFolder);

				int bytesRead;
				while (true)
				{
					bytesRead = stream.Read(BUFFER, 0, BUFFER.Length);
					if (bytesRead > 0)
					{
						if (bytesRead == BUFFER.Length)
						{
							resource.AddRange(BUFFER);
						}
						else
						{
							for (int i = 0; i < bytesRead; ++i)
							{
								resource.Add(BUFFER[i]);
							}
						}
					}
					else
					{
						break;
					}
				}
			}

			return resource.ToArray();
		}

        public static string ReadTextResource(string path)
        {
            byte[] bytes = ReadAsset(path);
            if (bytes == null)
            {
                return null;
            }
            string output = System.Text.UTF8Encoding.UTF8.GetString(bytes);
            if (output[0] == 65279)
            {
                output = output.Substring(1);
            }
            return output;
        }

		public static string ReadByteCodeFile()
		{
			return ReadTextResource("ByteCode.txt");
		}

		public static Android.Graphics.Bitmap ReadImageFile(string path)
		{
            byte[] imageFileBytes = ReadAsset(path);
            return Android.Graphics.BitmapFactory.DecodeByteArray(imageFileBytes, 0, imageFileBytes.Length);
		}
	}
}
