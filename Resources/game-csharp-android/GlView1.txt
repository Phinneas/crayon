using System;
using OpenTK;
using OpenTK.Graphics.ES11;

using Android.Views;
using OpenTK.Platform.Android;
using Android.Content;
using Android.Util;
using System.Collections.Generic;

namespace %%%PROJECT_ID%%%
{
    public class GlView1 : AndroidGameView
    {
        public GlView1(Context context)
            : base(context)
        {
            LogicalWidth = 200;
            LogicalHeight = 350;
            LogicalViewInitialized = false;
            ExecutionContextId = 0;

            this.Touch += (sender, e) =>
            {
                this.ApplyTouchEvent(e.Event);
            };
        }

        private static List<PlatformRelayObject> events = new List<PlatformRelayObject>();

        public static List<PlatformRelayObject> GetEvents()
        {
            List<PlatformRelayObject> output = new List<PlatformRelayObject>();
            output.AddRange(events);
            events.Clear();
            return output;
        }

        public static void InjectBackButtonEvent()
        {
            events.Add(new PlatformRelayObject(1, 2, 0, 0, 0, null));
        }

        public void ApplyTouchEvent(MotionEvent e)
        {
            int x = (int)(LogicalWidth * e.RawX / this.Width);
            int y = (int)(LogicalHeight * e.RawY / this.Height);
            switch (e.Action)
            {
                case MotionEventActions.Down:
                case MotionEventActions.Up:
                    events.Add(new PlatformRelayObject(
                        e.Action == MotionEventActions.Down ? 33 : 34,
                        x, y, 0, 0, null));
                    break;
                case MotionEventActions.Move:
                    events.Add(new PlatformRelayObject(32, x, y, 0, 0, null));
                    break;
                default:
                    break;
            }
        }

        public static int LogicalWidth { get; set; }
        public static int LogicalHeight { get; set; }
        public static bool LogicalViewInitialized { get; set; }
        public static int ExecutionContextId { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            Run();
        }

        protected override void CreateFrameBuffer()
        {
            try
            {
                Log.Verbose("GLCube", "Loading with default settings");

                base.CreateFrameBuffer();
                return;
            }
            catch (Exception ex)
            {
                Log.Verbose("GLCube", "{0}", ex);
            }

            try
            {
                Log.Verbose("GLCube", "Loading with custom Android settings (low mode)");
                GraphicsMode = new AndroidGraphicsMode(0, 0, 0, 0, 0, false);

                base.CreateFrameBuffer();
                return;
            }
            catch (Exception ex)
            {
                Log.Verbose("GLCube", "{0}", ex);
            }
            throw new Exception("Can't load egl, aborting");
        }

        protected override void OnUpdateFrame(FrameEventArgs e)
        {
            base.OnUpdateFrame(e);

            int vmStatus = CrayonWrapper.v_runInterpreter(ExecutionContextId);
            if (vmStatus == 1 || // finished
                vmStatus == 3) // error
            {
                System.Environment.Exit(1);
            }
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);

            GL.ClearColor(0f, 0f, 0f, 1f);
            GL.Clear((uint)All.ColorBufferBit);
            GL.BlendFunc(All.SrcAlpha, All.OneMinusSrcAlpha);
            GL.Enable(All.Blend);
            GL.TexParameter(All.Texture2D, All.TextureMagFilter, (int)All.Nearest);

            GL.MatrixMode(All.Projection);
            GL.LoadIdentity();
            GL.Ortho(0f, GlView1.LogicalWidth * 1f, GlView1.LogicalHeight * 1f, 0f, -1.0f, 1.0f);

            GL.MatrixMode(All.Modelview);

            if (LogicalViewInitialized)
            {
                this.RenderEvents();
            }

            GL.Finish();

            SwapBuffers();
        }

        private static float[] squareVertices = new float[8];
        private static float[] textureCoords = new float[8];
        private static byte[] colors = new byte[16];

        private int LoadTexture(Library.ImageResources.AndroidBitmap bitmap)
        {
            int[] intPtr = new int[1];
            GL.GenTextures(1, intPtr);
            int textureId = intPtr[0];
            GL.BindTexture(All.Texture2D, textureId);

            // setup texture parameters
            GL.TexParameterx(All.Texture2D, All.TextureMagFilter, (int)All.Nearest);
            GL.TexParameterx(All.Texture2D, All.TextureMinFilter, (int)All.Nearest);
            GL.TexParameterx(All.Texture2D, All.TextureWrapS, (int)All.ClampToEdge);
            GL.TexParameterx(All.Texture2D, All.TextureWrapT, (int)All.ClampToEdge);

            Android.Opengl.GLUtils.TexImage2D((int)All.Texture2D, 0, bitmap.GetNativeBitmap(), 0);

            return textureId;
        }

        // defaults are valid and empty
        private static int[] renderEvents = new int[0];
        private static int renderEventsLength = 0;
        private static object[][] imagesNativeData = null;
        private static List<int> textChars = null;

        public static void SetRenderData(int[] events, int eventsLength, object[][] imagesNativeData, List<int> textChars)
        {
            GlView1.renderEvents = events;
            GlView1.renderEventsLength = eventsLength;
            GlView1.imagesNativeData = imagesNativeData;
            GlView1.textChars = textChars;
        }

        private void RenderEvents()
        {
            int[] renderEvents = GlView1.renderEvents;
            int renderEventsLength = GlView1.renderEventsLength;
            object[][] imagesNativeData = GlView1.imagesNativeData;
            List<int> textChars = GlView1.textChars;

            float left = 0;
            float top = 0;
            float bottom = 0;
            float right = 0;
            int startX, startY, endX, endY;

            int ax, ay;
            float axf, ayf, bxf, byf, cxf, cyf, dxf, dyf;
            float textureWidth, textureHeight, textureLeft, textureTop, textureRight, textureBottom;
            float croppedLeft, croppedTop, croppedRight, croppedBottom;
            int textureResourceWidth, textureResourceHeight;
            float angle, rCos, rSin, tx, ty;

            int imageIndex = 0;
            int cropWidth, cropHeight;
            int width, height;
            int textureId = 0;
            int mask = 0;
            bool rotated;

            object[] textureNativeData = null;
            object[] textureResourceNativeData = null;

            int screenWidth = GlView1.LogicalWidth;
            int screenHeight = GlView1.LogicalHeight;
            byte red, green, blue, alpha;
            int j;

            for (int i = 0; i < renderEventsLength; i += 16)
            {
                switch (renderEvents[i])
                {
                    case 1:
                        // Render rectangle
                        left = renderEvents[i | 1];
                        top = renderEvents[i | 2];
                        right = left + renderEvents[i | 3];
                        bottom = top + renderEvents[i | 4];

                        squareVertices[0] = left;
                        squareVertices[1] = top;
                        squareVertices[2] = left;
                        squareVertices[3] = bottom;
                        squareVertices[4] = right;
                        squareVertices[5] = top;
                        squareVertices[6] = right;
                        squareVertices[7] = bottom;

                        red = (byte)renderEvents[i | 5];
                        green = (byte)renderEvents[i | 6];
                        blue = (byte)renderEvents[i | 7];
                        alpha = (byte)renderEvents[i | 8];
                        for (j = 0; j < 16; j += 4)
                        {
                            colors[j | 0] = red;
                            colors[j | 1] = green;
                            colors[j | 2] = blue;
                            colors[j | 3] = alpha;
                        }

                        GL.Disable(All.Texture2D);
                        GL.VertexPointer(2, All.Float, 0, squareVertices);
                        GL.EnableClientState(All.VertexArray);
                        GL.DisableClientState(All.TextureCoordArray);
                        GL.ColorPointer(4, All.UnsignedByte, 0, colors);
                        GL.EnableClientState(All.ColorArray);
                        GL.DrawArrays(All.TriangleStrip, 0, 4);

                        break;

                    case 2:
                        // Render ellipse
                        // TODO: actually implement this. Right now this is just copied code from rectangles.
                        left = renderEvents[i | 1];
                        top = renderEvents[i | 2];
                        right = left + renderEvents[i | 3];
                        bottom = top + renderEvents[i | 4];

                        squareVertices[0] = left;
                        squareVertices[1] = top;
                        squareVertices[2] = left;
                        squareVertices[3] = bottom;
                        squareVertices[4] = right;
                        squareVertices[5] = top;
                        squareVertices[6] = right;
                        squareVertices[7] = bottom;

                        red = (byte)renderEvents[i | 5];
                        green = (byte)renderEvents[i | 6];
                        blue = (byte)renderEvents[i | 7];
                        alpha = (byte)renderEvents[i | 8];
                        for (j = 0; j < 16; j += 4)
                        {
                            colors[j | 0] = red;
                            colors[j | 1] = green;
                            colors[j | 2] = blue;
                            colors[j | 3] = alpha;
                        }

                        GL.Disable(All.Texture2D);
                        GL.VertexPointer(2, All.Float, 0, squareVertices);
                        GL.EnableClientState(All.VertexArray);
                        GL.DisableClientState(All.TextureCoordArray);
                        GL.ColorPointer(4, All.UnsignedByte, 0, colors);
                        GL.EnableClientState(All.ColorArray);
                        GL.DrawArrays(All.TriangleStrip, 0, 4);

                        break;

                    case 3:
                        // Render line
                        break;

                    case 4:
                        // Render triangle
                        break;

                    case 5:
                        // Render quad
                        break;

                    case 6:
                        // Render image
                        textureNativeData = imagesNativeData[imageIndex++];
                        textureResourceNativeData = (object[])textureNativeData[0];

                        if (!(bool)textureResourceNativeData[1])
                        {
                            textureId = LoadTexture((Library.ImageResources.AndroidBitmap)textureResourceNativeData[3]);
                            textureResourceNativeData[2] = textureId;
                            textureResourceNativeData[1] = true;
                        }

                        mask = renderEvents[i | 1];
                        rotated = (mask & 4) != 0;
                        textureId = (int)textureResourceNativeData[2];
                        alpha = 255;
                        startX = renderEvents[i | 8]; // left
                        startY = renderEvents[i | 9]; // top

                        textureLeft = (float)(double)textureNativeData[1];
                        textureTop = (float)(double)textureNativeData[2];
                        textureRight = (float)(double)textureNativeData[3];
                        textureBottom = (float)(double)textureNativeData[4];
                        width = (int)textureNativeData[5];
                        height = (int)textureNativeData[6];

                        textureWidth = textureRight - textureLeft;
                        textureHeight = textureBottom - textureTop;
                        textureResourceWidth = (int)textureResourceNativeData[4];
                        textureResourceHeight = (int)textureResourceNativeData[5];

                        // slice
                        if ((mask & 1) != 0)
                        {
                            ax = renderEvents[i | 2];
                            ay = renderEvents[i | 3];
                            cropWidth = renderEvents[i | 4];
                            cropHeight = renderEvents[i | 5];

                            croppedLeft = textureLeft + textureWidth * ax / width;
                            croppedRight = textureLeft + textureWidth * (ax + cropWidth) / width;
                            croppedTop = textureTop + textureHeight * ay / height;
                            croppedBottom = textureTop + textureHeight * (ay + cropHeight) / height;

                            textureLeft = croppedLeft;
                            textureRight = croppedRight;
                            textureTop = croppedTop;
                            textureBottom = croppedBottom;
                            width = cropWidth;
                            height = cropHeight;
                        }

                        // stretch
                        if ((mask & 2) != 0)
                        {
                            width = renderEvents[i | 6];
                            height = renderEvents[i | 7];
                        }

                        if (rotated)
                        {
                            angle = renderEvents[i | 10] / 1048576.0f;
                            rCos = (float)Math.Cos(angle);
                            rSin = (float)Math.Sin(angle);
                            tx = width * 0.5f;
                            ty = height * 0.5f;
                            axf = (rCos * -tx - rSin * -ty) + startX;
                            ayf = (rSin * -tx + rCos * -ty) + startY;
                            bxf = (rCos * tx - rSin * -ty) + startX;
                            byf = (rSin * tx + rCos * -ty) + startY;
                            cxf = (rCos * -tx - rSin * ty) + startX;
                            cyf = (rSin * -tx + rCos * ty) + startY;
                            dxf = (rCos * tx - rSin * ty) + startX;
                            dyf = (rSin * tx + rCos * ty) + startY;

                            squareVertices[0] = axf;
                            squareVertices[1] = ayf;
                            squareVertices[2] = cxf;
                            squareVertices[3] = cyf;
                            squareVertices[4] = bxf;
                            squareVertices[5] = byf;
                            squareVertices[6] = dxf;
                            squareVertices[7] = dyf;

                            textureCoords[0] = textureLeft;
                            textureCoords[1] = textureTop;
                            textureCoords[2] = textureLeft;
                            textureCoords[3] = textureBottom;
                            textureCoords[4] = textureRight;
                            textureCoords[5] = textureTop;
                            textureCoords[6] = textureRight;
                            textureCoords[7] = textureBottom;

                        }
                        else
                        {
                            endX = startX + width;
                            endY = startY + height;

                            squareVertices[0] = startX;
                            squareVertices[1] = startY;
                            squareVertices[2] = startX;
                            squareVertices[3] = endY;
                            squareVertices[4] = endX;
                            squareVertices[5] = startY;
                            squareVertices[6] = endX;
                            squareVertices[7] = endY;

                            textureCoords[0] = textureLeft;
                            textureCoords[1] = textureTop;
                            textureCoords[2] = textureLeft;
                            textureCoords[3] = textureBottom;
                            textureCoords[4] = textureRight;
                            textureCoords[5] = textureTop;
                            textureCoords[6] = textureRight;
                            textureCoords[7] = textureBottom;
                        }
                        GL.Enable(All.Blend);
                        GL.BlendFunc(All.SrcAlpha, All.OneMinusSrcAlpha);
                        GL.Enable(All.Texture2D);
                        GL.BindTexture(All.Texture2D, textureId);
                        GL.EnableClientState(All.VertexArray);
                        GL.EnableClientState(All.TextureCoordArray);
                        GL.DisableClientState(All.ColorArray);
                        GL.VertexPointer(2, All.Float, 0, squareVertices);
                        GL.TexCoordPointer(2, All.Float, 0, textureCoords);
                        GL.DrawArrays(All.TriangleStrip, 0, 4);
                        break;

                    default:
                        throw new NotImplementedException("Unknown render command");
                }
            }
        }
    }
}
