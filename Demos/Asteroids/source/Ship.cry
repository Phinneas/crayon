SHIP_ROTATION_SPEED = 2 * 3.14159 / 80;
SHIP_ACCELERATION = 1.0;

class Ship {
	constructor(x, y) {
		this.x = x;
		this.y = y;
		this.vx = 0;
		this.vy = 0;
		this.angle = 0;
	}
	
	function update(accel, decel, rotation_dir /* -1, 0, or 1 */) {
		if (rotation_dir != 0) {
			this.angle += SHIP_ROTATION_SPEED * rotation_dir;
		}
		
		accel_sign = accel ? 1 : decel ? -1 : 0;
		this.vx += accel_sign * SHIP_ACCELERATION * $cos(this.angle);
		this.vy += accel_sign * SHIP_ACCELERATION * $sin(this.angle);
		
		this.x += this.vx;
		this.y += this.vy;
		
		
		this.x = this.x % (0.0 + GAME_WIDTH);
		this.y = this.y % (0.0 + GAME_HEIGHT);
	}
	
	function render(rc) {

		nose_radius = 20;
		wing_radius = 15;

		x1 = $floor(nose_radius * $cos(this.angle) + this.x);
		y1 = $floor(nose_radius * $sin(this.angle) + this.y);
		
		ang1 = this.angle - 2.6;
		ang2 = this.angle + 2.6;
		
		x2 = $floor(wing_radius * $cos(ang1) + this.x);
		y2 = $floor(wing_radius * $sin(ang1) + this.y);
		
		x3 = $floor(wing_radius * $cos(ang2) + this.x);
		y3 = $floor(wing_radius * $sin(ang2) + this.y);
		
		$gfx_draw_line(x1, y1, x2, y2, 2, 0, 255, 0, 255);
		$gfx_draw_line(x1, y1, x3, y3, 2, 0, 255, 0, 255);
		$gfx_draw_line(x3, y3, x2, y2, 2, 0, 255, 0, 255);
	}
}