using System;
using System.Collections.Generic;

namespace %%%PROJECT_ID%%%
{
	public static class CsxaTranslationHelper
	{
		public static void InitializeGameWithFps(double fps)
		{
            // FPS is ignored on Android
		}

		public static List<PlatformRelayObject> GetEvents()
		{
            return GlView1.GetEvents();
		}
		
        private static int RoundUpToPowerOfTwo(int value)
        {
            if ((value & (value - 1)) == 0) return value;
            int output = value;
            while (value > 0)
            {
                value >>= 1;
                output |= value;
            }
            return output + 1;
        }

		public static object ImagetteFlushToNativeBitmap(Imagette imagette)
		{
            int width = RoundUpToPowerOfTwo(imagette.width);
            int height = RoundUpToPowerOfTwo(imagette.height);

            Android.Graphics.Bitmap output = Android.Graphics.Bitmap.CreateBitmap(
                width,
                height,
                Android.Graphics.Bitmap.Config.Argb4444);

            Android.Graphics.Canvas canvas = new Android.Graphics.Canvas(output);
            int length = imagette.nativeBitmaps.Count;
            for (int i = 0; i < length; ++i)
            {
                int x = imagette.xs[i];
                int y = imagette.ys[i];
                canvas.DrawBitmap((Android.Graphics.Bitmap)imagette.nativeBitmaps[i], x, y, null);
            }

            return output;
		}

		public static void InitializeScreen(int width, int height, int screenWidth, int screenHeight)
		{
			// As there is no "window", the screen width and height arguments are ignored.
			// The view is simply stretched to the logical width and height.
			InitializeScreen(width, height);
		}

		public static void InitializeScreen(int width, int height)
		{
			GlView1.LogicalWidth = width;
			GlView1.LogicalHeight = height;
			GlView1.LogicalViewInitialized = true;
		}

		public static void SetTitle(string title)
		{
			// Nothing to do here.
		}

		public static void DownloadImage(string key, string url)
		{
			throw new NotImplementedException("Download Image");
		}

		public static string IoFileReadText(string path, bool isUserData)
		{
			throw new NotImplementedException("IoFileReadText");
		}

		public static int IoFileWriteText(string path, string content, bool isUserData)
		{
			throw new NotImplementedException("IoFileWriteText");
		}

		public static string[] IoFilesInDirectory(string path, bool isUserData)
		{
			throw new NotImplementedException("IoFilesInDirectory");
		}

		public static bool IoPathExists(string path, bool directoriesOnly, bool checkCase, bool isUserData)
		{
			throw new NotImplementedException("IoPathExists");
		}

		public static int IoDeleteFile(string path, bool isUserData)
		{
			throw new NotImplementedException("IoDeleteFile");
		}

		public static int IoCreateDirectory(string path)
		{
			throw new NotImplementedException("IoCreateDirectory");
		}

		public static string IoCurrentDirectory()
		{
			throw new NotImplementedException("IoCurrentDirectory");
		}

		public static int IoDeleteDirectory(string path, bool isRecursive)
		{
			throw new NotImplementedException("IoDeleteDirectory");
		}

		public static void MakeHttpRequestWithHandler(
			HttpRequest request,
			string method,
			string url,
			string body,
			string userAgent,
			string contentType,
			string contentLength, 
			List<string> filteredHeaderNames, 
			List<string> filteredHeaderValues)
		{
			throw new NotImplementedException("MakeHttpRequestWithHandler");
		}
	}
}
