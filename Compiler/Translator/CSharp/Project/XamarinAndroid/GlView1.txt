using System;
using OpenTK;
using OpenTK.Graphics.ES11;
using OpenTK.Platform.Android;
using Android.Content;
using Android.Util;

namespace %%%PROJECT_ID%%%
{
    public class GlView1 : AndroidGameView
    {
        public GlView1(Context context)
			: base(context)
		{
			LogicalWidth = 200;
			LogicalHeight = 350;
            LogicalViewInitialized = false;
		}
        
		public static int LogicalWidth { get; set; }
		public static int LogicalHeight { get; set; }
        public static bool LogicalViewInitialized { get; set; }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            Run();
        }
        
        protected override void CreateFrameBuffer()
        {
            try
            {
                Log.Verbose("GLCube", "Loading with default settings");
                
                base.CreateFrameBuffer();
                return;
            }
            catch (Exception ex)
            {
                Log.Verbose("GLCube", "{0}", ex);
            }
            
            try
            {
                Log.Verbose("GLCube", "Loading with custom Android settings (low mode)");
                GraphicsMode = new AndroidGraphicsMode(0, 0, 0, 0, 0, false);
                
                base.CreateFrameBuffer();
                return;
            }
            catch (Exception ex)
            {
                Log.Verbose("GLCube", "{0}", ex);
            }
            throw new Exception("Can't load egl, aborting");
        }
        
        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);
			
            if (!CrayonWrapper.v_runTick())
            {
				// TODO: force exit app here.
            }

            GL.ClearColor(0f, 0f, 0f, 1f);
            GL.Clear((uint)All.ColorBufferBit);

            GL.MatrixMode(All.Projection);
            GL.LoadIdentity();
            GL.Ortho(0f, GlView1.LogicalWidth * 1f, GlView1.LogicalHeight * 1f, 0f, -1.0f, 1.0f);

            GL.MatrixMode(All.Modelview);
            
			if (LogicalViewInitialized)
			{
				// Interpret the user render events here.

			}
            
            SwapBuffers();
        }
    }
}
