<documentation>
	<library name="HTTP">
		<description>
			Drawing and image-loading functions designed to be used with the Game library.
		</description>
		<namespace name="HTTP">
			<enum name="Method">
				<description>
					Enum for common HTTP method types, used by <link see="http.httprequest.setmethod">setMethod</link>.
				</description>
				<value>GET</value>
				<value>POST</value>
				<value>PUT</value>
				<value>DELETE</value>
			</enum>
			<enum name="State">
				<description>
					Possible states of an <link see="http.httprequest">HttpRequest</link> as returned 
					by its <link see="http.httprequest.getstate">getState</link> method. 
					This indicates the progress of the HTTP request in terms of its lifecycle, 
					not the actual status returned by the server which is returned by 
					<link see="http.httprequest.getstatuscode">getstatuscode</link> as a 
					<link see="http.status">Status</link> enum value. 
				</description>
				<value>NOT_SENT</value>
				<value>SENT</value>
				<value>DONE</value>
				<value name="ERROR">
					<description>
						When the state is ERROR, call the <link see="http.httprequest.geterror">HttpRequest.getError()</link> method for a specific error message.
					</description>
				</value>
			</enum>
			<enum name="Status">
				<description>
					Various HTTP status codes, both official and unofficial-but-generally-accepted.
					The numeric value of these enums match their <link url="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">official value</link>.
				</description>
				
				<value>CONTINUE</value>
				<value>SWITCHING_PROTOCOLS</value>
				<value>PROCESSING</value>
				<value>CHECKPOINT</value>
				<value>OK</value>
				<value>CREATED</value>
				<value>ACCEPTED</value>
				<value>NON_AUTHORITATIVE_INFORMATION</value>
				<value>NO_CONTENT</value>
				<value>RESET_CONTENT</value>
				<value>PARTIAL_CONTENT</value>
				<value>MULTI_STATUS</value>
				<value>ALREADY_REPORTED</value>
				<value>IM_USED</value>
				<value>MULTIPLE_CHOICES</value>
				<value>MOVED_PERMANENTLY</value>
				<value>MOVED_TEMPORARILY</value>
				<value>SEE_OTHER</value>
				<value>NOT_MODIFIED</value>
				<value>USE_PROXY</value>
				<value>SWITCH_PROXY</value>
				<value>TEMPORARY_REDIRECT</value>
				<value>PERMANENT_REDIRECT</value>
				
				<value>BAD_REQUEST</value>
				<value>UNAUTHORIZED</value>
				<value>PAYMENT_REQUIRED</value>
				<value>FORBIDDEN</value>
				<value>NOT_FOUND</value>
				<value>METHOD_NOT_ALLOWED</value>
				<value>NOT_ACCEPTABLE</value>
				<value>PROXY_AUTHENTICATION_REQUIRED</value>
				<value>REQUEST_TIMEOUT</value>
				<value>CONFLICT</value>
				<value>GONE</value>
				<value>LENGTH_REQUIRED</value>
				<value>PRECONDITION_FAILED</value>
				<value>PAYLOAD_TOO_LARGE</value>
				<value>URI_TOO_LONG</value>
				<value>UNSUPPORTED_MEDIA_TYPE</value>
				<value>RANGE_NOT_SATISFIABLE</value>
				<value>EXPECTATION_FAILED</value>
				<value>IM_A_TEAPOT</value>
				<value>ENHANCE_YOUR_CALM</value>
				<value>MISDIRECTED_REQUEST</value>
				<value>UNPROCESSABLE_ENTITY</value>
				<value>LOCKED</value>
				<value>FAILED_DEPENDENCY</value>
				<value>UPGRADE_REQUIRED</value>
				<value>PRECONDITION_REQUIRED</value>
				<value>TOO_MANY_REQUESTS</value>
				<value>REQQUEST_HEADER_FIELDS_TOO_LARGE</value>
				<value>LOGIN_TIMEOUT</value>
				<value>RETRY_WITH</value>
				<value>BLOCKED_BY_PARENTAL_CONTROLS</value>
				<value>UNAVAILABLE_FOR_LEGAL_REASONS</value>
				
				<value>INTERNAL_SERVER_ERROR</value>
				<value>NOT_IMPLEMENTED</value>
				<value>BAD_GATEWAY</value>
				<value>SERVICE_UNAVAILABLE</value>
				<value>GATEWAY_TIMEOUT</value>
				<value>HTTP_VERSION_NOT_SUPPORTED</value>
				<value>VARIANT_ALSO_NEGOTIATES</value>
				<value>INSUFFICIENT_STORAGE</value>
				<value>LOOP_DETECTED</value>
				<value>BANDWIDTH_LIMIT_EXCEEDED</value>
				<value>NOT_EXTENDED</value>
				<value>NETWORK_AUTHENTICATION_REQIURED</value>
			</enum>
			<class name="HttpRequest">
				<function constructor="true">
					<arg name="url" type="string">
						URL for the request.
					</arg>
					<description>
						Creates a new HTTP request object, but does not send it (see the <link see="http.httprequest.sendasync">sendAsync</link> method).
					</description>
				</function>
				<function name="getError">
					<description>
						Returns a string error message when the HTTP request failed to get sent or did not get a server response.
					</description>
				</function>
				<function name="getState">
					<description>
						Returns a <link see="http.state">State</link> enum value for the current state of the request. Note that this is independent of the server-returned status code which is returned by <link see="http.httprequest.getstatuscode">getStatusCode()</link> as a <link see="http.httprequest.status">Status</link> enum value.
					</description>
				</function>
				<function name="getStatusCode">
					<description>
						Returns an integer value with the server-returned status code for the request. 
						This cannot be called until the HttpRequest has completed, which can be checked with the <link see="http.httprequest.getstate">getState()</link> method. 
						The <link see="http.status">Status</link> enum contains common return values that can be used for better readability.
					</description>
				</function>
				<function name="getStatus">
					<description>
						Returns a string description of the server-returned status for the request such as '404 Not Found'. This cannot be called until the HttpRequest has completed, which can be checked with the <link see="http.httprequest.getstate">getState()</link> method. 
						For just the integer portion of the status code, see <link see="http.httprequest.getstatuscode">getStatusCode</link>.
					</description>
				</function>
				<function name="getBody">
					<description>
						Returns the response body of the http request. 
						This cannot be called until the HttpRequest has completed, which can be checked with the <link see="http.httprequest.getstate">getState()</link> method. 
						If the response does not have a body, null is returned.
					</description>
				</function>
				<function name="getResponseHeaderValue">
					<arg name="name" type="string">
						An HTTP header name (case-insensitive)
					</arg>
					<description>
						Returns the value of the HTTP response header with the given name.
						If there are multiple headers with the same name (even if the case is different), the first is returned.
						This cannot be called until the HttpRequest has completed, which can be checked with the <link see="http.httprequest.getstate">getState()</link> method. 
					</description>
				</function>
				<function name="getResponseHeaderValues">
					<arg name="name" type="string">
						An HTTP header name (case-insensitive)
					</arg>
					<description>
						Returns a list of all HTTP header values for the given header name.
						If there are none, returns an empty list.
						This cannot be called until the HttpRequest has completed, which can be checked with the <link see="http.httprequest.getstate">getState()</link> method. 
						</description>
				</function>
				<function name="getResponseHeaderNames">
					<description>
						Returns a list of all the HTTP header names in the response.
						This cannot be called until the HttpRequest has completed, which can be checked with the <link see="http.httprequest.getstate">getState()</link> method. 
					</description>
				</function>
				<function name="setMethod">
					<arg name="method" type="Method (enum value) or a string">
						Method to use for the HTTP request. Can either be a raw string to use, or can be a
						value from the <link see="http.method">Method</link> enum.
					</arg>
					<description>
						Sets the method for the HTTP request. 
						Returns the <link see="http.httprequest">HttpRequest</link> instance so that the
						builder pattern can be used.
					</description>
				</function>
				<function name="setHeader">
					<arg name="name" type="string">
						Name of the HTTP header.
					</arg>
					<arg name="value" type="any non-null value">
						Value of the HTTP header. If the value is not a string, it will be converted using the default conversion.
					</arg>
					<description>
						Sets an HTTP header for the request. Does not overwrite previous values for this header.
					</description>
				</function>
				<function name="setBody">
					<arg name="value" type="any non-null value">
						Body to send in the HTTP request. 
						If this is not a string, it will be converted into one using the default conversion.
						Note that a body cannot be sent with requests using the GET method 
						and will result in an error.
						Content-Length will automatically be set if not manually specified with <link see="http.httprequest.setheader">setHeader</link>.
					</arg>
				</function>
				<function name="sendAsync">
					<description>
						Sends the HTTP request.
						For the state of the request, the <link see="http.httprequest.getstate">getState</link> method must be called.
						Once the request is marked as DONE, then other getters may be used, such as <link see="http.httprequest.getstatuscode">getStatusCode()</link> and
						<link see="http.httprequest.getbody">getBody()</link>.
						For legacy reasons, the request's state is only polled/updated internally by the VM when
						<link see="game.gamewindow.clocktick">GameWindow.clockTick()</link> is invoked. 
						Future versions will likely not have this limitation.
					</description>
				</function>
			</class>
		</namespace>
	</library>
</documentation>