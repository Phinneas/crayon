
function generateDocumentationHtml(docRoot) {
	output = [
		'<html>',
		'<head>',
		'<title>Documentation</title>',
		'</head>',
		'<body>'];

	if (docRoot is Library) {
		generateLibraryHtml(docRoot, output);
	} else {
		throw new Exception("Unrecognized doc root type.");
	}
	output.add('</body></html>');
	return output.join('');
}

function generateLibraryHtml(library, buffer) {
	buffer.add('<h1>' + htmlSpecialChars(library.name) + '</h1>');

	library.namespaces.sort(sortByNameKeyFunction);

	for (ns : getSortedList(library.namespaces)) {
		buffer.add('<h2>' + htmlSpecialChars(ns.name) + ' namespace</h2>');
		if (ns.constants.length > 0) {
			for (cnst : getSortedList(ns.constants)) {
				buffer.add('<h3>Constant: ' + htmlSpecialChars(cnst.name) + '</h3>');
			}
		}

		if (ns.enums.length > 0) {
			for (en : getSortedList(ns.enums)) {
				buffer.add('<h3>Enum: ' + htmlSpecialChars(en.name) + '</h3>');
			}
		}

		if (ns.functions.length > 0) {
			for (fn : getSortedList(ns.functions)) {
				buffer.add('<h3>Function: ' + htmlSpecialChars(fn.name) + '</h3>');
			}
		}
	}
}

function htmlSpecialChars(str) {
	return str.replace('&', '&amp;').replace('<', '&lt;');
}

function getSortedList(list) {
	list.sort(sortByNameKeyFunction);
	return list;
}

function sortByNameKeyFunction(thing) {
	return thing.name.lower();
}
