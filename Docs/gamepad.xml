<documentation>
	<library name="Gamepad">
		<description>
			Library for interacting with connected Gamepads.
		</description>
		<namespace name="Gamepad">
			<class name="GamepadManager">
				<description>
					Utility class for various gamepad configuration functions.
				</description>
				<function static="true" name="isGamepadSupported">
					<description>
						Returns true if the gamepad is currently supported in this program. 
						For C# and Python, this returns true. 
						For JavaScript, this value is determined based on browser capability.
						False for all other platforms.
					</description>
				</function>
				<function static="true" name="refreshDevices">
					<description>
						Initializes or updates the list of all available devices.
						This must be called before gamepads can be queried.
						Note that in some platforms refreshDevices must be called if new devices are connected.
						For example, in most browsers that support gamepad, JavaScript will treat devices as non-present
						until they are physically interacted with while the browser window has focus, at which point they
						are shown as connected to code. refreshDevices must be called again once this happens. 
						It is safe (non-detrimental to performance) to poll this function every frame, even for platforms that don't require it.
						See also <link see="gamepad.gamepadmanager.platformrequiresrefresh">platformRequiresRefresh</link>().
					</description>
				</function>
				<function static="true" name="platformRequiresRefresh">
					<description>
						Returns true if the current platform requires <link see="gamepad.gamepadmanager.refreshdevices">refreshDevices</link> to be 
						called periodically to check for new devices that may have been connected or made available. Even if 
						false is returned, <link see="gamepad.gamepadmanager.refreshdevices">refreshDevices</link>() must still
						be invoked at least once to detect/initialize devices.
					</description>
				</function>
				<function static="true" name="getDeviceCount">
					<description>
						Returns the number of devices currently connected. <link see="gamepad.gamepadmanager.refreshdevices">refreshDevices</link>() must
						be invoked before this function is invoked.
					</description>
				</function>
				<function static="true" name="getDeviceByIndex">
					<arg name="index" type="integer">
						Index of the gamepad. Must be between 0 (inclusive) and deviceCount (exclusive).
					</arg>
					<description>
						Returns a <link see="gamepad.gamepaddevice">GamepadDevice</link> instance that corresponds to the nth device.
						The order of the devices is mandated by the platform and may not be consistent between platforms.
					</description>
				</function>
				<function static="true" name="getDeviceById">
					<arg name="id" type="integer or string">
						ID value that has potentially been assigned to a device, e.g. 'player1'.
					</arg>
					<description>
						Returns a <link see="gamepad.gamepaddevice">GamepadDevice</link> instance that has been assigned this ID value.
					</description>
				</function>
				<function static="true" name="saveSettingsToUserData">
					<description>
						Saves all user-defined gamepad configuration to a file in UserData in a platform-specific file.
						This file can be read from by calling <link see="gamepad.gamepadmanager.restoresettingsfromuserdata">restoreSettingsFromUserData</link>().
					</description>
				</function>
				<function static="true" name="restoreSettingsFromUserData">
					<arg name="listOfPlayerIds" type="string or integer list">
						A list of string or integer player ID's to attempt to assign to known gamepads.
					</arg>
					<description>
						Takes the list of known hardware and user-defined button configurations saved in a previous session with 
						<link see="gamepad.gamepadmanager.savesettingstouserdata">saveSettingsToUserData</link>() and assigns
						those configuration settings to as many gamepads as possible in the given list and assigns them the given
						player ID in that list.
						Returns the number of gamepads that have successfully been configured and assigned player ID's.
						If the settings file doesn't exist yet, this function does nothing and returns 0.
					</description>
				</function>
			</class>
			<class name="GamepadDevice">
				<description>
					Represents a physical gamepad device. Instances can be obtained from 
					<link see="gamepad.gamepadmanager.getdevicebyindex">GamepadManager.getDeviceByIndex</link>(index) or
					<link see="gamepad.gamepadmanager.getdevicebyid">GamepadManager.getDeviceById</link>(id).
					
					Each gamepad device has a stack of configurations which are mappings of user-defined 
					button ID's to hardware sources on this device. These mappings determine the types of
					Gamepad events that will appear in the event queue.
					
					This stack can be pushed and popped from. Only the top configuration in the stack is used. 
					Popping from the user configuration stack is useful for if a you want to create a Gamepad
					configuration menu where you prompt a user to press a particular button to an action and the
					user wishes to cancel during mid-configuration.
					
				</description>
				<function name="getId">
					<description>
						Returns the ID value for this gamepad device. See <link see="gamepad.gamepaddevice.setid">setId</link>().
					</description>
				</function>
				<function name="setId">
					<arg name="id" type="integer or string">
						An arbitrary user-defined value that can be used to uniquely identify this gamepad.
					</arg>
					<description>
						Sets an ID on this gamepad. Can be used to identify events generated from this device.
					</description>
				</function>
				<function name="getName">
					<description>
						Returns the platform-reported name of this device. This value is an arbitrary string that may vary from platform to platform.
					</description>
				</function>
				<function name="getButtonCount">
					<description>
						Returns the number of buttons on this device.
					</description>
				</function>
				<function name="getAxisCount">
					<description>
						Returns the number of axes on this device.
					</description>
				</function>
				<function name="getButtonState">
					<arg name="index" type="integer">
						Index of the button.
					</arg>
					<description>
						Returns the state of the given button as a boolean (true for currently pushed).
						The index of the button must be between 0 (inclusive) and the total number of buttons (exclusive) 
						as reported by <link see="gamepad.gamepaddevice.getbuttoncount">getButtonCount</link>().
					</description>
				</function>
				<function name="getAxisState">
					<arg name="index" type="integer">
						Index of the axis.
					</arg>
					<description>
						Returns the state of the given axis as a float between 0.0 and 1.0.
						The index of the axis must be between 0 (inclusive) and the total number of axes (exclusive) 
						as reported by <link see="gamepad.gamepaddevice.getaxiscount">getAxisCount</link>().
					</description>
				</function>
				<function name="pushEmptyConfig">
					<description>
						Pushes a new config mapping to the top of the config stack for this device.
					</description>
				</function>
				<function name="pushAutoConfig">
					<description>
						Pushes a new config mapping to the top of the config containing a mapping of the best guess for mapping 
						the canonical buttons to this device. See <link see="gamepad.buttonid">ButtonId</link>.
					</description>
				</function>
				<function name="popConfig">
					<description>
						Pops the top config mapping from the config stack for this device. 
						Causes an error it the stack is empty.
					</description>
				</function>
				<function name="flattenConfig">
					<description>
						Removes all entries from the config stack aside from the one currently on top.
					</description>
				</function>
				<function name="clearBinding">
					<arg name="buttonId" type="string or integer">
						Button ID to remove from the mapping.
					</arg>
					<description>
						Removes a button ID from the current configuration mapping.
					</description>
				</function>
				<function name="clearBindings">
					<description>
						Empties the configuration mapping for the top entry in the stack. Results in an error if there is no configuration mapping.
					</description>
				</function>
				<function name="bindDigitalButton">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindDigitalAxis">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindDigitalAxis2dX">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindDigitalAxis2dY">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogButton">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogAxis">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogAxis2dX">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogAxis2dY">
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the currently pressed item on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				
				<function name="bindDigitalButtonByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindDigitalAxisByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindDigitalAxis2dXByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindDigitalAxis2dYByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogButtonByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogAxisByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogAxis2dXByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
				<function name="bindAnalogAxis2dYByHardwareId">
					<arg name="hardwareId" type="string">A magic opaque string returned by the hardwareFingerprint property of <link see="gamepad.gamepadrawhardwareevent">GamepadRawHardwareEvents</link>.</arg>
					<arg name="buttonId" type="string or integer">Button ID to assign</arg>
					<arg name="isPositive" type="boolean">True if the current mashable should be bound as the positive axis of this button ID. Otherwise it will be the negative direction.</arg>
					<description>
						Binds the given hardware source on this gamepad to the button ID. Returns true on success. 
						Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
					</description>
				</function>
			</class>
			<class name="GamepadEvent">
				<description>
					Subclass of <link see="game.gameevent">Game.GameEvent</link> where 
					the .type field is set to <link see="enum:game.eventtype.gamepad">EventType.GAMEPAD</link>. 
					These instances are returned by the <link see="game.gamewindow.pumpEvents">GameWindow.pumpEvents</link>() method.
					
					Read more about <link see="article.gamepadbindings">gamepad bindings</link>.
				</description>
				<field name="device" type="gamepad.gamepaddevice">Device that generated this event.</field>
				<field name="deviceId" type="integer or string">ID of the device that generated this event.</field>
				<field name="value" type="mixed">Value of this event. For logical buttons, this is a boolean. For 1D axes, these are numbers. For 2D axes, this is not set and the x and y fields are used instead. Digital bindings will return integers, and analog bindings will return floats.</field>
				<field name="x" type="number">Value of the X component of a 2D axis. Unset (null) if not a 2D axis event.</field>
				<field name="y" type="number">Value of the Y component of a 2D axis. Unset (null) if not a 2D axis event.</field>
			</class>
			<class name="GamepadRawHardwareEvent">
				<description>
					Subclass of <link see="game.gameevent">Game.GameEvent</link> where
					the .type field is set to <link see="enum:game.eventtype.gamepad_hardware">EventType.GAMEPAD_HARDWARE</link>.
					These instances are returned by the <link see="game.gamewindow.pumpEvents">GameWindow.pumpEvents</link>() method and
					are always returned as long as a device is loaded, regardless of whether any buttons are bound.
				</description>
				<field name="device" type="gamepad.gamepaddevice">Device that generated this event.</field>
				<field name="deviceId" type="integer or string">ID of the device that generated this event.</field>
				<field name="mashyType" type="enum:gamepad.gamepadmashytype">Type of mashable (axis or button).</field>
				<field name="mashyIndex" type="int">Index of mashable that can be used with <link see="gamepad.gamepaddevice.getbuttonvalue">getButtonValue</link> or <link see="gamepad.gamepaddevice.getaxisvalue">getAxisValue</link>.</field>
				<field name="value" type="boolean or float">Value of the mashable. Booleans for buttons, floats for axes.</field>
				<field name="isSignificant" type="boolean">True if this is not potentially caused by hardware deadzone noise. True for button presses and axis activity that has a magnitude greater than .5</field>
				<field name="hardwareFingerprint" type="string">Magic string value that identifies this hardware source. Should be treated as an opaque string value that is used as the input of bind by hardwareId functions.</field>
			</class>
			
			<enum name="GamepadMashyType">
				<description>
					Types of mashable input.
				</description>
				
				<value>BUTTON</value>
				<value>AXIS</value>
			</enum>
			
			<enum name="ButtonId">
				<description>
					Canonical controller input labels. These enum values are duplicated with different names but identical values in other enums. For code readability.
					See <link see="gamepad.xboxbuttonid">XBoxButtonId</link>, <link see="gamepad.psbuttonid">PsButtonId</link>, and <link see="gamepad.snesbuttonid">SnesButtonId</link>.
					These values are used with <link see="gamepad.gamepaddevice.pushautoconfig">GamepadDevice.pushAutoConfig</link>, but the other listed enums can be used for comparisons
					as they have the same corresponding numerical values.
				</description>
				
				<value>BUTTON_LEFT</value>
				<value>BUTTON_RIGHT</value>
				<value>BUTTON_UP</value>
				<value>BUTTON_DOWN</value>
				<value>DPAD_LEFT</value>
				<value>DPAD_RIGHT</value>
				<value>DPAD_UP</value>
				<value>DPAD_DOWN</value>
				<value>AXIS1</value>
				<value>AXIS2</value>
				<value>LEFT_TRIGGER</value>
				<value>RIGHT_TRIGGER</value>
				<value>LEFT_BUMPER</value>
				<value>RIGHT_BUMPER</value>
				<value>START</value>
				<value>BACK</value>
			</enum>
			
			<enum name="XBoxButtonId">
				<description>
					XBox controller input labels. This enum has the same numerical value as <link see="gamepad.buttonid">ButtonId</link>.
				</description>
				
				<value>X</value>
				<value>B</value>
				<value>Y</value>
				<value>A</value>
				<value>DPAD_LEFT</value>
				<value>DPAD_RIGHT</value>
				<value>DPAD_UP</value>
				<value>DPAD_DOWN</value>
				<value>AXIS1</value>
				<value>AXIS2</value>
				<value>LEFT_TRIGGER</value>
				<value>RIGHT_TRIGGER</value>
				<value>LEFT_BUMPER</value>
				<value>RIGHT_BUMPER</value>
				<value>START</value>
				<value>BACK</value>
			</enum>
			
			<enum name="PsButtonId">
				<description>
					PlayStation controller input labels. This enum has the same numerical value as <link see="gamepad.buttonid">ButtonId</link>.
				</description>
				
				<value>Square</value>
				<value>Circle</value>
				<value>Triangle</value>
				<value>X</value>
				<value>DPAD_LEFT</value>
				<value>DPAD_RIGHT</value>
				<value>DPAD_UP</value>
				<value>DPAD_DOWN</value>
				<value>AXIS1</value>
				<value>AXIS2</value>
				<value>LEFT_BUMPER2</value>
				<value>RIGHT_BUMPER2</value>
				<value>LEFT_BUMPER1</value>
				<value>RIGHT_BUMPER1</value>
				<value>START</value>
				<value>SELECT</value>
			</enum>
			
			<enum name="SnesButtonId">
				<description>
					SNES controller input labels. This enum has the same numerical value as <link see="gamepad.buttonid">ButtonId</link>.
				</description>
				
				<value>Y</value>
				<value>A</value>
				<value>X</value>
				<value>B</value>
				<value>LEFT</value>
				<value>RIGHT</value>
				<value>UP</value>
				<value>DOWN</value>
				<value>L</value>
				<value>R</value>
				<value>START</value>
				<value>SELECT</value>
			</enum>
			
		</namespace>
	</library>
</documentation>