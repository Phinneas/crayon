<article>
	<versions>
		<version>v0.2.0</version>
	</versions>

	<title>Introduction to Crayon for Intermediate Programmers</title>

	<author>blake</author>
	
	<p>This tutorial is geared towards programmers who already know at least one or two other programming languages. 
	It will avoid explaining conceptual fundamentals such as strings, if statements, while loops, etc. and instead
	focus on porting your existing knowledge of these language-independent subjects to Crayon. On the other hand, 
	if the middle of the previous sentence looked like it had wildly incorrect grammar, you may want to start with
	the <link url="/tutorials/beginners">Beginner's Tutorial</link> instead.</p>
	
	<warning>
		Red is a scary color. Crayon adheres to many common constructs in other programming languages. When 
		Crayon breaks with tradition and does something unexpected, it is indicated in one of these scary
		red warning boxes so you don't accidentally skim over it.
	</warning>
	
	<p>Crayon is a programming language that targets multiple platforms. The output of the compiler is the 
	source code of the virtual machine coupled with the compiled byte code of your program.</p>
	
	<p>If you have not <link url="/download">downloaded</link> Crayon and <link url="download/installation">set up
	your environment</link>, please do so now.</p>
	
	<h1>Creating a Hello World Project</h1>
	
	<p>Create a new directory caled HelloWorld for your project somewhere. Create two subdirectories called
	'source' and 'output' in here.</p>

	<p>At the core of each Crayon project is a build definition file, which is composed of relatively simple
	XML. This file defines the various platforms you want to target and other options that you can configure
	for these platforms.</p>

	<p>There is a wonderful universe of options and configurations that I could ramble about for a long time.
	But for the sake of actually getting something working, copy and paste this mostly one-size-fits-all 
	build definition into your HelloWorld.build file:</p>
	
	<code syntax="xml">
		<build>
		  <projectname>HelloWorld</projectname>
		  <source>source/</source>
		  <output>output/%TARGET_NAME%</output>

		  <!-- Targets -->
		  <target name="javascript">
			<platform>game-javascript</platform>
		  </target>

		  <target name="java">
			<platform>game-java-awt</platform>
		  </target>

		  <target name="python">
			<platform>game-python-pygame</platform>
		  </target>

		  <target name="csharp">
			<platform>game-csharp-opentk</platform>
		  </target>
		</build>
	</code>
	
	<p>When you compile, you will invoke crayon.exe from the command line and pass it a path to a .build
	file and a -target flag followed by one of the target names. Like this:</p>
	
	<code>
	C:\Stuff\HelloWorld> crayon HelloWorld.build -target python
	</code>
	
	<p>The source code is compiled from the files in the directory defined by the value of the &lt;source&gt;
	element and the output goes into the directory defined by the vaule of the &lt;output&gt; element. The
	four platforms available are listed in the build definition above.</p>
	
	<p>But of course in order for this to work, you will first need some actual source code.</p>
	
	<p>In the source folder, create a file called main.cry (the name of the file isn't terribly important,
	as long as it ends in a .cry file extension) and paste the following code:</p>
	
	<code syntax="crayon" highlight="print">
	function main() {
		print("Hello, World!");
	}
	</code>

	<p>Run the compilation command for the platform you wish to use. Note that the output of Crayon is actually
	the source code of a program in the platform you choose, not an executable that is necessarily ready to run,
	so in order to run it you may need some pre-requisite libraries or frameworks. Use the chart below to figure
	out which platform is most convenient for you to run.</p>
	
</article>