/*
	Sorts a list of primitives. (keyList)
	If the parallel list is not null, apply all swaps in the key list to the parallel list as well.

	intOutParam[0] -> error code:
		0 -> no error
		1 -> invalid sort keys

*/
function @type('int') lib_core_sort_lists(
	@type('List<Value>') keyList,
	@type('List<Value>') parallelList, // nullable
	@type('Array<int>') intOutParam) {
	
	$_array_set(intOutParam, 0, 0);
	@type('int') length = $_list_length(keyList);
	if (length < 2) return 0;

	@type('int') i = 0;
	@type('Value') item = $_list_get(keyList, 0);
	@type('bool') isString = Value$item.type == Types.STRING;
	@type('Array<string>') stringKeys = null;
	@type('Array<double>') numKeys = null;
	if (isString) {
		stringKeys = $_new_array('string', length);
	} else {
		numKeys = $_new_array('double', length);
	}
	for (i = $_list_length(keyList) - 1; i >= 0; i -= 1) {
		item = $_list_get(keyList, i);
		switch (Value$item.type) {
			case Types.INTEGER:
				if (isString) {
					$_array_set(intOutParam, 0, 1);
					return 0;
				}
				$_array_set(numKeys, i, $_cast('double', $_cast('int', Value$item.internalValue)));
				break;
			case Types.FLOAT:
				if (isString) {
					$_array_set(intOutParam, 0, 1);
					return 0;
				}
				$_array_set(numKeys, i, $_cast('double', Value$item.internalValue));
				break;
			case Types.STRING:
				if (!isString) {
					$_array_set(intOutParam, 0, 1);
					return 0;
				}
				$_array_set(stringKeys, i, $_cast('string', Value$item.internalValue));
				break;
			default:
				$_array_set(intOutParam, 0, 1);
				return 0;
		}
	}

	lib_core_qsort_helper(stringKeys, numKeys, parallelList, isString, 0, length - 1);

	return 0;
}

function @type('int') lib_core_qsort_helper(
	@type('Array<string>') keyStringList,
	@type('Array<double>') keyNumList,
	@type('List<Value>') parallelList,
	@type('bool') isString,
	@type('int') startIndex,
	@type('int') endIndex) {

	if (endIndex - startIndex <= 0) return 0;
	if (endIndex - startIndex == 1) {
		if (lib_core_sort_helper_is_rev_order(keyStringList, keyNumList, isString, startIndex, endIndex)) {
			lib_core_sort_helper_swap(keyStringList, keyNumList, parallelList, isString, startIndex, endIndex);
		}
		return 0;
	}

	@type('int') mid = (endIndex + startIndex) >> 1;
	lib_core_sort_helper_swap(keyStringList, keyNumList, parallelList, isString, mid, startIndex);

	@type('int') upperPointer = endIndex + 1; // starting index of items larger than pivot
	@type('int') lowerPointer = startIndex + 1; // index of just after the items less than pivot

	while (upperPointer > lowerPointer) {
		if (lib_core_sort_helper_is_rev_order(keyStringList, keyNumList, isString, startIndex, lowerPointer)) {
			lowerPointer += 1;
		} else {
			upperPointer -= 1;
			lib_core_sort_helper_swap(keyStringList, keyNumList, parallelList, isString, lowerPointer, upperPointer);
		}
	}

	@type('int') midIndex = lowerPointer - 1;

	lib_core_sort_helper_swap(keyStringList, keyNumList, parallelList, isString, midIndex, startIndex);
	lib_core_qsort_helper(keyStringList, keyNumList, parallelList, isString, startIndex, midIndex - 1);
	lib_core_qsort_helper(keyStringList, keyNumList, parallelList, isString, midIndex + 1, endIndex);

	return 0;
}

function @type('bool') lib_core_sort_helper_is_rev_order(
	@type('Array<string>') keyStringList,
	@type('Array<double>') keyNumList,
	@type('bool') isString,
	@type('int') indexLeft,
	@type('int') indexRight) {
		
	if (isString) {
		if ($_string_compare($_array_get(keyStringList, indexLeft), $_array_get(keyStringList, indexRight)) > 0) {
			return true;
		}
		return false;
	}

	return $_array_get(keyNumList, indexLeft) > $_array_get(keyNumList, indexRight);
}

function @type('int') lib_core_sort_helper_swap(
	@type('Array<string>') keyStringList,
	@type('Array<double>') keyNumList,
	@type('List<Value>') values,
	@type('bool') isString,
	@type('int') index1,
	@type('int') index2) {
	
	if (index1 == index2) return 0;

	if (values != null) {
		@type('Value') t = $_list_get(values, index1);
		$_list_set(values, index1, $_list_get(values, index2));
		$_list_set(values, index2, t);
	}

	if (isString) {
		@type('string') s = $_array_get(keyStringList, index1);
		$_array_set(keyStringList, index1, $_array_get(keyStringList, index2));
		$_array_set(keyStringList, index2, s);
	} else {
		@type('double') n = $_array_get(keyNumList, index1);
		$_array_set(keyNumList, index1, $_array_get(keyNumList, index2));
		$_array_set(keyNumList, index2, n);
	}
	return 0;
}
