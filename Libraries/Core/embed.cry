namespace Core {
	const CRAYON_VERSION = "0.2.0";

	function assert(condition, message = null) {
		return $$lib_core_assert(condition, message);
	}

	function chr(value) {
		return $$lib_core_chr(value);
	}

	function currentTime() {
		return $$lib_core_current_time();
	}

	function ord(value) {
		return $$lib_core_ord(value);
	}

	function parseFloat(value) {
		return $$lib_core_parse_float(value);
	}

	function parseInt(value) {
		return $$lib_core_parse_int(value);
	}

	function print(value) {
		return $$lib_core_print(value);
	}

	function typeof(value) {
		return $$lib_core_typeof(value);
	}

	function isString(value) {
		return Core.typeof(value) == Core.Type.STRING;
	}

	function isNumber(value) {
		return Core.typeof(value) == Core.Type.INTEGER || Core.typeof(value) == Core.Type.FLOAT;
	}

	enum Type {
		NULL = 0,
		BOOLEAN = 1,
		INTEGER = 2,
		FLOAT = 3,
		STRING = 4,
		LIST = 5,
		DICTIONARY = 6,
		OBJECT = 7,
		FUNCTION = 8,
	}

	function _LIB_CORE_list_sort_by_key(fp, list) {
		if (list.length > 1) {
			k = [];
			for (t : list) {
				k.add(fp(t));
			}
			$$lib_core_sort_list(list, k);
		}
	}

	function _LIB_CORE_list_map(fp, list) {
		output = [];
		for (t : list) {
			output.add(fp(t));
		}
		return output;
	}

	function _LIB_CORE_list_filter(fp, list) {
		output = [];
		for (t : list) {
			b = fp(t);
			if ($$lib_core_typeof(b) != Core.Type.BOOLEAN) {
				$$lib_core_assert(false, "User function returned a non-boolean value.");
			}
			if (b) { 
				output.add(t);
			}
		}
		return output;
	}
}
