/*
	arg1: request object
	arg2: boolean: true if is asynchronous request
	arg3: string: method
	arg4: string: URL
	arg5: list of strings: alternating header names and values.
	arg6: one of the following...
		object with nativeData[0] of a byte array
		a simple string
		null
	arg7: an integer
		0 -> response should be text
		1 -> response should be a byte array
*/

import inline "FrameworkFunctions/7_arg.cry";

objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
objArray1 = $_new_array('object', 3);
ObjectInstance$objInstance1.nativeData = objArray1;
$_array_set(objArray1, 2, false);

string1 = $_cast('string', Value$arg3.internalValue); // method
string2 = $_cast('string', Value$arg4.internalValue); // url
stringList1 = $_new_list('string'); // headers (alternating names and values)
list1 = $_cast('List<Value>', Value$arg5.internalValue);
for (i = 0; i < $_list_length(list1); i += 1) {
	value = $_list_get(list1, i);
	$_list_push(stringList1, $_cast('string', Value$value.internalValue));
}
object1 = Value$arg6.internalValue;
int1 = 0; // body is not defined.
if (Value$arg6.type == Types.STRING) {
	int1 = 1; // body is a string.
} else if (Value$arg6.type == Types.INSTANCE) {
	objInstance1 = $_cast('ObjectInstance', object1);
	object1 = $_array_get(ObjectInstance$objInstance1.nativeData, 0); // body is an array of bytes.
	int1 = 2;
} else {
	object1 = null;
}
bool1 = $_cast('int', Value$arg7.internalValue) == 1;

if ($_cast('bool', Value$arg2.internalValue)) {
	// asynchronous request
	$_lib_http_sendRequestAsynchronous(objArray1, string1, string2, stringList1, int1, object1, bool1);
} else {
	// synchronous request
	if ($_lib_http_sendRequestSynchronous(objArray1, string1, string2, stringList1, int1, object1, bool1, ExecutionContext$ec.id)) {
		// If synchronous HTTP requests are not allowed, suspend the interpreter and restart the interpreter when execution completes.
		prepareToSuspend(ec, stack, valueStackSize, pc);
		return suspendInterpreter();
	}
}
