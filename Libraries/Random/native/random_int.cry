/*
	There are two usage patterns:
	
	BOTH start and end specified:
		arg 1: start
		arg 2: end

	OR only end specified:
		arg 1: end
		arg 2: null
*/
import inline "FrameworkFunctions/2_arg.cry";

if (Value$arg2.type == Types.NULL) {
	bool1 = true;
	if (Value$arg1.type == Types.INTEGER) {
		int1 = $_cast('int', Value$arg1.internalValue);
		if (int1 > 0) {
			// TODO: add a $_random_int(max) translated framework function.
			output = buildInteger($_int($_force_parens($_random_float() * int1)));
			bool1 = false;
		}
	}

	if (bool1) {
		return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "randomInt(max) requires a positive integer argument.");
	}
} else {
	if (Value$arg1.type != Types.INTEGER || Value$arg2.type != Types.INTEGER) {
		return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "randomInt(start, end) requires integer arguments.");
	} else {
		int1 = $_cast('int', Value$arg1.internalValue);
		int2 = $_cast('int', Value$arg2.internalValue);
		if (int2 <= int1) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "randomInt: first argument must be less than the second.");
		} else if (int2 == int1 + 1) { // silly, but possible
			output = buildInteger(int1);
		} else {
			output = buildInteger($_int($_force_parens($_random_float() * (int2 - int1))) + int1);
		}
	}
}
