@import("FrameworkFunctions/1_arg.cry");
value = valueStack[valueStackSize];
objInstance1 = ((ObjectInstance) arg1.internalValue);
objArray1 = objInstance1.nativeData;
intArray1 = ((Array<int>) objArray1[0]);
len = ((int) objArray1[1]) - 16;
int1 = intArray1[(len + 1)];
int2 = intArray1[(len + 2)];
int3 = intArray1[(len + 3)];
int4 = intArray1[(len + 4)];
int5 = intArray1[(len + 5)];
float1 = (0.0 + int4) - int2;
float2 = (0.0 + int3) - int1;
float3 = Core.FloatDivision(float1, float2);
float1 = Core.FloatDivision(int5, 2.0);
if (float1 < 0.5) {
	float1 = 1;
}
float2 = Core.FloatDivision(float1, (Math.Pow(((float3 * float3) + 1), 0.5)));
float1 = -float2 * float3;
i = Core.Int(((int1 + float1) + 0.5));
j = Core.Int(((int1 - float1) + 0.5));
if (i == j) {
	j += 1;
}
intArray1[(len + 1)] = i;
intArray1[(len + 3)] = j;
i = Core.Int(((int2 + float2) + 0.5));
j = Core.Int(((int2 - float2) + 0.5));
if (i == j) {
	j += 1;
}
intArray1[(len + 2)] = i;
intArray1[(len + 4)] = j;
i = Core.Int(((int3 - float1) + 0.5));
j = Core.Int(((int3 + float1) + 0.5));
if (i == j) {
	i += 1;
}
intArray1[(len + 5)] = i;
intArray1[(len + 7)] = j;
i = Core.Int(((int4 - float2) + 0.5));
j = Core.Int(((int4 + float2) + 0.5));
if (i == j) {
	i += 1;
}
intArray1[(len + 6)] = i;
intArray1[(len + 8)] = j;
output = VALUE_NULL;
