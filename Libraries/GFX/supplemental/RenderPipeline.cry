
function @type('bool') glFillScreen(
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') width,
	@type('int') height) {
	glResetDrawBuffer();
	glDrawRectangle(0, 0, width, height, red, green, blue, 255);
	return true;
}

function @type('bool') glDrawRectangle(
	@type('int') left,
	@type('int') top,
	@type('int') width,
	@type('int') height,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_RECTANGLE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, left);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, top);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

function @type('bool') glDrawEllipse(
	@type('int') left,
	@type('int') top,
	@type('int') width,
	@type('int') height,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (width <= 2 || height <= 2)
		return glDrawRectangle(left, top, width, height, red, green, blue, alpha);

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_ELLIPSE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, left);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, top);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

function @type('bool') glDrawTriangle(
	@type('int') x1,
	@type('int') y1,
	@type('int') x2,
	@type('int') y2,
	@type('int') x3,
	@type('int') y3,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_TRIANGLE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, x1);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, y1);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, x2);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, y2);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, x3);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, y3);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 10, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

function @type('bool') glDrawLine(
	@type('int') startX,
	@type('int') startY,
	@type('int') endX,
	@type('int') endY,
	@type('int') lineWidth,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	// perfectly horizontal and vertical should use the rectangle logic.
	if (startX == endX || startY == endY)
	{
		@type('int') left = startX;
		@type('int') top = startY;
		@type('int') width = 0;
		@type('int') height = 0;

		if (startX == endX)
		{
			left = startX - $_unsafe_integer_division(lineWidth, 2);
			width = lineWidth;
			if (startY < endY) {
				height = endY - startY + 1;
			} else {
				height = startY - endY + 1;
				top = endY;
			}
		}
		else
		{
			top = startY - $_unsafe_integer_division(lineWidth, 2);
			height = lineWidth;
			if (startX < endX) {
				width = endX - startX + 1;
			} else {
				width = startX - endX + 1;
				left = endX;
			}
		}

		return glDrawRectangle(left, top, width, height, red, green, blue, alpha);
	}
	
	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_LINE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, startX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, startY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, endX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, endY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, lineWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, alpha & 255);
	GL_VIRTUAL_SIZE += 16;
	return true;
}

// Draws an image on the screen at the coordinates.
function glDrawImageSimple(@type('Image') image, @type('int') x, @type('int') y) {
	// TODO: just do this inline or possibly create a separate render action.
	glDrawImageAdvanced(image, x, y, Image$image.width, Image$image.height, 0, 0, Image$image.width, Image$image.height, 255);
}

function glDrawImageWithAlpha(@type('Image') image, @type('int') x, @type('int') y, @type('int') alpha) {
	glDrawImageAdvanced(image, x, y, Image$image.width, Image$image.height, 0, 0, Image$image.width, Image$image.height, alpha);
}

// Draws a part of an image on a part of the screen. Stretching and cropping.
function glDrawImageAdvanced(
	@type('Image') image,
	@type('int') targetX,
	@type('int') targetY,
	@type('int') targetWidth,
	@type('int') targetHeight,
	@type('int') sourceX,
	@type('int') sourceY,
	@type('int') sourceWidth,
	@type('int') sourceHeight,
	@type('int') alpha) {
	
	if (alpha == 0) return null;
	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	if (GL_IMAGES_VIRTUAL_SIZE == GL_IMAGES_REAL_SIZE) glIncreaseImageListCapacity();
	
	/*
	@type('CompositeImage') compositeResource = Image$image.compositeResource;
	if (!CompositeImage$compositeResource.loaded) {
		CompositeImage$compositeResource.glTextureId = $_gl_load_texture(gl, CompositeImage$compositeResource.nativeBitmap);
		CompositeImage$compositeResource.loaded = true;
	}
	*/

	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_IMAGE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, targetX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, targetY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, targetWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, targetHeight);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, sourceX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, sourceY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, sourceWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, sourceHeight);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, alpha);
	GL_VIRTUAL_SIZE += 16;

	$_array_set(GL_IMAGES, GL_IMAGES_VIRTUAL_SIZE, image);
	GL_IMAGES_VIRTUAL_SIZE += 1;
}

function glDrawImageRotated(
	@type('Image') image,
	@type('int') targetCenterX,
	@type('int') targetCenterY,
	@type('double') angle) {
	
	@type('int') width = Image$image.width;
	@type('int') height = Image$image.height;

	if (angle == 0) {
		glDrawImageSimple(
			image, 
			targetCenterX - $_unsafe_integer_division(width, 2),
			targetCenterY - $_unsafe_integer_division(height, 2));
	} else {
		angle = angle % (2 * 3.14159265358979323);
		if (angle < 0) angle += (2 * 3.14159265358979323);
		
		if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
		if (GL_IMAGES_VIRTUAL_SIZE == GL_IMAGES_REAL_SIZE) glIncreaseImageListCapacity();

		$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_IMAGE_ROTATED);
		$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, targetCenterX);
		$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, targetCenterY);
		$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
		$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
		$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, $_int(angle * 1000000));
		
		GL_VIRTUAL_SIZE += 16;

		$_array_set(GL_IMAGES, GL_IMAGES_VIRTUAL_SIZE, image);
		GL_IMAGES_VIRTUAL_SIZE += 1;
	}
}

// size must ALWAYS be divisible by 16
function glIncreaseDataCapacity() {
	@type('int') capacity = GL_REAL_SIZE * 2;
	if (capacity == 0) capacity = 16 * 50;
	@type('Array<int>') newGlData = $_new_array('int', capacity);
	for (@type('int') i = 0; i < GL_VIRTUAL_SIZE; i += 1) {
		$_array_set(newGlData, i, $_array_get(GL_DATA, i));
	}
	GL_DATA = newGlData;
	GL_REAL_SIZE = $_array_length(GL_DATA);
}

// no size restrictions.
function glIncreaseImageListCapacity() {
	@type('int') capacity = GL_IMAGES_REAL_SIZE * 2;
	if (capacity == 0) capacity = 50;
	@type('Array<Image>') newGlImages = $_new_array('Image', capacity);
	for (@type('int') i = 0; i < GL_IMAGES_VIRTUAL_SIZE; i += 1) {
		$_array_set(newGlImages, i, $_array_get(GL_IMAGES, i));
	}
	GL_IMAGES = newGlImages;
	GL_IMAGES_REAL_SIZE = $_array_length(GL_IMAGES);
}

function glResetDrawBuffer() {
	GL_VIRTUAL_SIZE = 0;
	GL_IMAGES_VIRTUAL_SIZE = 0;
}
