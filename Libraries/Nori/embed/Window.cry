namespace Nori {
	
	class Window {
		
		field result = null;
		field uiBox = null;
		field content = null;
		field title = 'Window';
		field width = 500;
		field height = 300;
		
		constructor() {
			this.uiBox = new UiBox(this, this.width, this.height, false);
			$$$('allocNativeData', this, 1);
			$$lib_nori_windowInstantiate(this, this.uiBox);
		}
		
		function onLoad() {
			// override me.
			print("==== Window onLoad ====");
		}
		
		function setContent(element) {
			this.content = element;
			this.uiBox.setChild(element);
			return this;
		}
		
		function setTitle(title) {
			this.title = title;
			return this;
		}
		
		function setWidth(width) {
			this.width = width;
			return this;
		}
		
		function setHeight(height) {
			this.height = height;
			return this;
		}
		
		function show() {
			return this._showImpl(false);
		}
		
		function showBlocking() {
			return this._showImpl(true);
		}
		
		function _showImpl(isBlocking) {
			if (isBlocking) {
				onOpenExecId = null;
				onCloseExecId = $$$('execId');
			} else {
				onOpenExecId = $$$('execId');
				onCloseExecId = null;
			}
			
			$$lib_nori_windowShow(
				this, this.title, isBlocking, $$$('execId'), this.render, this.onLoad, this.width, this.height);
			
			if (isBlocking) {
				return this.result;
			}
		}
		
		function render() {
			this.uiBox.width = this.width;
			this.uiBox.height = this.height;
			this.uiBox.renderCalculateSize(true, this.width, true, Alignment.STRETCH);
			this.uiBox.renderCalculateSize(false, this.height, true, Alignment.STRETCH);
			this.uiBox.render(null);
		}
	}
}