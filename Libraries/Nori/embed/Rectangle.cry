namespace Nori {

	enum FillStyle {
		SOLID,
		GRADIENT,
	}
	
	class Rectangle : Element {
		static field DEFAULT_COLOR = [128, 128, 128, 255];
		
		field color; // null or [r, g, b]
		field gradient; // null or [r, g, b, r, g, b, theta] // TODO: positioning params
		field fillType = Nori.FillStyle.SOLID;
		
		constructor() : base() {
			
		}
		
		function setColor(r, g, b, a = 255) {
			if (this.color == null) this.color = [r, g, b, a];
			else {
				// TODO: this is probably going to be a painfully common pattern. So instead,
				// you should create a native $_lib_nori_fastAssign(list, offset, var1, var2, ...)
				this.color[0] = r;
				this.color[1] = g;
				this.color[2] = b;
				this.color[3] = a;
			}
			return this;
		}
		
		function _internalRenderCreate(uiRoot, currentBounds) {
			if (this.fillType == Nori.FillStyle.SOLID) {
				$$lib_nori_rectangleSolidRenderCreate(uiRoot, this._handlers, this, currentBounds, this.color ?? Rectangle.DEFAULT_COLOR);
			} else {
				Core.assert(false); // Not implemented
			}
		}
		
		function _internalRenderUpdate(currentBounds) {
			if (this.fillType == Nori.FillStyle.SOLID) {
				$$lib_nori_rectangleSolidRenderUpdate(this, currentBounds, this.color ?? Rectangle.DEFAULT_COLOR);
			} else {
				Core.assert(false); // Not implemented
			}
		}
	}
}
