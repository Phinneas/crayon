import Math;
import Game;

namespace Audio {
	/*
		nativeData[0] -> native music object, if necessary. Some platforms just do everything by path.
	*/
	class Music {
		field _isResource;
		field _path;

		// TODO: private constructors
		constructor() {
			// Initialized by factory methods.
		}

		static function loadFromResource(path) {
			music = new Music();
			music._isResource = true;
			music._path = path + '';
			if (!$$lib_audio_music_load_from_resource(music, music._path)) {
				Core.assert(false, "Music resource not found.");
			}
			return music;
		}
	}

	enum _MusicState {
		NOT_PLAYING = 1,
		TRANSITION_IN = 2,
		PLAYING_NORMAL = 3,
		PLAYING_LOOPING = 4,
		TRANSITION_OUT = 5,
	}

	class MusicPlayer {

		static field _musicInstance = new Music();
		
		static field currentState = _MusicState.NOT_PLAYING;
		static field currentMusic = null;
		static field currentIsLoop = false;
		static field currentInTransitionDuration = null;
		static field currentOutTransitionDuration = null;
		static field currentTransitionStart = null;

		static field enqueuedMusic = null;
		static field enqueuedIsLoop = null;
		static field enqueuedInTransitionDuration = null;

		static field mainVolume = 1.0; // overall volume
		static field compositeVolume = 1.0; // volume with fades and song normalization applied
		static field fadeVolume = 1.0;

		static constructor() {
			Game.GameWindow._frameEndHandlers.add(MusicPlayer._gameWindowFrameEndHandler);
		}

		static function _gameWindowFrameEndHandler() {
			switch (MusicPlayer.currentState) {
				case _MusicState.NOT_PLAYING:
					// nothing to do
					break;

				case _MusicState.TRANSITION_IN:
					dt = Core.currentTime() - MusicPlayer.currentTransitionStart;
					if (dt >= MusicPlayer.currentInTransitionDuration) {
						MusicPlayer.fadeVolume = 1.0;
						MusicPlayer.currentState = MusicPlayer.currentIsLoop ? _MusicState.PLAYING_LOOPING : _MusicState.PLAYING_NORMAL;
					} else {
						MusicPlayer.fadeVolume = 1.0 * dt / MusicPlayer.currentInTransitionDuration;
					}
					break;

				case _MusicState.PLAYING_NORMAL:
					if (!$$lib_audio_music_is_playing()) {
						// Rather than just mark this as no longer playing, pretend that it's a transition out that's already done.
						// This will either mark it as NOT_PLAYING or will automatically pop the queue and start the next song.
						// Otherwise enqueuing a song during a non-looping song and if the song just happens to end while it's still fading
						// the next song won't get triggered and that will make users cry.
						MusicPlayer.currentState = _MusicState.TRANSITION_OUT;
						MusicPlayer.currentTransitionStart = 0;
						MusicPlayer.currentOutTransitionDuration = 1.0;
					}
					break;

				case _MusicState.PLAYING_LOOPING:
					// carry on.
					break;

				case _MusicState.TRANSITION_OUT:
					dt = Core.currentTime() - MusicPlayer.currentTransitionStart;
					if (dt >= MusicPlayer.currentOutTransitionDuration) {
						MusicPlayer.fadeVolume = 0.0;
						// music fade complete. 
						if (MusicPlayer.enqueuedMusic == null) {
							MusicPlayer.currentState = _MusicState.NOT_PLAYING;
							MusicPlayer.currentMusic = null;
							$$lib_audio_music_stop();
						} else {
							MusicPlayer.currentMusic = MusicPlayer.enqueuedMusic;
							MusicPlayer.currentIsLoop = MusicPlayer.enqueuedIsLoop;
							if (MusicPlayer.enqueuedInTransitionDuration == null) {
								$$lib_audio_music_play(
									MusicPlayer.currentMusic,
									MusicPlayer.currentMusic._isResource,
									MusicPlayer.currentMusic._path,
									MusicPlayer.mainVolume,
									MusicPlayer.currentIsLoop);
								MusicPlayer.currentState = MusicPlayer.currentIsLoop
									? _MusicState.PLAYING_LOOPING
									: _MusicState.PLAYING_NORMAL;
								MusicPlayer.currentInTransitionDuration = null;
								MusicPlayer.fadeVolume = 1.0;
							} else {
								$$lib_audio_music_play(
									MusicPlayer.currentMusic,
									MusicPlayer.currentMusic._isResource,
									MusicPlayer.currentMusic._path,
									0.0,
									MusicPlayer.currentIsLoop);
								MusicPlayer.currentState = _MusicState.TRANSITION_IN;
								MusicPlayer.currentInTransitionDuration = MusicPlayer.enqueuedInTransitionDuration;
								MusicPlayer.currentTransitionStart = Core.currentTime();
							}
							MusicPlayer.enqueuedMusic = null;
						}
					}
					break;
			}

			v = Math.ensureRange(MusicPlayer.fadeVolume * MusicPlayer.mainVolume, 0.0, 1.0);
			diff = Math.abs(v - MusicPlayer.compositeVolume);
			if (diff > 0.00001) {
				MusicPlayer.compositeVolume = v;
				$$lib_audio_music_set_volume(v);
			}
		}

		static function getCurrentMusic() {
			return MusicPlayer.currentMusic;
		}

		static function fadeTransition(music, loop = true, outTransition = 2.0, inTransition = 2.0) {
			MusicPlayer._transition(music, loop, outTransition, inTransition);
		}

		static function fadeOutTransition(music, loop = true, outTransition = 2.0) {
			MusicPlayer._transition(music, loop, outTransition, null);
		}

		static function playMusic(music, loop = true) {
			MusicPlayer._transition(music, loop, null, null);
		}

		static function fadeOut(duration = 2.0) {
			MusicPlayer._transition(null, false, duration, null);
		}

		static function playMusicWithFadeIn(music, loop = true, duration = 2.0) {
			MusicPlayer._transition(music, loop, null, duration);
		}

		/*
			music can be null to indicate a top
			outTransition can be null to indicate instant end
			inTransition can be null to indicate instant start
		*/
		static function _transition(music, loop, outTransitionDuration, inTransitionDuration) {
			if (Core.typeof(music) != Core.typeof(MusicPlayer._musicInstance)) {
				Core.assert(false, "First argument must be an Audio.Music instance.");
			}
			if (inTransitionDuration == null || inTransitionDuration < 0.01) inTransitionDuration = null;
			if (outTransitionDuration == null || outTransitionDuration < 0.01) outTransitionDuration = null;
			if (music == MusicPlayer.currentMusic) return;
			loop = loop == true;

			if (outTransitionDuration == null) {
				// instantaneous transitions
				if (music == null) {
					$$lib_audio_music_stop();
					MusicPlayer.currentMusic = null;
					MusicPlayer.currentState = _MusicState.NOT_PLAYING;
				} else {
					MusicPlayer.currentMusic = music;
					MusicPlayer.currentIsLoop = loop;
					if (inTransitionDuration == null) {
						MusicPlayer.currentState = loop ? _MusicState.PLAYING_LOOPING : _MusicState.PLAYING_NORMAL;
						MusicPlayer.fadeVolume = 1.0;
						$$lib_audio_music_play(music, music._isResource, music._path, MusicPlayer.mainVolume, loop);
					} else {
						MusicPlayer.currentState = _MusicState.TRANSITION_IN;
						MusicPlayer.fadeVolume = 0.0;
						$$lib_audio_music_play(music, music._isResource, music._path, 0.0, loop);
					}
				}
			} else {
				// fade out. save transition information for the end-frame worker.
				MusicPlayer.currentState = _MusicState.TRANSITION_OUT;
				MusicPlayer.currentTransitionStart = Core.currentTime();
				MusicPlayer.currentOutTransitionDuration = outTransitionDuration;
				MusicPlayer.enqueuedMusic = music;
				MusicPlayer.enqueuedInTransitionDuration = inTransitionDuration;
				MusicPlayer.enqueuedIsLoop = loop;
			}
		}
	}

	enum SoundPlayState {
		PLAYING = 1,
		PAUSED = 2,
		STOPPED = 3,
	}

	/*
		nativeData[0] -> mixer channel identifier or whatever is necessary to identify this particular playing instance.
	*/
	class Sound {
		field _soundResource;
		field _id;

		field _isStopped = false; // set to stopped to indicate the sound should never be resumable again.
		field _volume;
		field _pan;

		// constructs and fires event
		constructor(resource, volume, pan) {
			this._soundResource = resource;
			this._id = resource._id;
			this._volume = volume;
			this._pan = pan;

			// This call will set the native data.
			// Also, it'll just mark the sound as stopped if there's an error. 
			// TODO: maybe a better indicator of an error playing the sound.
			this._isStopped = $$lib_audio_sfx_play(this, resource, volume, pan) == 1;
		}

		function getState() {
			// ensures that it also returns STOPPED if the channel is playing a different sound.
			t = $$lib_audio_sfx_get_state(this, this._soundResource, this._id);
			if (t == SoundPlayState.STOPPED) this._isStopped = true;
			return t;
		}

		function resume() {
			if (this.getState() == SoundPlayState.PAUSED) {
				$$lib_audio_sfx_resume(this, this._soundResource, this._volume, this._pan);
			}
		}

		function stop() {
			t = this.getState();
			if (t != SoundPlayState.STOPPED) {
				$$lib_audio_sfx_stop(this, this._soundResource, this._id, t, true);
			}
		}

		function pause() {
			if (this.getState() == SoundPlayState.PLAYING) {
				$$lib_audio_sfx_stop(this, this._soundResource, this._id, SoundPlayState.PLAYING, false);
			}
		}
		
		function getResource() {
			return this._soundResource;
		}

		/*
			-1.0 -> left speaker only
			1.0 -> right speaker only
			0.0 -> balanced
		*/
		function setPan(value) {
			this._pan = Math.ensureRange(value, -1.0, 1.0) + 0.0;
			$$lib_audio_sfx_set_pan(this, this._soundResource, this._pan);
		}

		function getPan() { return this._pan; }
		
		/*
			ratio from 0.0 to 1.0
		*/
		function setVolume(ratio) {
			this._volume = Math.ensureRange(ratio, 0.0, 1.0) + 0.0;
			$$lib_audio_sfx_set_volume(this, this._soundResource, this._volume);
		}

		function getVolume() { return this._volume; }
	}

	/*
		native_data[0] -> actual native instance of the sound.
	*/
	class SoundResource {

		static field _cache = {};

		static field _resID = 0;

		field _v = 1.0; // volume
		field _p; // path
		field _e; // is embedded resource
		field _c = []; // playing channels
		
		field _id; // unique ID for this particular resource

		// TODO: private constructors
		constructor() {
			this._id = SoundResource._resID++;
		}

		function setVolume(r) {
			this._v = Math.ensureRange(r, 0.0, 1.0) + 0.0;
			$$lib_audio_sfx_set_volume(this, this._v);
		}

		function getVolume() {
			return this._v;
		}

		static function loadFromFile(path) {
			s = new Sound();
			$$lib_audio_sfx_load_from_file(s, path + '');
			s._p = path;
			s._e = false;
			return s;
		}

		static function loadFromResource(path, useCache = true) {
			s = null;
			path += ''; // ensure string
			if (useCache) {
				s = SoundResource._cache.get(path);
			}
			if (s == null) {
				s = new SoundResource();
				$$lib_audio_sfx_load_from_resource(s, path);
				s._p = path;
				s._e = true;
				if (useCache) {
					SoundResource._cache[path] = s;
				}
			}
			return s;
		}

		function play(volume = 1.0, pan = 0.0) {
			c = new Sound(this, volume, pan);
			this._c.add(c);
			return c;
		}
	}
}
