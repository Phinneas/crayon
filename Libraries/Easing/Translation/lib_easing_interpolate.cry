// $$lib_easing_interpolate(this, start, end, current, duration, integers, 1)

import inline "InterpreterSource/FrameworkFunctions/7_arg.cry";

objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
objArray1 = ObjectInstance$objInstance1.nativeData;
len = $_array_length(objArray1);

if (Value$arg4.type == Types.INTEGER) {
	float1 = $_cast('int', Value$arg4.internalValue);
} else if (Value$arg4.type == Types.FLOAT) {
	float1 = $_cast('double', Value$arg4.internalValue);
} else {
	return killExecution(stack, pc, "current value was not a number.");
}

if (Value$arg5.type == Types.INTEGER) {
	float2 = $_cast('int', Value$arg5.internalValue);
} else if (Value$arg5.type == Types.FLOAT) {
	float2 = $_cast('double', Value$arg5.internalValue);
} else {
	return killExecution(stack, pc, "duration value was not a number.");
}

if (float2 == 0) {
	// Not sure whether throwing an error is better here or just fail silently to 0%.
	float1 = 0;
} else {
	if (float2 < 0) {
		float2 = -float2;
		float1 = -float1;
	}

	if (float1 >= float2) {
		float1 = 1;
	} else if (float1 < 0) {
		float1 = 0;
	} else {
		float1 = $_unsafe_float_division(float1, float2);
	}
}
// float1 is now the 0-to-1 progress value. current float2 value is no longer needed

// TODO: actually apply the easing function once the rest of this is tested.

if (Value$arg2.type == Types.INTEGER) {
	float2 = $_cast('int', Value$arg2.internalValue);
} else if (Value$arg2.type == Types.FLOAT) {
	float2 = $_cast('double', Value$arg2.internalValue);
} else {
	return killExecution(stack, pc, "Start position must be a number.");
}
if (Value$arg3.type == Types.INTEGER) {
	float3 = $_cast('int', Value$arg3.internalValue);
} else if (Value$arg3.type == Types.FLOAT) {
	float3 = $_cast('double', Value$arg3.internalValue);
} else {
	return killExecution(stack, pc, "End position must be a number.");
}

// interpolate
float1 = (float1 * float3 + (1 - float1) * float2);

// integer output desired?
if (Value$arg6.type == Types.BOOLEAN && $_cast('bool', Value$arg6.internalValue)) {
	output = buildInteger($_int(float1 + .5));
} else {
	output = buildFloat(float1);
}
