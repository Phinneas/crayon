// TODO: it's probably time to split this file up into a structs folder with a different file for each individual struct.

struct Code {
	@type('Array<int>') ops,
	@type('Array<Array<int>>') args,
	@type('Array<string>') stringArgs
}

// Dictionaries in Crayon can only have 3 types of keys: integers, strings, and objects
// Dictionaries can hold any of these, but only hold one type at a time
struct DictImpl {
	@type('Dictionary<int, Value>') keyIntLookup,
	@type('Dictionary<int, Value>') valueIntLookup,
	@type('Dictionary<string, Value>') keyStringLookup,
	@type('Dictionary<string, Value>') valueStringLookup,
	@type('int') size,
	@type('int') keyType
}

// TODO: This needs to be more extensible and cleaned up.
// Things like image sheet stuff should still be applied to ProgramData, but needs to be done so in a way
// that doesn't clutter up the schema and can be leveraged by other custom libraries. For example, creating
// some sort of Dictionary keyed off of a library namespace string that can point to an arbitrary type and
// having a model for defining structs in the libraries.
struct ProgramData {
	@type('Dictionary<int, ExecutionContext>') executionContexts,
	@type('int') lastExecutionContextId,
	@type('Array<int>') ops,
	@type('Array<Array<int>>') args,
	@type('Array<string>') stringArgs,
	@type('Array<string>') identifiers,
	@type('List<string>') identifiersBuilder,
	@type('Dictionary<string, int>') invIdentifiers,
	@type('Array<Value>') literalTable,
	@type('List<Value>') literalTableBuilder,
	@type('Array<List<Token>>') tokenData,
	@type('int') userCodeStart,
	@type('Array<string>') sourceCode,
	@type('List<string>') sourceCodeBuilder,
	@type('Array<Dictionary<int, int>>') integerSwitchLookups,
	@type('List<Dictionary<int, int>>') integerSwitchLookupsBuilder,
	@type('Array<Dictionary<string, int>>') stringSwitchLookups,
	@type('List<Dictionary<string, int>>') stringSwitchLookupsBuilder,
	@type('int') instanceCounter,
	@type('bool') initializationComplete,

	@type('Array<ClassInfo>') classTable,
	@type('Array<FunctionInfo>') functionTable,
	@type('List<int>') classStaticInitializationStack,
	@type('Array<int>') globalNameIdToPrimitiveMethodName,
	@type('Array<Value>') funcArgs,

	@type('int') lengthId,
	@type('Array<int>') primitiveMethodFunctionIdFallbackLookup,
	@type('ResourceDB') resourceDatabase,
}

struct ExecutionContext {
	@type('int') id,
	@type('StackFrame') stackTop,
	@type('int') currentValueStackSize,
	@type('int') valueStackCapacity,
	@type('Array<Value>') valueStack,
	@type('Array<Value>') localsStack,
	@type('Array<int>') localsStackSet,
	@type('int') localsStackSetToken,
	@type('int') executionCounter,
}

struct StackFrame {
	@type('int') pc,
	@type('int') localsStackSetToken, // if localsStackSet[i + offset] has this value, then that means localsStack[i + offset] is valid.
	@type('int') localsStackOffset, // offset local ID by this to get the value in localsStack
	@type('int') localsStackOffsetEnd, // ending offset of the locals stack
	@type('StackFrame') previous,
	@type('bool') returnValueUsed,
	@type('Value') objectContext,
	@type('int') valueStackPopSize, // size of the value stack when this frame is popped.
	@type('int') markClassAsInitialized,
}

struct InterpreterResult {
	@type('int') status,
	@type('string') errorMessage,
}

struct Token {
	@type('int') lineIndex,
	@type('int') colIndex,
	@type('int') fileId
}

struct Value {
	@type('int') type,
	@type('object') internalValue
}

struct SystemMethod {
	@type('Value') context,
	@type('int') id
}

/*
	When a class is about to be referenced, static initialization state is checked.
	If it is 0, then check to see if the base class chain has any 0's and initialize the last class
	up the chain. Class intializations work like function invocations where the return PC points to the
	exact same spot where the intialization was triggered, so that the code continues to run normally
	despite the interrupt of the static constructor.

	When a class is initialized, a new Array<Value> is allocated with length of .memberCount.
	Then a loop runs through all member ID/indexes and checks the fieldInitializationCommand.
	If it's a literal, it copies the value directly from the fieldInitializationLiteral in the class metadata here.
	If it's a LIST or DICT, then it creates an empty instance of those.
	LIST or DICT is only used if the field is initialized to an _empty_ List or Dictionary. Otherwise NULL is used.
	If it's a SYSTEM_NULL the value of null (not a Value, but an actual native null) is applied to that slot. This
	indicates that the member is actually referencing a method. This is lazily populated at runtime if a function
	reference without invocation is ever made.

	At this point in CALL_FUNCTION, local arguments are pushed onto the locals stack and the constructor's stack
	frame is pushed with the PC pointing at the proper optional argument. But before execution resumes, more stack
	frames are pushed...

	In the byte code, the CLASS_INITIALIZER is followed by some code that has all the field default values individually
	followed by ASSIGN_FIELD (for anything that isn't a literal, empty list, or empty dictionary) followed by RETURN.
	After the constructor's args have been pushed to the local stack and the constructor's stack frame is initialized,
	the call stack pushes ALL the PC's that appear in fieldInitializerPcs onto the stack in order, which results in
	the root parent last. As these return, they will end up back at the child constructor.

	One of the side effects of this system is all fields (even in base classes) that have literal values will be
	initialized first before anything else happens. After that all other fields and constructors are invoked in the
	traditional order, which is a change in behavior from languages like Java and C#. But if your code explicitly is
	expecting a default null value in a field that is initialized with another literal before your other field that
	is initialized with a function invocation, then you're asking for trouble anyway. The performance of the copying
	from the array of literals has better performance than putting all field initializers in the field initializer
	code chunk.

*/
struct ClassInfo {
	@type('int') id,
	@type('int') nameId,
	@type('int') baseClassId, // or -1 if no base class
	@type('int') staticInitializationState, // 0 - not initialized, 1 - in progress, 2 - done
	@type('Array<Value>') staticFields,
	@type('int') staticConstructorFunctionId,
	@type('int') constructorFunctionId,

	// A list of PC offsets (from this class to its parent root) that should be pushed onto the stack
	// to initialize fields.
	@type('Array<int>') fieldInitializerPcs,

	@type('int') memberCount, // total number of fields and methods, flattened.
	// The following lists contain data on all flattened fields and methods indexed by member ID.
	// These values are replicated in children classes where the child class' members appear at the end of the list.
	@type('Array<int>') functionIds, // function ID or -1
	@type('Array<int>') fieldInitializationCommand, // 0 - USE_LITERAL, 1 - LIST, 2 - DICT, 3 - SYSTEM NULL (reserved for method)
	@type('Array<Value>') fieldInitializationLiteral,

	// TODO: It might actually be good to create two of these, one that's global ID to all member ID's, and another
	// for global ID to assignable member ID's. This would eliminate a couple of CPU cycles and also partially pave
	// the road for private/protected/public modifiers.
	@type('Dictionary<int, int>') globalIdToMemberId,

	// TODO: another thought is to allocate an array for all global ID's to map to member ID's. This would be a lot of
	// space O(class count * number of var names), but not all that ridiculous. Several kilobytes in memory for an average sized
	// codebase.
}

struct FunctionInfo {
	@type('int') id,
	@type('int') nameId,
	@type('int') pc,
	@type('int') minArgs,
	@type('int') maxArgs,
	@type('int') type, // 0 - function, 1 - method, 2 - static method, 3 - constructor, 4 - static constructor
	@type('int') associatedClassId,
	@type('int') localsSize,
	@type('Array<int>') pcOffsetsForOptionalArgs,
}

struct FunctionDefinition {
	@type('int') pc,
	@type('int') maxArgCount,
	@type('string') name,
}

struct ObjectInstance {
	@type('int') classId,
	@type('int') objectId,
	@type('Array<Value>') members,

	// system libraries can attach arbitrary values to objects, which can be operated on more efficiently than values, and
	// are inherently inaccessible by user code.
	@type('Array<object>') nativeData,
}

struct FunctionPointer {
	@type('int') type, // Enum value: FunctionPointerType
	@type('Value') context,
	@type('int') classId,
	@type('int') functionId,
}

struct PlatformRelayObject {
	@type('int') type,
	@type('int') iarg1,
	@type('int') iarg2,
	@type('int') iarg3,
	@type('double') farg1,
	@type('string') sarg1,
}

struct HttpRequest {
	@type('int') statusCode,
	@type('string') status,
	@type('Dictionary<string, Array<string>>') headers,
	@type('string') body,
}

struct ResourceInfo {
	@type('string') userPath,
	@type('string') internalPath,
	@type('bool') isText,
	@type('string') type, // e.g. SND, IMG, IMGSH, etc. Don't convert this to an enum. Want this to be extensible.
	@type('string') manifestParam, // e.g. the image sheet ID, multiple values here must be encoded if extended.
}

struct ResourceDB {
	@type('Dictionary<string, Array<string>>') filesPerDirectory,
	@type('Dictionary<string, ResourceInfo>') fileInfo,
}
