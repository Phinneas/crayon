enum OpCodes {
	ADD_LITERAL,
	ADD_NAME,
	ASSIGN_INDEX,
	ASSIGN_LOCAL,
	ASSIGN_STATIC_FIELD,
	ASSIGN_STEP,
	ASSIGN_THIS_STEP,
	BINARY_OP,
	BOOLEAN_NOT,
	BREAK,
	BUILD_SWITCH_INT,
	BUILD_SWITCH_STRING,
	CALL_FUNCTION,
	CALL_LIB_FUNCTION,
	CALL_LIB_FUNCTION_DYNAMIC,
	CLASS_DEFINITION,
	COMMAND_LINE_ARGS,
	CONTINUE,
	CORE_FUNCTION,
	DEF_ORIGINAL_CODE,
	DEF_DICTIONARY,
	DEF_LIST,
	DEREF_DOT,
	DEREF_INSTANCE_FIELD,
	DEREF_STATIC_FIELD,
	DUPLICATE_STACK_TOP,
	EQUALS,
	ESF_LOOKUP,
	EXCEPTION_HANDLED_TOGGLE,
	FINALIZE_INITIALIZATION,
	FINALLY_END,
	FUNCTION_DEFINITION,
	INDEX,
	IS_COMPARISON,
	ITERATION_STEP,
	JUMP,
	JUMP_IF_EXCEPTION_OF_TYPE,
	JUMP_IF_FALSE,
	JUMP_IF_FALSE_NO_POP,
	JUMP_IF_TRUE,
	JUMP_IF_TRUE_NO_POP,
	LIST_SLICE,
	LITERAL,
	LITERAL_STREAM,
	LOCAL,
	NEGATIVE_SIGN,
	POP,
	POP_IF_NULL_OR_JUMP,
	PUSH_FUNC_REF,
	RETURN,
	STACK_INSERTION_FOR_INCREMENT,
	STACK_SWAP_POP,
	SWITCH_INT,
	SWITCH_STRING,
	THIS,
	THROW,
	TOKEN_DATA,
	USER_CODE_START,
	VALUE_STACK_DEPTH,
	VERIFY_TYPE_IS_ITERABLE,
}

enum BinaryOps {
	ADDITION = 0,
	SUBTRACTION = 1,
	MULTIPLICATION = 2,
	DIVISION = 3,
	MODULO = 4,
	EXPONENT = 5,
	BITWISE_AND = 6,
	BITWISE_OR = 7,
	BITWISE_XOR = 8,
	BIT_SHIFT_LEFT = 9,
	BIT_SHIFT_RIGHT = 10,
	LESS_THAN = 11,
	LESS_THAN_OR_EQUAL = 12,
	GREATER_THAN = 13,
	GREATER_THAN_OR_EQUAL = 14,
}

const int MAX_OP = (BinaryOps.GREATER_THAN_OR_EQUAL + 1);

enum FunctionInvocationType {
	NORMAL_FUNCTION = 1,
	STATIC_METHOD = 2,
	LOCAL_METHOD = 3,
	POINTER_PROVIDED = 4,
	FIELD_INVOCATION = 5,
	CONSTRUCTOR = 6,
	BASE_CONSTRUCTOR = 7,
	STATIC_CONSTRUCTOR = 8,
	PRIMITIVE_METHOD = 9,
}

enum FunctionPointerType {
	FUNCTION = 1,
	METHOD = 2,
	STATIC_METHOD = 3,
	PRIMITIVE_METHOD = 4,
}

enum Types {
	NULL = @ext_integer("TYPE_ID_NULL"),
	BOOLEAN = @ext_integer("TYPE_ID_BOOLEAN"),
	INTEGER = @ext_integer("TYPE_ID_INTEGER"),
	FLOAT = @ext_integer("TYPE_ID_FLOAT"),
	STRING = @ext_integer("TYPE_ID_STRING"),
	LIST = @ext_integer("TYPE_ID_LIST"),
	DICTIONARY = @ext_integer("TYPE_ID_DICTIONARY"),
	INSTANCE = @ext_integer("TYPE_ID_INSTANCE"),
	FUNCTION = @ext_integer("TYPE_ID_FUNCTION"),
	CLASS = @ext_integer("TYPE_ID_CLASS"),
}

const int MAX_TYPE = (Types.CLASS + 1);

enum InterpreterResultStatus {
	FINISHED = 1,
	SUSPENDED = 2,
	FATAL_ERROR = 3,
	SUSPENDED_WITH_LOCK = 4,
	REINVOKE = 5,
}

enum CoreExceptionTypes {
	FATAL = 0,
	GENERIC_EXCEPTION = 1,
	ASSERTION_FAILED = 2,
	DIVISION_BY_ZERO = 3,
	INDEX_OUT_OF_RANGE = 4,
	INVALID_ARGUMENT = 5,
	INVALID_ASSIGNMENT = 6,
	INVALID_INVOCATION = 7,
	INVALID_KEY = 8,
	KEY_NOT_FOUND = 9,
	NULL_REFERENCE = 10,
	UNASSIGNED_VARIABLE = 11,
	UNKNOWN_FIELD = 12,
	UNSUPPORTED_OPERATION = 13,
}

const int INTEGER_POSITIVE_CACHE_SIZE = 1025;

const int INTEGER_NEGATIVE_CACHE_SIZE = 129;

enum PrimitiveMethodName {
	ADD = 1,
	ARG_COUNT_MAX = 2,
	ARG_COUNT_MIN = 3,
	CHOICE = 4,
	CLEAR = 5,
	CLONE = 6,
	CONCAT = 7,
	CONTAINS = 8,
	CREATE_INSTANCE = 9,
	ENDS_WITH = 10,
	FILTER = 11,
	GET = 12,
	GET_NAME = 13,
	INDEX_OF = 14,
	INSERT = 15,
	INVOKE = 16,
	IS_A = 17,
	JOIN = 18,
	KEYS = 19,
	LOWER = 20,
	LTRIM = 21,
	MAP = 22,
	MERGE = 23,
	POP = 24,
	REMOVE = 25,
	REPLACE = 26,
	REVERSE = 27,
	RTRIM = 28,
	SHUFFLE = 29,
	SORT = 30,
	SPLIT = 31,
	STARTS_WITH = 32,
	TRIM = 33,
	UPPER = 34,
	VALUES = 35,
}

enum PostFinallyBehavior {
	NOTHING = 0,
	BREAK = 1,
	CONTINUE = 2,
	RETURN = 3,
}

