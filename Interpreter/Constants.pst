enum OpCodes {
	ADD_LITERAL = 1,
	ADD_NAME = 2,
	ASSIGN_INDEX = 3,
	ASSIGN_LOCAL = 4,
	ASSIGN_STATIC_FIELD = 5,
	ASSIGN_STEP = 6,
	ASSIGN_THIS_STEP = 7,
	BINARY_OP = 8,
	BOOLEAN_NOT = 9,
	BREAK = 10,
	BUILD_SWITCH_INT = 11,
	BUILD_SWITCH_STRING = 12,
	CALL_FUNCTION = 13,
	CALL_LIB_FUNCTION = 14,
	CLASS_DEFINITION = 15,
	COMMAND_LINE_ARGS = 16,
	CONTINUE = 17,
	CORE_FUNCTION = 18,
	DEF_ORIGINAL_CODE = 19,
	DEF_DICTIONARY = 20,
	DEF_LIST = 21,
	DEREF_DOT = 22,
	DEREF_INSTANCE_FIELD = 23,
	DEREF_STATIC_FIELD = 24,
	DUPLICATE_STACK_TOP = 25,
	EQUALS = 26,
	ESF_LOOKUP = 27,
	EXCEPTION_HANDLED_TOGGLE = 28,
	FINALIZE_INITIALIZATION = 29,
	FINALLY_END = 30,
	FUNCTION_DEFINITION = 31,
	INDEX = 32,
	IS_COMPARISON = 33,
	ITERATION_STEP = 34,
	JUMP = 35,
	JUMP_IF_EXCEPTION_OF_TYPE = 36,
	JUMP_IF_FALSE = 37,
	JUMP_IF_FALSE_NO_POP = 38,
	JUMP_IF_TRUE = 39,
	JUMP_IF_TRUE_NO_POP = 40,
	LIST_SLICE = 41,
	LITERAL = 42,
	LITERAL_STREAM = 43,
	LOCAL = 44,
	NEGATIVE_SIGN = 45,
	POP = 46,
	POP_IF_NULL_OR_JUMP = 47,
	PUSH_FUNC_REF = 48,
	RETURN = 49,
	STACK_INSERTION_FOR_INCREMENT = 50,
	STACK_SWAP_POP = 51,
	SWITCH_INT = 52,
	SWITCH_STRING = 53,
	THIS = 54,
	THROW = 55,
	TOKEN_DATA = 56,
	USER_CODE_START = 57,
	VALUE_STACK_DEPTH = 58,
	VERIFY_TYPE_IS_ITERABLE = 59,
}

enum BinaryOps {
	ADDITION = 0,
	SUBTRACTION = 1,
	MULTIPLICATION = 2,
	DIVISION = 3,
	MODULO = 4,
	EXPONENT = 5,
	BITWISE_AND = 6,
	BITWISE_OR = 7,
	BITWISE_XOR = 8,
	BIT_SHIFT_LEFT = 9,
	BIT_SHIFT_RIGHT = 10,
	LESS_THAN = 11,
	LESS_THAN_OR_EQUAL = 12,
	GREATER_THAN = 13,
	GREATER_THAN_OR_EQUAL = 14,
}

const int MAX_OP = (BinaryOps.GREATER_THAN_OR_EQUAL + 1);

enum FunctionInvocationType {
	NORMAL_FUNCTION = 1,
	STATIC_METHOD = 2,
	LOCAL_METHOD = 3,
	POINTER_PROVIDED = 4,
	FIELD_INVOCATION = 5,
	CONSTRUCTOR = 6,
	BASE_CONSTRUCTOR = 7,
	STATIC_CONSTRUCTOR = 8,
	PRIMITIVE_METHOD = 9,
}

enum FunctionPointerType {
	FUNCTION = 1,
	METHOD = 2,
	STATIC_METHOD = 3,
	PRIMITIVE_METHOD = 4,
}

enum Types {
	NULL = @ext_constant("TYPE_ID_NULL"),
	BOOLEAN = @ext_constant("TYPE_ID_BOOLEAN"),
	INTEGER = @ext_constant("TYPE_ID_INTEGER"),
	FLOAT = @ext_constant("TYPE_ID_FLOAT"),
	STRING = @ext_constant("TYPE_ID_STRING"),
	LIST = @ext_constant("TYPE_ID_LIST"),
	DICTIONARY = @ext_constant("TYPE_ID_DICTIONARY"),
	INSTANCE = @ext_constant("TYPE_ID_INSTANCE"),
	FUNCTION = @ext_constant("TYPE_ID_FUNCTION"),
	CLASS = @ext_constant("TYPE_ID_CLASS"),
}

const int MAX_TYPE = (Types.CLASS + 1);

enum InterpreterResultStatus {
	FINISHED = 1,
	SUSPENDED = 2,
	FATAL_ERROR = 3,
	SUSPENDED_WITH_LOCK = 4,
	REINVOKE = 5,
}

enum CoreExceptionTypes {
	FATAL = 0,
	GENERIC_EXCEPTION = 1,
	ASSERTION_FAILED = 2,
	DIVISION_BY_ZERO = 3,
	INDEX_OUT_OF_RANGE = 4,
	INVALID_ARGUMENT = 5,
	INVALID_ASSIGNMENT = 6,
	INVALID_INVOCATION = 7,
	INVALID_KEY = 8,
	KEY_NOT_FOUND = 9,
	NULL_REFERENCE = 10,
	UNASSIGNED_VARIABLE = 11,
	UNKNOWN_FIELD = 12,
	UNSUPPORTED_OPERATION = 13,
}

const int INTEGER_POSITIVE_CACHE_SIZE = 1025;

const int INTEGER_NEGATIVE_CACHE_SIZE = 129;

enum PrimitiveMethodName {
	ADD = 1,
	ARG_COUNT_MAX = 2,
	ARG_COUNT_MIN = 3,
	CHOICE = 4,
	CLEAR = 5,
	CLONE = 6,
	CONCAT = 7,
	CONTAINS = 8,
	CREATE_INSTANCE = 9,
	ENDS_WITH = 10,
	FILTER = 11,
	GET = 12,
	GET_NAME = 13,
	INDEX_OF = 14,
	INSERT = 15,
	INVOKE = 16,
	IS_A = 17,
	JOIN = 18,
	KEYS = 19,
	LOWER = 20,
	LTRIM = 21,
	MAP = 22,
	MERGE = 23,
	POP = 24,
	REMOVE = 25,
	REPLACE = 26,
	REVERSE = 27,
	RTRIM = 28,
	SHUFFLE = 29,
	SORT = 30,
	SPLIT = 31,
	STARTS_WITH = 32,
	TRIM = 33,
	UPPER = 34,
	VALUES = 35,
}

enum PostFinallyBehavior {
	NOTHING = 0,
	BREAK = 1,
	CONTINUE = 2,
	RETURN = 3,
}

