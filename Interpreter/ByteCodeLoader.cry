
// Many of these read functions take in an integer _pointer_ as an index. This is accomplished
// by passing in a reference to an integer array of length 1.

function @type('Array<string>') generateSourceFiles() {
	@type('ProgramData') p := $_get_program_data();
	return ProgramData$p.sourceCode;
}

function @type('string') read_till(@type('Array<int>') index, @type('string') raw, @type('int') length, @type('char') char) {
	@type('List<char>') output = $_new_list('char');
	if (!%%%IS_BYTECODE_LOADED_DIRECTLY%%%) {
		@type('bool') ctn = true;
		@type('char') c = $_string_as_char('\0');
		while (ctn) {
			c = $_string_char_at(raw, index[0]);
			if (c == char) {
				ctn = false;
			} else {
				$_list_push(output, c);
			}
			index[0] += 1;
		}
	}
	return $_list_join_chars(output);
}

function @type('int') read_integer(@type('Array<int>') pindex, @type('string') raw, @type('int') length, @type('string') alphaNums) {
	if (!%%%IS_BYTECODE_LOADED_DIRECTLY%%%) {
		@type('int') num = 0;
		@type('char') c = $_string_char_at(raw, $_array_get(pindex, 0));
		pindex[0] += 1;
		if (c == $_string_as_char('%')) {
			@type('string') value = read_till(pindex, raw, length, $_string_as_char('%'));
			num = $_string_parse_int(value);
		} else if (c == $_string_as_char('@')) {
			num = read_integer(pindex, raw, length, alphaNums);
			num *= 62;
			num += read_integer(pindex, raw, length, alphaNums);
		} else if (c == $_string_as_char('#')) {
			num = read_integer(pindex, raw, length, alphaNums);
			num *= 62;
			num += read_integer(pindex, raw, length, alphaNums);
			num *= 62;
			num += read_integer(pindex, raw, length, alphaNums);
		} else if (c == $_string_as_char('^')) {
			num = -1 * read_integer(pindex, raw, length, alphaNums);
		} else {
			num = $_string_index_of(alphaNums, c);
			if (num == -1) {
				// TODO: assert
			}
		}
	}
	return num;
}

function @type('string') read_string(@type('Array<int>') pindex, @type('string') raw, @type('int') length, @type('string') alphaNums) {
	@type('List<string>') output = $_new_list('string');
	if (!%%%IS_BYTECODE_LOADED_DIRECTLY%%%) {
		@type('bool') cont = true;
		@type('char') c = $_string_as_char(' ');
		while (cont) {
			c = $_string_char_at(raw, $_array_get(pindex, 0));
			$_array_set(pindex, 0, $_array_get(pindex, 0) + 1);
			if (c == $_string_as_char('@')) {
				@type('int') repeat = read_integer(pindex, raw, length, alphaNums);
				@type('string') last = $_list_get(output, $_list_length(output) - 1);
				while (repeat > 0) {
					$_list_push(output, last);
					repeat -= 1;
				}
			} else if (c == $_string_as_char('~')) {
				@type('int') d1 = read_integer(pindex, raw, length, alphaNums);
				@type('int') d2 = read_integer(pindex, raw, length, alphaNums);
				@type('int') charcode = d1 * 62 + d2;
				$_list_push(output, $_string_from_code(charcode));
			} else if (c == $_string_as_char('`')) {
				@type('int') d1 = read_integer(pindex, raw, length, alphaNums);
				@type('int') d2 = read_integer(pindex, raw, length, alphaNums);
				@type('int') d3 = read_integer(pindex, raw, length, alphaNums);
				@type('int') d4 = read_integer(pindex, raw, length, alphaNums);
				@type('int') charcode = ((d1 * 62 + d2) * 62 + d3) * 62 + d4;
				$_list_push(output, $_string_from_code(charcode));
			} else if (c == $_string_as_char('%')) {
				cont = false;
			} else {
				$_list_push(output, $_char_to_string(c));
			}
		}
	}
	return $_list_join(output, '');
}

function @type('Code') loadByteCode() {
	if (%%%IS_BYTECODE_LOADED_DIRECTLY%%%) {
		// PHP basically bypasses all the parsing as its bytecode is saved as a PHP file that returns these uncompressed 
		// values directly. Parsing this all on every HTTP request would be a waste of CPU, whereas doing it once for 
		// the rest of the traditional start-once-run-for-several-minutes apps that's okay.
		@type('Array<int>') ops = $_byte_code_get_ops();
		@type('Array<int>') iargs = $_byte_code_get_int_args();
		@type('Array<string>') sargs = $_byte_code_get_string_args();
	} else {
		@type('string') raw = $_get_raw_byte_code_string();

		@type('Array<int>') index = $_new_array('int', 1);
		$_array_set(index, 0, 0);
		@type('int') length = $_string_length(raw);

		@type('string') header = read_till(index, raw, length, $_string_as_char('@'));
		if (header != 'CRAYON') {
			// TODO: assert
		}
	
		@type('string') alphaNums = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
		@type('int') opCount = read_integer(index, raw, length, alphaNums);

		@type('Array<int>') ops = $_new_array('int', opCount);
		@type('Array<Array<int>>') iargs = $_new_array('Array<int>', opCount);
		@type('Array<string>') sargs = $_new_array('string', opCount);
		@type('char') c = $_string_as_char(' ');
		@type('int') argc = 0;
		@type('int') j = 0;
		@type('string') stringarg = null;
		@type('bool') stringPresent = false;
		@type('int') iarg = 0;
		@type('Array<int>') iarglist = null;

		for (@type('int') i = 0; i < opCount; i += 1) {
			c = $_string_char_at(raw, $_array_get(index, 0));
			index[0] += 1;
			argc = 0;
			stringPresent = true;
			if (c == $_string_as_char('!')) argc = 1;
			else if (c == $_string_as_char('&')) argc = 2;
			else if (c == $_string_as_char('*')) argc = 3;
			else {
				if (c != $_string_as_char('~')) {
					stringPresent = false;
					$_array_set(index, 0, $_array_get(index, 0) - 1);
				}
				argc = read_integer(index, raw, length, alphaNums);
			}

			iarglist = $_new_array('int', argc - 1);
			for (j = 0; j < argc; j += 1) {
				iarg = read_integer(index, raw, length, alphaNums);
				if (j == 0) {
					$_array_set(ops, i, iarg);
				} else {
					$_array_set(iarglist, j - 1, iarg);
				}
			}
			$_array_set(iargs, i, iarglist);
			if (stringPresent) {
				stringarg = read_string(index, raw, length, alphaNums);
			} else {
				stringarg = null;
			}
			$_array_set(sargs, i, stringarg);
		}
	
	}

	return new Code(ops, iargs, sargs);
}
