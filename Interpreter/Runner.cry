
/*
	Simply call this to kick off program execution.
	This function is always safe to call as it will block or not block appropriately and register
	appropriate callbacks in the latter case.
	e.g.
		<body onload="v_main()">...</body>
		public static void main(String[] args) { CrayonWrapper.v_main(); }
		<?php v_main(); ?>
	
	return value is meaningless.
*/
function @type('int') main() {

	initialize_constant_values();
	@type('ResourceDB') resources = resource_manager_initialize();

	@type('Code') byteCode = loadByteCode();
	@type('Array<int>') ops = Code$byteCode.ops;
	@type('int') opsLength = $_array_length(ops);
	@type('Array<Array<int>>') opArgs = Code$byteCode.args;
	@type('Array<string>') stringArgs = Code$byteCode.stringArgs;

	@type('int') i = 0;

	// TODO: once back in a stable state, set the local and value stack initialization sizes to very low.
	// These limits are probably rarely exceeded so there may be bugs lurking that I want to get out in the open.
	@type('Array<Value>') localsStack = $_new_array('Value', 1000);
	@type('Array<int>') localsStackSet = $_new_array('int', 1000);
	for (i = $_array_length(localsStack) - 1; i >= 0; i -= 1) {
		$_array_set(localsStack, i, null);
		$_array_set(localsStackSet, i, 0);
	}

	@type('StackFrame') stack = new StackFrame(
		0, // pc
		1, // localsStackSetToken,
		0, // localsStackOffset,
		0, // localsStackOffsetEnd,
		null, // previous
		false, // returnValueUsed
		null, // object context
		0, // valueStackSize
		0); // static initialization class ID marker upon completion (not applicable here)

	@type('ExecutionContext') executionContext = new ExecutionContext(
		0, // execution context ID. 0 is always the root process and execution will end entirely if this context ends.
		stack,

		// The value stack:
		0, // size
		100, // capacity
		$_new_array('Value', 100), // array
		
		localsStack,
		localsStackSet,
		1, // localsStackSetToken

		0); // executionCounter

	@type('Dictionary<int, ExecutionContext>') executionContexts = $_new_dictionary('int', 'ExecutionContext');
	$_dictionary_set(executionContexts, 0, executionContext);

	$_set_program_data(new ProgramData(
		executionContexts,
		ExecutionContext$executionContext.id, // last execution context ID
		ops,
		opArgs,
		stringArgs,
		null, // identifiers
		$_new_list('string'), // identifiers builder
		$_new_dictionary('string', 'int'), // invIdentifiers
		null, // literal table
		$_new_list('Value'), // literal table builder
		$_new_array('List<Token>', $_array_length(ops)), // token data
		0, // user code start
		null, // original source code data
		$_new_list('string'), // original source code data builder
		null, // integer switch lookups
		$_new_list('Dictionary<int, int>'), // integer switch lookups builder
		null, // string switch lookups
		$_new_list('Dictionary<string, int>'), // string switch lookups builder
		0, // instance counter

		false, // initialization complete

		// OO stuff
		$_new_array('ClassInfo', 100),
		$_new_array('FunctionInfo', 100),
		$_new_list('int'), // class static initialization stack
		null, // globalNameIdToPrimitiveMethodName (set in FINALIZE_INITIALIZATION)
		null, // funcArgs (set in FINALIZE_INITIALIZATION)

		-1, // the global name ID for "length"
		$_new_array('int', 10), // primitive method to function ID fallback lookup
		resources // resource database
		));

	runInterpreter(ExecutionContext$executionContext.id);
	return 0;
}

/*
	Returns a boolean. If false, end the program entirely.

	It is conceivable that the initial invocation to this will block and create successive invocations
	during the lifetime of the initial invocation. (for example, a blocking window is opened)
	This is why the output of the initial invocation is meaningless.
*/
function @type('int') runInterpreter(@type('int') executionContextId) {
	@type('ProgramData') p = $_get_program_data();
	@type('InterpreterResult') result = interpret(executionContextId);
	@type('int') status = InterpreterResult$result.status;
	if (status == InterpreterResultStatus.FINISHED) {
		if ($_dictionary_contains(ProgramData$p.executionContexts, executionContextId)) {
			$_dictionary_remove(ProgramData$p.executionContexts, executionContextId);
		}
		if (executionContextId == 0) {
			return false;
		}
	} else if (status == InterpreterResultStatus.FATAL_ERROR) {
		// TODO: don't generate the error in the interpreter. Instead just return the message and
		// the stack trace will be determined from the stack here. Also later add logic to 
		// conditionally find symbol information here.
		$_print_stderr(InterpreterResult$result.errorMessage);
		return false;
	} else if (status == InterpreterResultStatus.SUSPENDED) {
		// Do nothing.
	}

	return status;
}

function @type('int') runInterpreterWithFunctionPointer(@type('Value') fpValue, @type('Array<Value>') args) {
	@type('ProgramData') p = $_get_program_data();
	@type('int') newId = ProgramData$p.lastExecutionContextId + 1;
	ProgramData$p.lastExecutionContextId = newId;
	@type('List<Value>') argList = $_new_list('Value');
	for (@type('int') i = 0; i < $_array_length(args); i += 1) {
		$_list_push(argList, $_array_get(args, i));
	}

	@type('Array<Value>') locals = $_new_array('Value', 0);
	@type('Array<int>') localsSet = $_new_array('int', 0);
	@type('Array<Value>') valueStack = $_new_array('Value', 100);
	$_array_set(valueStack, 0, fpValue);
	$_array_set(valueStack, 1, new Value(Types.LIST, argList));

	@type('StackFrame') stack = new StackFrame(
		$_array_length(ProgramData$p.ops) - 2, // pc
		1, // localsStackSetToken,
		0, // localsStackOffset,
		0, // localsStackOffsetEnd,
		null, // previous
		false, // returnValueUsed
		null, // object context
		0, // valueStackSize
		0); // static initialization class ID marker upon completion (not applicable here)

	@type('ExecutionContext') executionContext = new ExecutionContext(
		newId, // execution context ID. 0 is always the root process and execution will end entirely if this context ends.
		stack,

		// The value stack:
		2, // size
		100, // capacity
		valueStack, // array
		
		locals,
		localsSet,
		1, // localsStackSetToken

		0); // executionContext

	$_dictionary_set(ProgramData$p.executionContexts, newId, executionContext);
	return runInterpreter(newId);
}
