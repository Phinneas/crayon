lib_func_error_occurred = false; // error occurred

/*
	TODO:
		1) somehow port some of the speed critical library functions to Core. For example, with GFX, use the render event queue system
			for all platforms, not just OpenGL and simply make everything a call to writing integers to the event queue which is a super
			generic task.
		2) library functions must have their own ID# within the library and also each library gets assigned an ID# when compiled.
		3) there is a library registration opcode. LIBRARY_REGISTER library ID, function count, string: name These are added to a dictionary
		4) FINALIZE_INITIALIZATION will invoke a system function called $_finalize_library_manifest()

			C# simple
				Extra projects are included. Each project implements an interface
				Value ILibInvoker.Invoke(int functionId, int argCount, Value[] args)
				There is a list of these objects indexed by library ID.

			C# run-instant
				Libraries are precompiled into DLL's.
				FINALIZE_INIT will dynamically load these DLL's.
				There is still a list of these objects indexed by library ID and everything else works the same

			Java
				Extra code is tacked on to the project.

			Python
				Tack on library code. Each library then adds a list of function pointers to a list indexed by library ID.

			JavaScript
				Each library as a separate .js file.
				Each one will do the same thing as Python. C$common$libFuncLookup

			PHP
				Each library as a separate .php file.
				Each library is a class where native calls are just methods and there is one method called invoke.
				There is a global array of these functions.
*/

output = VALUE_NULL;
switch ($_array_get(row, 0)) {
	%%%LIBRARY_FUNCTION_BIG_SWITCH_STATEMENT%%%
}

if (lib_func_error_occurred) {
	return killExecution(stack, pc, lib_func_error_message);
} else if ($_array_get(row, 2) == 1) { // output used?
	import inline "ValueStackCapacityCheck.cry";
	$_array_set(valueStack, valueStackSize, output);
	valueStackSize += 1;
}
