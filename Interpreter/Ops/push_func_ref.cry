/*
	row[0] --> Function ID
	row[1] --> Type (see below)
	row[2] --> class ID

	Possible values for type:
		0: normal function
		1: method
		2: static method
		3: lambda, one of these days
*/

value = null;
switch ($_array_get(row, 1)) {
	case 0: // normal function
		value = new Value(Types.FUNCTION, new FunctionPointer(FunctionPointerType.FUNCTION, null, 0, $_array_get(row, 0)));
		break;
	case 1: // method
		value = new Value(Types.FUNCTION, new FunctionPointer(
			FunctionPointerType.METHOD,
			StackFrame$stack.objectContext,
			$_array_get(row, 2), // class ID (either object context's class ID or one of its base classes.)
			$_array_get(row, 0))); // function ID
		break;

	case 2: // static method
		// note that a static constructor call must occur here.
		classId = $_array_get(row, 2);
		classInfo = $_array_get(classTable, classId);
		import inline "InvokeStaticConstructor.cry";
		if (bool1) {
			value = new Value(Types.FUNCTION, new FunctionPointer(FunctionPointerType.STATIC_METHOD, null, classId, $_array_get(row, 0)));
		} else {
			// a precaution just in case value is ever added to InvokeStaticConstructor.cry
			value = null;
		}
		break;
}

if (value != null) {
	import inline "ValueStackCapacityCheck.cry";
	$_array_set_ref(valueStack, valueStackSize, value);
	valueStackSize += 1;
}
