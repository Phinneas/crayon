switch ($_array_get(row, 0)) {

	case 1: $_comment('parseInt');
		import inline "FrameworkFunctions/1_arg.cry";

		output = VALUE_NULL;
		if (Value$arg1.type == Types.STRING) {
			string1 = $_string_trim($_force_parens($_cast('string', Value$arg1.internalValue)));
			if ($_is_valid_integer(string1)) {
				output = buildInteger($_parse_int(string1));
			}
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "parseInt requires a string argument.");
		}
		break;

	case 2: $_comment('parseFloat');
		import inline "FrameworkFunctions/1_arg.cry";

		output = VALUE_NULL;
		if (Value$arg1.type == Types.STRING) {
			string1 = $_string_trim($_force_parens($_cast('string', Value$arg1.internalValue)));
			$_parse_float(floatList1, string1);
			if ($_array_get(floatList1, 0) >= 0) {
				output = buildFloat($_array_get(floatList1, 1));
			}
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "parseFloat requires a string argument.");
		}
		break;

	case 3: $_comment('print');
		import inline "FrameworkFunctions/1_arg.cry";
		output = VALUE_NULL;
		$_print_stdout(valueToString(arg1));
		break;

	case 4: $_comment('typeof');
		import inline "FrameworkFunctions/1_arg.cry";
		// TODO: UNIT TEST!!!! This is fast-but-brittle code.
		output = buildInteger(Value$arg1.type - 1);
		break;

	case 5: $_comment('typeis');
		import inline "FrameworkFunctions/1_arg.cry";
		int1 = Value$arg1.type;
		int2 = $_array_get(row, 2); // arg count
		bool1 = false;
		while (int2 > 0) {
			if ($_array_get(row, 2 + int2) == int1) {
				bool1 = true;
				int2 = 0;
			} else {
				int2 -= 1;
			}
		}
		if (bool1) {
			output = VALUE_TRUE;
		} else {
			output = VALUE_FALSE;
		}
		break;

	case 6: $_comment('execId');
		output = buildInteger(ExecutionContext$ec.id);
		break;

	case 7: $_comment('assert');
		import inline "FrameworkFunctions/3_arg.cry";
		if (Value$arg1.type != Types.BOOLEAN) return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "Assertion expression must be a boolean.");
		if ($_cast('bool', Value$arg1.internalValue)) output = VALUE_NULL;
		else {
			string1 = valueToString(arg2);
			if ($_cast('bool', Value$arg3.internalValue)) string1 = $_string_concat("Assertion failed: ", string1);
			return $_exception(CoreExceptionTypes.ASSERTION_FAILED, string1);
		}
		break;

	case 8: $_comment('chr');
		output = null;
		import inline "FrameworkFunctions/1_arg.cry";
		if (Value$arg1.type == Types.INTEGER) {
			int1 = $_cast('int', Value$arg1.internalValue);
			if (int1 >= 0 && int1 < 256) {
				output = buildCommonString($_dummy_char_to_string_conversion($_chr(int1)));
			}
		}
		if (output == null) return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "chr requires an integer between 0 and 255");
		break;

	case 9: $_comment('ord');
		output = null;
		import inline "FrameworkFunctions/1_arg.cry";
		if (Value$arg1.type == Types.STRING) {
			string1 = $_cast('string', Value$arg1.internalValue);
			if ($_string_length(string1) == 1) {
				output = buildInteger($_string_char_code_at(string1, 0));
			}
		}
		if (output == null) return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "ord requires a 1 character string.");
		break;

	case 10: $_comment('currentTime');
		output = buildFloat($_current_time_seconds());
		break;

	case 11: $_comment('sortList');
		output = VALUE_NULL;
		import inline "FrameworkFunctions/2_arg.cry";
		// No arg checks because the primitive method resolver already resolved the item list and the key list is from embed.cry code.
		// Identical length is also presumed.
		list1 = $_cast('List<Value>', Value$arg1.internalValue); // original items
		list2 = $_cast('List<Value>', Value$arg2.internalValue); // keys
		sortLists(list2, list1, intOutParam);
		if ($_array_get(intOutParam, 0) > 0) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "Invalid sort keys. Keys must be all numbers or all strings, but not mixed.");
		}
		break;

	case 12: $_comment('abs');
		output = VALUE_NULL;
		import inline "FrameworkFunctions/1_arg.cry";

		if (Value$arg1.type == Types.INTEGER) {
			if ($_cast('int', Value$arg1.internalValue) < 0) {
				output = buildInteger(-$_cast('int', Value$arg1.internalValue));
			} else {
				output = arg1;
			}
		} else if (Value$arg1.type == Types.FLOAT) {
			if ($_cast('double', Value$arg1.internalValue) < 0) {
				output = buildFloat(-$_cast('double', Value$arg1.internalValue));
			} else {
				output = arg1;
			}
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "abs requires a number as input.");
		}

		break;

	case 13: $_comment('arcCos');
		import inline "FrameworkFunctions/1_arg.cry";

		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
		} else if (Value$arg1.type == Types.INTEGER) {
			float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "arccos requires a number as input.");
		}

		if (float1 < -1 || float1  > 1) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "arccos requires a number in the range of -1 to 1.");
		}
		output = buildFloat($_math_arc_cos(float1));
		break;

	case 14: $_comment('arcSin');
		import inline "FrameworkFunctions/1_arg.cry";

		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
		} else if (Value$arg1.type == Types.INTEGER) {
			float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "arcsin requires a number as input.");
		}

		if (float1 < -1 || float1  > 1) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "arcsin requires a number in the range of -1 to 1.");
		}
		output = buildFloat($_math_arc_sin(float1));
		break;

	case 15: $_comment('arcTan');
		import inline "FrameworkFunctions/2_arg.cry";
		bool1 = false;
		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
		} else if (Value$arg1.type == Types.INTEGER) {
			float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		} else {
			bool1 = true;
		}

		if (Value$arg2.type == Types.FLOAT) {
			float2 = $_cast('double', Value$arg2.internalValue);
		} else if (Value$arg2.type == Types.INTEGER) {
			float2 = $_cast('int', Value$arg2.internalValue) + 0.0;
		} else {
			bool1 = true;
		}

		if (bool1) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "arctan requires numeric arguments.");
		}
		output = buildFloat($_math_arc_tan(float1, float2));
		break;

	case 16: $_comment('cos');
		import inline "FrameworkFunctions/1_arg.cry";
		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
			output = buildFloat($_math_cos(float1));
		} else if (Value$arg1.type == Types.INTEGER) {
			int1 = $_cast('int', Value$arg1.internalValue);
			output = buildFloat($_math_cos(int1));
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "cos requires a number argument.");
		}
		break;

	case 17: $_comment('ensureRange');
		// arg 1: value
		// arg 2: min
		// arg 3: max
		import inline "FrameworkFunctions/3_arg.cry";

		bool1 = false; // type error flag.

		if (Value$arg2.type == Types.FLOAT) float2 = $_cast('double', Value$arg2.internalValue);
		else if (Value$arg2.type == Types.INTEGER) float2 = $_cast('int', Value$arg2.internalValue) + 0.0;
		else bool1 = true;

		if (Value$arg3.type == Types.FLOAT) float3 = $_cast('double', Value$arg3.internalValue);
		else if (Value$arg3.type == Types.INTEGER) float3 = $_cast('int', Value$arg3.internalValue) + 0.0;
		else bool1 = true;

		if (!bool1 && float3 < float2) {
			// Min and max are swapped D:
			// It OK.
			// I fix 4 u.
			float1 = float3;
			float3 = float2;
			float2 = float1;
			value = arg2;
			arg2 = arg3;
			arg3 = value;
		}

		if (Value$arg1.type == Types.FLOAT) float1 = $_cast('double', Value$arg1.internalValue);
		else if (Value$arg1.type == Types.INTEGER) float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		else bool1 = true;

		if (bool1) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "ensureRange requires numeric arguments.");
		}

		if (float1 < float2) {
			output = arg2;
		} else if (float1 > float3) {
			output = arg3;
		} else {
			output = arg1;
		}

		break;

	case 18: $_comment('floor');
		import inline "FrameworkFunctions/1_arg.cry";

		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
			if (%%%INT_IS_FLOOR%%%) {
				int1 = $_int(float1);
			} else {
				if (float1 < 0 && float1 % 1 != 0) {
					int1 = $_int(float1) - 1;
				} else {
					int1 = $_int(float1);
				}
			}
			if (int1 < INTEGER_POSITIVE_CACHE_SIZE) {
				if (int1 >= 0) {
					output = $_array_get(INTEGER_POSITIVE_CACHE, int1);
				} else if (int1 > -INTEGER_NEGATIVE_CACHE_SIZE) {
					output = $_array_get(INTEGER_NEGATIVE_CACHE, -int1);
				} else {
					output = new Value(Types.INTEGER, int1);
				}
			} else {
				output = new Value(Types.INTEGER, int1);
			}
		} else if (Value$arg1.type == Types.INTEGER) {
			output = arg1;
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "floor expects a numeric argument.");
		}
		break;

	case 19: $_comment('max');
		import inline "FrameworkFunctions/2_arg.cry";

		bool1 = false;
		if (Value$arg1.type == Types.FLOAT) float1 = $_cast('double', Value$arg1.internalValue);
		else if (Value$arg1.type == Types.INTEGER) float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		else bool1 = true;

		if (Value$arg2.type == Types.FLOAT) float2 = $_cast('double', Value$arg2.internalValue);
		else if (Value$arg2.type == Types.INTEGER) float2 = $_cast('int', Value$arg2.internalValue) + 0.0;
		else bool1 = true;

		if (bool1) return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "max requires numeric arguments.");

		if (float1 >= float2) {
			output = arg1;
		} else {
			output = arg2;
		}
		break;

	case 20: $_comment('min');
		import inline "FrameworkFunctions/2_arg.cry";

		bool1 = false;
		if (Value$arg1.type == Types.FLOAT) float1 = $_cast('double', Value$arg1.internalValue);
		else if (Value$arg1.type == Types.INTEGER) float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		else bool1 = true;

		if (Value$arg2.type == Types.FLOAT) float2 = $_cast('double', Value$arg2.internalValue);
		else if (Value$arg2.type == Types.INTEGER) float2 = $_cast('int', Value$arg2.internalValue) + 0.0;
		else bool1 = true;

		if (bool1) return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "max requires numeric arguments.");

		if (float1 <= float2) {
			output = arg1;
		} else {
			output = arg2;
		}
		break;

	case 21: $_comment('nativeInt');
		/*
			arg 1: object instance
			arg 2: native data index
		*/
		import inline "FrameworkFunctions/2_arg.cry";
		objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
		i = $_cast('int', Value$arg2.internalValue);
		output = buildInteger($_cast('int', $_array_get(ObjectInstance$objInstance1.nativeData, i)));
		break;

	case 22: $_comment('nativeString');
		/*
			arg 1: object instance
			arg 2: native data index
			arg 3: bool if this should be treated as a common string
		*/
		import inline "FrameworkFunctions/3_arg.cry";
		objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
		i = $_cast('int', Value$arg2.internalValue);
		string1 = $_cast('string', $_array_get(ObjectInstance$objInstance1.nativeData, i));
		if ($_cast('bool', Value$arg3.internalValue)) {
			output = buildCommonString(string1);
		} else {
			output = buildString(string1);
		}
		break;

	case 23: $_comment('sign');
		import inline "FrameworkFunctions/1_arg.cry";
		if (Value$arg1.type == Types.INTEGER) float1 = $_cast('double', $_cast('int', Value$arg1.internalValue));
		else if (Value$arg1.type == Types.FLOAT) float1 = $_cast('double', Value$arg1.internalValue);
		else return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "sign requires a number as input.");

		if (float1 == 0) output = VALUE_INT_ZERO;
		else if (float1 > 0) output = VALUE_INT_ONE;
		else output = VALUE_INT_NEG_ONE;
		break;

	case 24: $_comment('sin');
		import inline "FrameworkFunctions/1_arg.cry";
		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
		} else if (Value$arg1.type == Types.INTEGER) {
			float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "sin requires a number argument.");
		}
		output = buildFloat($_math_sin(float1));
		break;

	case 25: $_comment('tan');
		import inline "FrameworkFunctions/1_arg.cry";
		// Checking for pi / 2 is not really necessary even though it is not a valid tan value, because
		// floating point arithmetic will never create a "true" pi / 2 and will instead return giant numbers.
		// TODO: unit test so that I know this is actually true in practice.
		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
		} else if (Value$arg1.type == Types.INTEGER) {
			float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "tan requires a number argument.");
		}
		output = buildFloat($_math_tan(float1));
		break;

	case 26: $_comment('log');
		/*
			arg1: value to take the natural log of
			arg2: constant float value to multiply the output by to change the base. [type safety guaranteed]

			to help avoid floating point arithmetic errors, add an tiny epsilon and then round
			down to check for crossing an int boundary.
		*/
		import inline "FrameworkFunctions/2_arg.cry";
		if (Value$arg1.type == Types.FLOAT) {
			float1 = $_cast('double', Value$arg1.internalValue);
		} else if (Value$arg1.type == Types.INTEGER) {
			float1 = $_cast('int', Value$arg1.internalValue) + 0.0;
		} else {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "logarithms require a number argument.");
		}

		if (float1 <= 0) {
			return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "logarithms require positive inputs.");
		}

		output = buildFloat(fixFuzzyFloatPrecision($_math_log(float1) * $_cast('double', Value$arg2.internalValue)));
		break;

	case 27: $_comment('intQueueClear');
		output = VALUE_NULL;
		import inline "FrameworkFunctions/1_arg.cry";
		objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
		if (ObjectInstance$objInstance1.nativeData != null) {
			$_array_set(ObjectInstance$objInstance1.nativeData, 1, 0);
		}
		break;

	case 28: $_comment('intQueueWrite16');
		output = VALUE_NULL;
		int1 = $_array_get(row, 2);
		valueStackSize -= int1 + 1;

		value = $_array_get(valueStack, valueStackSize);
		objInstance1 = $_cast('ObjectInstance', Value$value.internalValue);
		objArray1 = ObjectInstance$objInstance1.nativeData;
		intArray1 = $_cast('Array<int>', $_array_get(objArray1, 0));
		len = $_cast('int', $_array_get(objArray1, 1));
		if (len >= $_array_length(intArray1)) {
			intArray2 = $_new_array('int', len * 2 + 16);
			for (j = 0; j < len; j += 1) {
				$_array_set(intArray2, j, $_array_get(intArray1, j));
			}
			intArray1 = intArray2;
			$_array_set(objArray1, 0, intArray1);
		}
		$_array_set(objArray1, 1, len + 16);

		for (i = int1 - 1; i >= 0; i -= 1) {
			value = $_array_get(valueStack, valueStackSize + 1 + i);
			if (Value$value.type == Types.INTEGER) {
				int2 = $_cast('int', Value$value.internalValue);
			} else if (Value$value.type == Types.FLOAT) {
				float1 = $_cast('double', Value$value.internalValue) + .5;
				int2 = $_int(float1);
			} else {
				return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "Input must be integers.");
			}
			$_array_set(intArray1, len + i, int2);
		}
		break;

	case 29: $_comment('execCounter');
		output = buildInteger(ExecutionContext$ec.executionCounter);
		break;

	case 30: $_comment('sleep');
		import inline "FrameworkFunctions/1_arg.cry";

		// type guaranteed
		float1 = getFloat(arg1);
		if (%%%IS_THREAD_BLOCKING_ALLOWED%%%) {
			$_thread_sleep(float1);
		} else {
			// Do the output-used check here.
			if ($_array_get(row, 1) == 1) {
				import inline "ValueStackCapacityCheck.cry";
				$_array_set(valueStack, valueStackSize, VALUE_NULL);
				valueStackSize += 1;
			}

			prepareToSuspend(ec, stack, valueStackSize, pc);

			$_enqueue_vm_resume(float1, ExecutionContext$ec.id);
			
			if (ExecutionContext$ec.id > -1) {
				Core.EmitComment("If statement to circumvent unreachable code error in translator.");
				return suspendInterpreterWithLock();
			}
		}
		break;

	case 31: $_comment('projectId');
		output = buildCommonString(ProgramData$p.projectId);
		break;

	case 32: $_comment('isJavaScript');
		if (%%%IS_JAVASCRIPT%%%) {
			output = VALUE_TRUE;
		} else {
			output = VALUE_FALSE;
		}
		break;

	case 33: $_comment('isAndroid');
		if (%%%IS_ANDROID%%%) {
			output = VALUE_TRUE;
		} else {
			output = VALUE_FALSE;
		}
		break;

	case 34: $_comment('allocNativeData');
		import inline "FrameworkFunctions/2_arg.cry";
		objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
		int1 = $_cast('int', Value$arg2.internalValue);
		objArray1 = $_new_array('object', int1);
		ObjectInstance$objInstance1.nativeData = objArray1;
		break;

	case 35: $_comment('setNativeData');
		import inline "FrameworkFunctions/3_arg.cry";
		objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
		$_array_set(
			ObjectInstance$objInstance1.nativeData,
			$_cast('int', Value$arg2.internalValue),
			Value$arg3.internalValue);
		break;

	case 36: $_comment('getExceptionTrace');
		import inline "FrameworkFunctions/1_arg.cry";
		intList1 = $_cast('List<int>', getNativeDataItem(arg1, 1));
		list1 = $_new_list('Value');
		output = new Value(Types.LIST, list1);
		if (intList1 != null) {
			stringList1 = tokenHelperConvertPcsToStackTraceStrings(intList1);
			for (i = 0; i < $_list_length(stringList1); i += 1) {
				$_list_push(list1, buildString($_list_get(stringList1, i)));
			}
			$_list_reverse_in_place(list1);
		}
		break;

	case 37: $_comment('reflectAllClasses');
		list1 = $_new_list('Value');
		output = new Value(Types.LIST, list1);
		for (i = 1; i < $_array_length(ProgramData$p.classTable); i += 1) {
			classInfo = $_array_get(ProgramData$p.classTable, i);
			if (classInfo == null) {
				// TODO: why is the class table not sized to its actual size?
				i += $_array_length(ProgramData$p.classTable);
			} else {
				$_list_push(list1, new Value(Types.CLASS, new ClassValue(false, ClassInfo$classInfo.id)));
			}
		}
		break;

	case 38: $_comment('reflectGetMethods');
		import inline "FrameworkFunctions/1_arg.cry";
		list1 = $_new_list('Value');
		output = new Value(Types.LIST, list1);
		if (Value$arg1.type == Types.INSTANCE) {
			objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
			classInfo = $_array_get(ProgramData$p.classTable, ObjectInstance$objInstance1.classId);
			for (i = 0; i < $_array_length(ClassInfo$classInfo.functionIds); i += 1) {
				functionId = $_array_get(ClassInfo$classInfo.functionIds, i);
				if (functionId != -1) {
					$_list_push(list1, new Value(Types.FUNCTION, new FunctionPointer(
						FunctionPointerType.METHOD,
						arg1,
						ObjectInstance$objInstance1.classId,
						functionId)));
				}
			}
		} else {
			classValue = $_cast('ClassValue', Value$arg1.internalValue);
			classInfo = $_array_get(ProgramData$p.classTable, ClassValue$classValue.classId);
			// all static method info is resolved at compile time.
			return $_exception(CoreExceptionTypes.UNSUPPORTED_OPERATION, "static method reflection not implemented yet.");
		}
		break;

	case 39: $_comment('reflectGetClass');
		import inline "FrameworkFunctions/1_arg.cry";
		if (Value$arg1.type != Types.INSTANCE) return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "Cannot get class from non-instance types.");
		objInstance1 = $_cast('ObjectInstance', Value$arg1.internalValue);
		output = new Value(Types.CLASS, new ClassValue(false, ObjectInstance$objInstance1.classId));
		break;

	case 40: $_comment('convertFloatArgsToInts');
		// Quickly converts all floats in the current stack frame into ints until it encounters an unset local
		// The purpose of this is to efficiently write library functions that can take floats but require integers.
		// This is primarily used by the graphics drawing functions which use integers but having the user convert
		// everythiing to a float shouldn't be necessary.
		int1 = StackFrame$stack.localsStackOffsetEnd;
		for (i = localsStackOffset; i < int1; i += 1) {
			value = $_array_get(localsStack, i);
			if ($_array_get(localsStackSet, i) != localsStackSetToken) {
				i += int1; // break
			} else if (Value$value.type == Types.FLOAT) {
				float1 = $_cast('double', Value$value.internalValue);
				if (%%%INT_IS_FLOOR%%%) {
					int2 = $_int(float1);
				} else {
					if (float1 < 0 && float1 % 1 != 0) {
						int2 = $_int(float1) - 1;
					} else {
						int2 = $_int(float1);
					}
				}
				if (int2 >= 0 && int2 < INTEGER_POSITIVE_CACHE_SIZE) {
					// super-common case and faster than calling a function.
					$_array_set(localsStack, i, $_array_get(INTEGER_POSITIVE_CACHE, int2));
				} else {
					$_array_set(localsStack, i, buildInteger(int2));
				}
			}
		}
		break;
}

if ($_array_get(row, 1) == 1) { // output used?
	import inline "ValueStackCapacityCheck.cry";
	$_array_set(valueStack, valueStackSize, output);
	valueStackSize += 1;
}
