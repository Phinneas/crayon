
/*
	All function calls (even constructor invocations and primitive metthods) go through this op code, with the exception 
	of static constructors that are implicitly called from dereferencing a static field. However, implicit static constructor
	invocations that occur as a result of a static method invocation goes through this op as well.

	Generally, any ambiguous function invocation (such as invoking a field on a variable of unknown type) is resolved into
	a known invocation, and then follows through the rest of the shared codepath.

	Here are the values of FunctionInvocationType, and what they do in this op...
		
		NORMAL_FUNCTION
		Nothing special. Function is invoked.
		
		STATIC_METHOD
		Check to see if the class is staticly initialized. If it isn't (or not in progress), don't pop the args, subtract
		1 from the PC, and then change the invocation type to STATIC_CONSTRUCTOR. When it returns, it'll return to the previous
		PC and then resume this op again and it'll be initialized.
		
		LOCAL_METHOD
		At the final invocation phase, functionId and value must be set. 
		
		POINTER_PROVIDED
		Pop the stack, look at the pointer, and figure out what this is. Change type accordingly.
		This happens before final invocation time.
		
		FIELD_INVOCATION
		Pop the stack, look at the pointer, look at the field name, then resolve this into one of the following:
		LOCAL_METHOD, POINTER_PROVIDED (i.e. it's a function pointer that was set on a normal field of a class, or
		PRIMITIVE_METHOD
		
		CONSTRUCTOR

		BASE_CONSTRUCTOR
		
		STATIC_CONSTRUCTOR
		This is never invoked from the byte code. It is always invoked as a result of STATIC_METHOD.
		When it is invoked, it must mark the stack frame as having a static initalization resolution, so that when it's popped,
		the class is marked as fully initialized.
		
		PRIMITIVE_METHOD
		This is the only function invocation that does not result in stack changes. The value is computed 
		synchronously and immediately pushed back to the stack.
		There may be an exception to this in the future thoough, when list.sort(key_function_pointer) is added,
		in which case, this primitive method call may possibly be resolved into a NORMAL_FUNCTION call referring a
		function in the core library.
	}

	args:
	row[0] --> type (see above)
	row[1] --> args passed by user.
	row[2] --> functionID if known (available for all types except POINTER_PROVIDED and FIELD_INVOCATION)
	row[3] --> 1 if output is used
	row[4] --> class ID if method or constructor of any type. If this is FIELD_INVOCATION, then this is the global name ID
	row[5] --> only provided in a field invocation. The local field ID of the field being invoked. Used to do lookup on specific class if different than the one the function ID refers to.

*/

type = $_array_get(row, 0);
argCount = $_array_get(row, 1);
functionId = $_array_get(row, 2);
returnValueUsed = $_array_get(row, 3) == 1;
classId = $_array_get(row, 4);

// Check to see if a static initialization is required.
bool1 = true;
if (type == FunctionInvocationType.STATIC_METHOD || type == FunctionInvocationType.CONSTRUCTOR) {
	$_comment('constructor or static method');
	classInfo = $_array_get(ProgramData$p.classTable, classId);

	import inline "InvokeStaticConstructor.cry";
}

if (bool1) {

	$_comment('construct args array');
	// Note that if a static constructor is invoked, the args of the previous static method are safe because argCount was set to 0.

	for (i = argCount - 1; i >= 0; i -= 1) {
		valueStackSize -= 1;
		$_array_set(funcArgs, i, $_array_get(valueStack, valueStackSize));
	}

	if (type == FunctionInvocationType.LOCAL_METHOD) {
		value = StackFrame$stack.objectContext;
		objInstance1 = $_cast('ObjectInstance', Value$value.internalValue);
		if (ObjectInstance$objInstance1.classId != classId) {
			int2 = $_array_get(row, 5);
			if (int2 != -1) {
				classInfo = $_array_get(classTable, ObjectInstance$objInstance1.classId);
				functionId = $_array_get(ClassInfo$classInfo.functionIds, int2);
			}
		}
	} else if (type == FunctionInvocationType.FIELD_INVOCATION) {
		$_comment('field invocation');
		// provided pointers have no risk of requiring a static initialization because the pointer can only be 
		// provided from a source that would have already triggered it.

		// Pop the stack and see what we have.
		valueStackSize -= 1;
		value = $_array_get(valueStack, valueStackSize);

		switch (Value$value.type) {
			case Types.INSTANCE:
				$_comment('field invoked on an object instance.');
				objInstance1 = $_cast('ObjectInstance', Value$value.internalValue);
				int1 = ObjectInstance$objInstance1.classId; // note that classId has the field name ID and so this is sort of confusing
				classInfo = $_array_get(classTable, int1);
				if ($_dictionary_contains(ClassInfo$classInfo.globalIdToMemberId, classId)) {
					int1 = $_dictionary_get_guaranteed(ClassInfo$classInfo.globalIdToMemberId, classId); // int1 is now the member ID.
					// now that we have the member ID, check to see if this is a field or a known method.
					functionId = $_array_get(ClassInfo$classInfo.functionIds, int1); // get the function ID, if present
					if (functionId > 0) {
						// This is a local method. 'value' already contains the context.
						type = FunctionInvocationType.LOCAL_METHOD;
					} else {
						// This is just a field which is a pointer to something. Dereference the field into 'value' and change type to POINTER_PROVIDED.
						// Since there are unverified POINTER_PROVIDED codepaths at this point, don't do verification that it is a FunctionPointer here 
						// as it will be done redundantly later.
						value = $_array_get(ObjectInstance$objInstance1.members, int1);
						type = FunctionInvocationType.POINTER_PROVIDED;

						$_array_set(valueStack, valueStackSize, value);
						valueStackSize += 1;
					}
				} else {
					return killExecution(stack, pc, "Unknown field."); // TODO: use the class name and field name.
				}
				break;
			default:
				$_comment('primitive method suspected.');
				// resolve a primitive method
				functionId = resolvePrimitiveMethodName2(globalNameIdToPrimitiveMethodName, Value$value.type, classId); // enum value in PrimitiveMethodName
				if (functionId < 0) {
					if (Value$value.type == Types.NULL) {
						return killExecution(stack, pc, "Invoked method on null.");
					}
					return killExecution(stack, pc, "Unknown method.");
				}
				type = FunctionInvocationType.PRIMITIVE_METHOD;
				break;
		}
	}

	if (type == FunctionInvocationType.POINTER_PROVIDED) {
		$_comment('pointer provided');
		
		valueStackSize -= 1;
		value = $_array_get(valueStack, valueStackSize);

		if (Value$value.type == Types.FUNCTION) {
			functionPointer1 = $_cast('FunctionPointer', Value$value.internalValue);
			switch (FunctionPointer$functionPointer1.type) {
				case FunctionPointerType.FUNCTION:
					$_comment('pointer to a function');
					functionId = FunctionPointer$functionPointer1.functionId;
					type = FunctionInvocationType.NORMAL_FUNCTION;
					break;
				case FunctionPointerType.METHOD:
					$_comment('pointer to a method');
					functionId = FunctionPointer$functionPointer1.functionId;
					value = FunctionPointer$functionPointer1.context;
					type = FunctionInvocationType.LOCAL_METHOD;
					break;
				case FunctionPointerType.STATIC_METHOD:
					$_comment('pointer to a static method');
					functionId = FunctionPointer$functionPointer1.functionId;
					classId = FunctionPointer$functionPointer1.classId;
					type = FunctionInvocationType.STATIC_METHOD;
					break;
				case FunctionPointerType.PRIMITIVE_METHOD:
					$_comment('pointer to a primitive method');
					value = FunctionPointer$functionPointer1.context;
					functionId = FunctionPointer$functionPointer1.functionId;
					type = FunctionInvocationType.PRIMITIVE_METHOD;
					break;
			}
		} else {
			return killExecution(stack, pc, "This type cannot be invoked like a function.");
		}
	}
	
	if (type == FunctionInvocationType.PRIMITIVE_METHOD) {
		$_comment('primitive method invocation');
		output = VALUE_NULL;
		primitiveMethodToCoreLibraryFallback = false;
		switch (Value$value.type) {
			case Types.STRING:
				$_comment('...on a string');
				string1 = $_cast('string', Value$value.internalValue);
				switch (functionId) {
					case PrimitiveMethodName.CONTAINS: import inline 'PrimitiveMethods/string_contains.cry'; break;
					case PrimitiveMethodName.ENDS_WITH: import inline 'PrimitiveMethods/string_ends_with.cry'; break;
					case PrimitiveMethodName.INDEX_OF: import inline 'PrimitiveMethods/string_index_of.cry'; break;
					case PrimitiveMethodName.LOWER: import inline 'PrimitiveMethods/string_lower.cry'; break;
					case PrimitiveMethodName.REPLACE: import inline 'PrimitiveMethods/string_replace.cry'; break;
					case PrimitiveMethodName.REVERSE: import inline 'PrimitiveMethods/string_reverse.cry'; break;
					case PrimitiveMethodName.SPLIT: import inline 'PrimitiveMethods/string_split.cry'; break;
					case PrimitiveMethodName.STARTS_WITH: import inline 'PrimitiveMethods/string_starts_with.cry'; break;
					case PrimitiveMethodName.TRIM: import inline 'PrimitiveMethods/string_trim.cry'; break;
					case PrimitiveMethodName.UPPER: import inline 'PrimitiveMethods/string_upper.cry'; break;
					default: output = null; break;
				}
				break;
			case Types.LIST:
				$_comment('...on a list');
				list1 = $_cast('List<Value>', Value$value.internalValue);
				switch (functionId) {
					case PrimitiveMethodName.ADD: import inline 'PrimitiveMethods/list_add.cry'; break;
					case PrimitiveMethodName.CHOICE: import inline 'PrimitiveMethods/list_choice.cry'; break;
					case PrimitiveMethodName.CLEAR: import inline 'PrimitiveMethods/list_clear.cry'; break;
					case PrimitiveMethodName.CLONE: import inline 'PrimitiveMethods/list_clone.cry'; break;
					case PrimitiveMethodName.CONCAT: import inline 'PrimitiveMethods/list_concat.cry'; break;
					case PrimitiveMethodName.CONTAINS: import inline 'PrimitiveMethods/list_contains.cry'; break;
					case PrimitiveMethodName.FILTER: import inline 'PrimitiveMethods/list_filter.cry'; break;
					case PrimitiveMethodName.INSERT: import inline 'PrimitiveMethods/list_insert.cry'; break;
					case PrimitiveMethodName.JOIN: import inline 'PrimitiveMethods/list_join.cry'; break;
					case PrimitiveMethodName.MAP: import inline 'PrimitiveMethods/list_map.cry'; break;
					case PrimitiveMethodName.POP: import inline 'PrimitiveMethods/list_pop.cry'; break;
					case PrimitiveMethodName.REMOVE: import inline 'PrimitiveMethods/list_remove.cry'; break;
					case PrimitiveMethodName.REVERSE: import inline 'PrimitiveMethods/list_reverse.cry'; break;
					case PrimitiveMethodName.SHUFFLE: import inline 'PrimitiveMethods/list_shuffle.cry'; break;
					case PrimitiveMethodName.SORT: import inline 'PrimitiveMethods/list_sort.cry'; break;
					default: output = null; break;
				}
				break;
			case Types.DICTIONARY:
				$_comment('...on a dictionary');
				dictImpl = $_cast('DictImpl', Value$value.internalValue);
				switch (functionId) {
					case PrimitiveMethodName.CLEAR: import inline 'PrimitiveMethods/dict_clear.cry'; break;
					case PrimitiveMethodName.CLONE: import inline 'PrimitiveMethods/dict_clone.cry'; break;
					case PrimitiveMethodName.CONTAINS: import inline 'PrimitiveMethods/dict_contains.cry'; break;
					case PrimitiveMethodName.GET: import inline 'PrimitiveMethods/dict_get.cry'; break;
					case PrimitiveMethodName.KEYS: import inline 'PrimitiveMethods/dict_keys.cry'; break;
					case PrimitiveMethodName.MERGE: import inline 'PrimitiveMethods/dict_merge.cry'; break;
					case PrimitiveMethodName.REMOVE: import inline 'PrimitiveMethods/dict_remove.cry'; break;
					case PrimitiveMethodName.VALUES: import inline 'PrimitiveMethods/dict_values.cry'; break;
					default: output = null; break;
				}
				break;
		}
	
		if (output == null) {
			if (primitiveMethodToCoreLibraryFallback) {
				type = FunctionInvocationType.NORMAL_FUNCTION;
				bool1 = true;
				// functionId has been set.
			} else {
				return killExecution(stack, pc, "primitive method not found.");
			}
		} else {
			if (returnValueUsed) {
				import inline "ValueStackCapacityCheck.cry";
				$_array_set(valueStack, valueStackSize, output);
				valueStackSize += 1;
			}
			bool1 = false;
		}
	}

	if (bool1) {
		$_comment('push a new frame to the stack');
	
		StackFrame$stack.pc = pc;
		bool1 = false; // bool1 now indicates whether the PC's in intArray1 indicate additional stack frames that need to be pushed.

		// Set the following variables...
		// pc --> since pc is now saved, put the new PC into the 'pc' variable.
		// classId --> for static constructors, set this to the class ID to mark as initialization-completed, 0 otherwise
		// value --> the value of 'this' in the next function
		switch (type) {
			case FunctionInvocationType.NORMAL_FUNCTION:
				$_comment('function');
				functionInfo = $_array_get(functionTable, functionId);
				pc = FunctionInfo$functionInfo.pc;
				value = null;
				classId = 0;
				break;
			case FunctionInvocationType.STATIC_METHOD:
				$_comment('static method');
				functionInfo = $_array_get(functionTable, functionId);
				pc = FunctionInfo$functionInfo.pc;
				value = null;
				classId = 0;
				break;
			case FunctionInvocationType.LOCAL_METHOD:
				$_comment('non-static method');
				functionInfo = $_array_get(functionTable, functionId);
				pc = FunctionInfo$functionInfo.pc;
				classId = 0;
				// value already set
				break;
			case FunctionInvocationType.CONSTRUCTOR:
				$_comment('constructor');
				ProgramData$p.instanceCounter += 1;
				classInfo = $_array_get(classTable, classId);
				valueArray1 = $_new_array('Value', ClassInfo$classInfo.memberCount);
				for (i = $_array_length(valueArray1) - 1; i >= 0; i -= 1) {
					switch ($_array_get(ClassInfo$classInfo.fieldInitializationCommand, i)) {
						case 0:
							$_array_set(valueArray1, i, $_array_get(ClassInfo$classInfo.fieldInitializationLiteral, i));
							break;
						case 1:
							$_array_set(valueArray1, i, new Value(Types.LIST, $_new_list('Value')));
							break;
						case 2:
							$_array_set(valueArray1, i, new Value(Types.DICTIONARY, new DictImpl(
								$_new_dictionary('int', 'Value'),
								$_new_dictionary('int', 'Value'),
								$_new_dictionary('string', 'Value'),
								$_new_dictionary('string', 'Value'),
								0,
								Types.INTEGER)));
							break;
					}
				}
				objInstance1 = new ObjectInstance(
					classId,
					ProgramData$p.instanceCounter,
					valueArray1,
					null);
				value = new Value(Types.INSTANCE, objInstance1);
				functionId = ClassInfo$classInfo.constructorFunctionId;
				functionInfo = $_array_get(functionTable, functionId);
				pc = FunctionInfo$functionInfo.pc;
				classId = 0;
				if (returnValueUsed) {
					// if the return value is used, push the new constructed object to the stack NOW and then call the function
					// as though the return value is not used.
					returnValueUsed = false;
					import inline "ValueStackCapacityCheck.cry";
					$_array_set(valueStack, valueStackSize, value);
					valueStackSize += 1;
				}

				intArray1 = ClassInfo$classInfo.fieldInitializerPcs;
				bool1 = true;
				break;
			case FunctionInvocationType.BASE_CONSTRUCTOR:
				$_comment('base constructor');
				value = StackFrame$stack.objectContext;
				classInfo = $_array_get(classTable, classId);
				functionId = ClassInfo$classInfo.constructorFunctionId;
				functionInfo = $_array_get(functionTable, functionId);
				pc = FunctionInfo$functionInfo.pc;
				classId = 0;
				break;
		}
	
		if (argCount < FunctionInfo$functionInfo.minArgs || 
			argCount > FunctionInfo$functionInfo.maxArgs) {
			return killExecution(stack, StackFrame$stack.pc, "Incorrect number of args were passed to this function.");
		}

		int1 = FunctionInfo$functionInfo.localsSize;
		int2 = StackFrame$stack.localsStackOffsetEnd; // where the current locals stack ends (will be the new locals stack begin)
		if (localsStackCapacity <= int2 + int1) {
			increaseLocalsStackCapacity(p, int1);
			localsStack = ProgramData$p.localsStack;
			localsStackSet = ProgramData$p.localsStackSet;
			localsStackCapacity = $_array_length(localsStack);
		}

		localsStackSetToken += 1;
		// TODO: set this to 100 to test.
		// If this comment is still here, then that means I haven't tested this.
		if (localsStackSetToken > 2000000000) {
			resetLocalsStackTokens(p, stack);
			localsStackSetToken = 2;
		}

		localsStackOffset = int2;

		$_comment('invoke the function');
		stack = new StackFrame(
			pc,
			localsStackSetToken,
			localsStackOffset,
			localsStackOffset + int1, // locals stack end (exclusive) and also the next stack frame's localsStackOffset
			stack,
			returnValueUsed,
			value, // the value of the 'this' keyword
			valueStackSize,
			0); // for static constructor use only

		// now that we're in the new stack frame, flush out all the passed args to the local stack since their 
		// ID's are allocated with args first.
		for (i = 0; i < argCount; i += 1) {
			int1 = localsStackOffset + i;
			$_array_set(localsStack, int1, $_array_get(funcArgs, i));
			$_array_set(localsStackSet, int1, localsStackSetToken);
		}

		if (argCount != FunctionInfo$functionInfo.minArgs) {
			// optional args are simply local variable assignments at the front of the function body.
			// Adjust the PC to skip these if those arguments were provided.
			int1 = argCount - FunctionInfo$functionInfo.minArgs; // number of optional args provided
			if (int1 > 0) {
				// The amount to increment the PC by is conveniently stored in the function metadata in an 
				// array indexed by the number of optional args provided.
				pc += $_array_get(FunctionInfo$functionInfo.pcOffsetsForOptionalArgs, int1);
				StackFrame$stack.pc = pc;
			}
		}

		if (bool1) {
			for (i = 0; i < $_array_length(intArray1); i += 1) {
				stack = new StackFrame(
					$_array_get(intArray1, i), // PC of initializer - 1
					localsStackSetToken, // locals are not allowed in field initializer, so these are all the same.
					localsStackOffset,
					localsStackOffset,
					stack,
					false, // return value used
					value, // value of 'this' keyword
					valueStackSize, // should not change
					0); // for static constructors only
			}

			pc = StackFrame$stack.pc;
		}
	}
}
