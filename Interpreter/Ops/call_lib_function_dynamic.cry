// the string argument is ignored at runtime, but at startup is used to calculate the function token, for all 
// CALL_LIB_FUNCTION_DYNAMIC ops, which is then assigned to row[0]
int1 = $_array_get(row, 0); // function token
argCount = $_array_get(row, 2);
object1 = $_array_get(libFunctionPointers, pc);

for (i = argCount - 1; i >= 0; i -= 1) {
	valueStackSize -= 1;
	$_array_set(funcArgs, i, $_array_get(valueStack, valueStackSize));
}

prepareToSuspend(ec, stack, valueStackSize, pc);

if (%%%IS_FOR_PASTEL_TRANSLATION%%%) {
	value = $_invoke_dynamic_library_function(object1, funcArgs);

	if (ExecutionState$ec.executionStateChange) {
		ExecutionState$ec.executionStateChange = false;
		// TODO: declare constants
		if (ExecutionState$ec.executionStateChangeCommand == 1) {
			// Suspend VM
			return suspendInterpreter();
		}
	}
}

if ($_array_get(row, 3) == 1) { // output used?
	import inline "ValueStackCapacityCheck.cry";
	$_array_set(valueStack, valueStackSize, value);
	valueStackSize += 1;
}
