
value = ExecutionContext$ec.activeException;
if (value == null || ExecutionContext$ec.activeExceptionHandled) {
	switch (StackFrame$stack.postFinallyBehavior) {
		case PostFinallyBehavior.NOTHING:
			ExecutionContext$ec.activeException = null;
			break;

		case PostFinallyBehavior.BREAK:
			ExecutionContext$ec.activeException = null;
			int1 = $_array_get(row, 0);
			if (int1 == 1) {
				pc += $_array_get(row, 1);
			} else if (int1 == 2) {
				intArray1 = $_array_get(esfData, pc);
				pc = $_array_get(intArray1, 1);
			} else {
				// TODO: compile-time error
				return $_exception(CoreExceptionTypes.FATAL, "break exists without a loop");
			}
			break;

		case PostFinallyBehavior.CONTINUE:
			ExecutionContext$ec.activeException = null;
			int1 = $_array_get(row, 2);
			if (int1 == 1) {
				pc += $_array_get(row, 3);
			} else if (int1 == 2) {
				intArray1 = $_array_get(esfData, pc);
				pc = $_array_get(intArray1, 1);
			} else {
				// TODO: compile-time error
				return $_exception(CoreExceptionTypes.FATAL, "continue exists without a loop");
			}
			break;

		case PostFinallyBehavior.RETURN:
			// A lot of this is taken from the RETURN op.

			// is this the static constructor returning?
			if (StackFrame$stack.markClassAsInitialized != 0) {
				markClassAsInitialized(stack, StackFrame$stack.markClassAsInitialized);
			}

			if (StackFrame$stack.returnValueUsed) {
				valueStackSize = StackFrame$stack.valueStackPopSize;
				value = StackFrame$stack.returnValueTempStorage;
				stack = StackFrame$stack.previous;
				import inline "ValueStackCapacityCheck.cry";
				$_array_set(valueStack, valueStackSize, value);
				valueStackSize += 1;
			} else {
				// discard the return value. Set the value stack size back the way it was.
				valueStackSize = StackFrame$stack.valueStackPopSize;
				stack = StackFrame$stack.previous;
			}

			pc = StackFrame$stack.pc;
			localsStackOffset = StackFrame$stack.localsStackOffset;
			localsStackSetToken = StackFrame$stack.localsStackSetToken;

			break;
	}
} else {
	import inline "BubbleException.cry";
}
