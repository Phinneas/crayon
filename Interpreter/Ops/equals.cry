
valueStackSize -= 2;
rightValue = $_array_get(valueStack, valueStackSize + 1);
leftValue = $_array_get(valueStack, valueStackSize);

if (%%%STRONGLY_TYPED%%%) {
	bool1 = doEqualityComparisonAndReturnCode(leftValue, rightValue) == 1;
} else {
	int1 = Value$leftValue.type;

	if (int1 == Value$rightValue.type) {
		if (int1 <= Types.DICTIONARY) { // Note that this exists. Changing the ordering of types in the enum definition could ruin ==/!=
			// may have to change if a platform doesn't support == for strings
			bool1 = Value$leftValue.internalValue == Value$rightValue.internalValue;
		} else if (int1 == Types.INSTANCE) {
			objInstance1 = $_cast('ObjectInstance', Value$leftValue.internalValue);
			objInstance2 = $_cast('ObjectInstance', Value$rightValue.internalValue);
			bool1 = ObjectInstance$objInstance1.objectId == ObjectInstance$objInstance2.objectId;
		} else {
			return $_exception(CoreExceptionTypes.UNSUPPORTED_OPERATION, "== and != not defined here.");
		}
	} else {
		int2 = Value$rightValue.type;
		if ((int1 == Types.INTEGER && int2 == Types.FLOAT) || (int1 == Types.FLOAT && int2 == Types.INTEGER)) {
			bool1 = Value$leftValue.internalValue == Value$rightValue.internalValue;
		} else {
			bool1 = false;
		}
	}
}

import inline "ValueStackCapacityCheck.cry";

if (bool1 != $_force_parens($_array_get(row, 0) == 1)) {
	$_array_set(valueStack, valueStackSize, VALUE_TRUE);
} else {
	$_array_set(valueStack, valueStackSize, VALUE_FALSE);
}

valueStackSize += 1;
