// row[0] -> global name ID

value = $_array_get(valueStack, valueStackSize - 1);
nameId = $_array_get(row, 0);

switch (Value$value.type) {
	case Types.INSTANCE:
		objInstance1 = $_cast('ObjectInstance', Value$value.internalValue);
		classInfo = $_array_get(classTable, ObjectInstance$objInstance1.classId);
		intIntDict1 = ClassInfo$classInfo.globalIdToMemberId;

		// TODO: a better way to do this without double-lookup.
		if ($_dictionary_contains(intIntDict1, nameId)) {
			int1 = $_dictionary_get_guaranteed(intIntDict1, nameId);

			functionId = $_array_get(ClassInfo$classInfo.functionIds, int1);
			if (functionId == -1) {
				output = $_array_get(ObjectInstance$objInstance1.members, int1);
			} else {
				output = new Value(Types.FUNCTION, new FunctionPointer(
					FunctionPointerType.METHOD,
					value, // object instance
					ObjectInstance$objInstance1.classId,
					functionId));
			}
		} else {
			output = null;
		}
		break;

	case Types.STRING:
		if (ProgramData$p.lengthId == nameId) {
			int2 = $_string_length($_force_parens($_cast('string', Value$value.internalValue)));
			output = buildInteger(int2);
		} else {
			output = null;
		}
		break;

	case Types.LIST:
		if (ProgramData$p.lengthId == nameId) {
			if (%%%IS_PHP%%%) {
				// The harmless force_parens confuses PHP because YOU CAN'T DEREFERENCE A LIST IF IT'S IN PARENTHESIS IN PHP.
				int2 = $_list_length($_cast('List<Value>', Value$value.internalValue));
			} else {
				int2 = $_list_length($_force_parens($_cast('List<Value>', Value$value.internalValue)));
			}
			output = buildInteger(int2);
		} else {
			output = null;
		}
		break;

	case Types.DICTIONARY:
		if (ProgramData$p.lengthId == nameId) {
			dictImpl = $_cast('DictImpl', Value$value.internalValue);
			output = buildInteger(DictImpl$dictImpl.size);
		} else {
			output = null;
		}
		break;

	default:
		if (Value$value.type == Types.NULL) {
			return $_exception(CoreExceptionTypes.NULL_REFERENCE, "Derferenced a field from null.");
		}
		output = null;
		break;
}

if (output == null) {
	output = generatePrimitiveMethodReference(globalNameIdToPrimitiveMethodName, nameId, value);
	if (output == null) {
		return $_exception(
			CoreExceptionTypes.UNKNOWN_FIELD,
			$_string_concat(getTypeFromId(Value$value.type), " does not have that field."));
	}
}

$_array_set(valueStack, valueStackSize - 1, output);
