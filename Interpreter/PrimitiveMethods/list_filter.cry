
if (argCount != 1) {
	return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, primitiveMethodWrongArgCountError("list filter method", 1, argCount));
}

value2 = $_array_get(funcArgs, 0);
if (Value$value2.type != Types.FUNCTION) {
	return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "list filter method requires a function pointer as its argument.");
}

// TODO: consider checking arg length of the method pointer?
// For now it'll just error in the Core/embed.cry code

primitiveMethodToCoreLibraryFallback = true;
functionId = $_array_get(ProgramData$p.primitiveMethodFunctionIdFallbackLookup, 0); // MAGIC NUMBER: 0 (see metadata initializer)
$_array_set(funcArgs, 1, value); // funcArgs is allocated very big.
argCount = 2;

output = null; // This is required. Triggers function fallback.
