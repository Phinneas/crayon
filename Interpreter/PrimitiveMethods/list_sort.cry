
if (argCount == 0) {
	sortLists(list1, list1, intOutParam);
	if ($_array_get(intOutParam, 0) > 0) {
		return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "Invalid list to sort. All items must be numbers or all strings, but not mixed.");
	}
} else if (argCount == 1) {
	value2 = $_array_get(funcArgs, 0);
	if (Value$value2.type == Types.FUNCTION) {
		primitiveMethodToCoreLibraryFallback = true;
		functionId = $_array_get(ProgramData$p.primitiveMethodFunctionIdFallbackLookup, 2); // MAGIC NUMBER: 2 (see metadata initializer)
		$_array_set(funcArgs, 1, value); // funcArgs is allocated very big.
		argCount = 2;
	} else {
		return $_exception(CoreExceptionTypes.INVALID_ARGUMENT, "list.sort(get_key_function) requires a function pointer as its argument.");
	}
	output = null; // This is required. Triggers function fallback.
}
