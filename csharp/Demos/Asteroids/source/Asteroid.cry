SIZE_TO_RADIUS = {
	AsteroidSize.BIG: 80,
	AsteroidSize.MEDIUM: 40,
	AsteroidSize.SMALL: 20
};

SIZE_TO_VELOCITY = {
	AsteroidSize.BIG: 1,
	AsteroidSize.MEDIUM: 3,
	AsteroidSize.SMALL: 4.5
};

SIZE_TO_ROTATION_SPEED = {
	AsteroidSize.BIG: 3.14159 * 2 / 150,
	AsteroidSize.MEDIUM: 3.14159 * 2 / 80,
	AsteroidSize.SMALL: 3.14159 * 2 / 30
};

SIZE_TO_POINT_COUNT = {
	AsteroidSize.BIG: 40,
	AsteroidSize.MEDIUM: 20,
	AsteroidSize.SMALL: 10
};

SIZE_TO_BUMPS = {
	AsteroidSize.BIG: 12,
	AsteroidSize.MEDIUM: 9,
	AsteroidSize.SMALL: 6
};

POINTS_X = [];
POINTS_Y = [];

class Asteroid {
	constructor(x, y, size) {
		this.x = x;
		this.y = y;
		this.size = size;
		this.radius = SIZE_TO_RADIUS[size];
		v = SIZE_TO_VELOCITY[size];
		ang = $random() * 2 * 3.14159;
		this.angular_velocity = SIZE_TO_ROTATION_SPEED[size] * ($random() < .5 ? 1 : -1);
		this.vx = v * $cos(ang);
		this.vy = v * $sin(ang);
		this.angle = $random() * 2 * 3.14159;
		this.point_count = SIZE_TO_POINT_COUNT[this.size];
		this.bumps = SIZE_TO_BUMPS[this.size];
		this.dead = false;
	}
	
	function update() {
		this.x = (this.x + this.vx) % (0.0 + GAME_WIDTH);
		this.y = (this.y + this.vy) % (0.0 + GAME_HEIGHT);
		this.angle += this.angular_velocity;
	}
	
	function render(rc) {
		POINTS_X.clear();
		POINTS_Y.clear();
		for (i = 0; i < this.point_count; ++i) {
			a = this.angle + (3.14159 * 2 * i) / this.point_count;
			r = this.radius + 2 * $sin(this.angle + a * this.bumps);
			POINTS_X.add($floor(this.x + r * $cos(a)));
			POINTS_Y.add($floor(this.y + r * $sin(a)));
		}
		
		offsets_x = [0];
		offsets_y = [0];
		if (this.x < GAME_WIDTH / 4) {
			offsets_x.add(GAME_WIDTH);
		} else if (this.x > GAME_WIDTH * 3 / 4) {
			offsets_x.add(-GAME_WIDTH);
		}
		
		if (this.y < GAME_HEIGHT / 4) {
			offsets_y.add(GAME_HEIGHT);
		} else if (this.y > GAME_HEIGHT * 3 / 4) {
			offsets_y.add(-GAME_HEIGHT);
		}
		
		for (ox : offsets_x) {
			for (oy : offsets_y) {
		
				for (i = 0; i < this.point_count; ++i) {
					ax = POINTS_X[i] + ox;
					ay = POINTS_Y[i] + oy;
					bx = POINTS_X[(i + 1) % this.point_count] + ox;
					by = POINTS_Y[(i + 1) % this.point_count] + oy;
					$gfx_draw_line(ax, ay, bx, by, 1, 0, 255, 0, 255);
				}
			}
		}
	}
	
	function split() {
		if (this.size == AsteroidSize.SMALL) return [];
		new_angle = this.angle + 3.14159 / 2;
		new_size = this.size == AsteroidSize.MEDIUM ? AsteroidSize.SMALL : AsteroidSize.MEDIUM;
		new_x = this.x;
		new_y = this.y;
		a1 = new Asteroid(this.x, this.y, new_size);
		a2 = new Asteroid(this.x, this.y, new_size);
		angle = this.angle + 3.14159 / 2;
		a1.angle = angle;
		a2.angle = angle + 3.14159;
		return [a1, a2];
	}
	
	function collides_with_player(player) {
		dx = player.x - this.x;
		dy = player.y - this.y;
		threshhold = 10 + this.radius; // ship radius
		dist = (dx ** 2 + dy ** 2);
		return dist < threshhold ** 2;
	}
}