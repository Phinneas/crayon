class LevelStore {
	constructor() {
		this.levels = {};
		type_mapping = {
			' ': 'floor',
			'x': 'wall',
			'1': 'entrance',
			'2': 'exit',
			'f': 'fire',
			'i': 'exitsign'
		};
		
		this.levels['level-1'] = this.build_level(type_mapping, [
			"xxxxxxxxxxxxxxxxxxxx",
			"x   xxx   fx   x   x",
			"1 x   x xxxx x x x x",
			"x xxx x x    x x x x",
			"x   x x x xxxx x x x",
			"xxx x x x x    x x x",
			"xfx x x x x xxxx x x",
			"x   x     x      xfx",
			"xxxxxxxxxxx xxxxxx x",
			"x   x   x   x      x",
			"x x x x x xxxxxxxx x",
			"x x x x x    x   xxi",
			"xfx   x   xx   x   2",
			"xxxxxxxxxxxxxxxxxxxx"]);
			
		this.levels['level-2'] = this.build_level(type_mapping, [
			"xxxxxxxxxxxxi2xxxxxx",
			"x  f               x",
			"x                  x",
			"x                  x",
			"x                  x",
			"x                  x",
			"x                  x",
			"x                  x",
			"x                 fx",
			"x                  x",
			"x                  x",
			"x           f      x",
			"1                  x",
			"xxxxxxxxxxxxxxxxxxxx"]);
			
		this.levels['level-3'] = this.build_level(type_mapping, [
			"xxxxxxxxxxxxxxxxxxxx",
			"xxxxxxfxxxxxxxxxxxxx",
			"xxxxxx xfxxxxxxxxxxxx",
			"xxxxxx x xfxxxxxxxxx",
			"xxxxxx x x xfxxxxxxx",
			"xxxxxx x x x xfxxxxx",
			"xxxxxx x x x x xfxxx",
			"xxxxxx x x x x x xfx",
			"xxxxxx x x x x x x x",
			"xxxxxx x x x x x x x",
			"x                  x",
			"i xxxxxxxxxxxxxxxx x",
			"2 xxxxxxxxxxx      x",
			"xxxxxxxxxxxxx1xxxxxx"]);
				   
		this.levels['level-4'] = this.build_level(type_mapping, [
		  "xxxxxxxxxxxxxxxxxx1x",      
		  "xxxxxxxxfxxxxxxxxx x",      
		  "xxxxxxxx xxxxxxxxx x",    
		  "xxxxxxxx xxxxxxxxx x",
		  "xxxxxxxx x     xxx x",
		  "xxxxxxxx       xxx x",
		  "                   x",  
		  "                   x",                                                                                                                                                  
		  "x xxxxxx       xxxxx",
		  "x xxxxxx     x xxxxx",
		  "x xxxxxxxxxxxx xxxxx",
		  "x xxxxxxxxxxxx xxxxx",
		  "x xxxxxxxxxxxxfxxxxx",
		  "x2xxxxxxxxxxxxxxxxxx"]);
		
	}
	
	function get_fresh_grid(level) {
		output = make_grid(20, 14);
		copyThis = this.levels[level]['grid'];
		for (y = 0; y < 14; ++y) {
			for (x = 0; x < 20; ++x) {
				output[x][y] = new Tile(copyThis[x][y], x, y);
			}
		}
		
		for (y = 0; y < 14; ++y) {
			for (x = 0; x < 20; ++x) {
				t = output[x][y];
				if (t.type == 'wall') {
					//has_n =
				}
			}
		}
		
		return output;
	}
	
	function get_starting_point(level) {
		return this.levels[level]['start'];
	}
	
	function get_finish(level) {
		return this.levels[level]['finish'];
	}
	
	function build_level(type_mapping, rows) {
		grid = make_grid(20, 14);
		player_start = null;
		finish = null;
		for (y = 0; y < 14; ++y) {
			for (x = 0; x < 20; ++x) {
				key = rows[y][x];
				grid[x][y] = type_mapping[key];
				if (key == '1') {
					player_start = [x, y];
				} else if (key == '2') {
					finish = [x, y];
				}
			}
		}
		
		return {
			'grid': grid,
			'start': player_start,
			'finish': finish
		};
	}
}