class SceneBase {
	constructor() {
		this._core_next = null;
		this._core_msg = ': this method needs to be overridden.';
	}
	
	function update(events) {
		$assert(false, "SceneBase.update(events)" + this._core_msg);
	}
	
	function load_images(imageLibrary) { }

	function render() {
		$assert(false, "SceneBase.render(imgLib)" + this._core_msg);
	}
	
	function switch_scene(nextScene) {
		this._core_next = nextScene;
	}
}

class CoreLoadingScene : SceneBase {
	
	constructor(files, renderer, next_scene) : base() {
		this._core_image_library = new CoreImageLibrary(files);
		this._core_next_scene = next_scene;
		this._core_renderer = renderer;
		this._screen_width = 400;
		this._screen_height = 300;
		this._counter = 0;
	}
	
	function update(events) {
		this._counter++;
		this._core_image_library.update();
		if (this._core_image_library.done) {
			this._core_image_library.finalize();
			this.switch_scene(this._core_next_scene);
		}
	}
	
	function render() {
		total = this._core_image_library.size;
		progress_ratio = total == 0 ? 1.0 : (1.0 * this._core_image_library.downloaded / total);
		
		if (this._core_renderer == null) {
			fwidth = $floor(0.8 * this._core_width);
			width = $floor(progress_ratio * fwidth);
			left = (this._core_width - fwidth) / 2;
			top = $floor(this._core_height * .46);
			height = $floor(this._core_height * .08);
			$draw_rectangle(left, top, fwidth, height, 80, 80, 80, 255);
			$draw_rectangle(left, top, width, height, 80, 80, 80, 255);
		} else {
			this._core_renderer(this._counter, progress_ratio);
		}
	}
}

class CoreImageLibrary {
	constructor(files) {
		this.image_keys = [];
		this.image_objects = [];
		
		keys = files.keys();
		for (i = 0; i < keys.length; ++i) {
			key = keys[i] + '';
			filepath = files[keys[i]] + '';
			this.image_keys.add(key);
			this.image_objects.add(null);
			$download_image(key, filepath);
		}
		
		this.downloaded = 0;
		this.size = keys.length;
		this.done = false;
	}
	
	function update() {
		for (i = 0; i < this.size; ++i) {
			if (this.image_objects[i] == null) {
				key = this.image_keys[i];
				if ($is_image_loaded(key)) {
					this.image_objects[i] = $get_image(key);
					this.downloaded++;
				}
			}
		}
		
		if (this.downloaded == this.size) {
			this.done = true;
		}
	}
	
	function finalize() {
		this._core_images = {};
		for (i = 0; i < this.size; ++i) {
			key = this.image_keys[i];
			img = this.image_objects[i];
			this._core_images[key] = img;
		}
	}

	function get_image(key) {
		return this._core_images[key];
	}
}

class Game {
	constructor(fps, width, height, pixel_width=null, pixel_height=null, allow_direct_quit=true) {
		this._core_width = width;
		this._core_height = height;
		$initialize_game(fps);
		if (pixel_width == null || pixel_height == null) {
			$initialize_screen(width, height);
		} else {
			$initialize_screen_scaled(width, height, pixel_width, pixel_height);
		}
		this._core_allow_direct_quit = allow_direct_quit;
	}

	function run(starting_scene, files=null, loading_renderer=null) {
		active_scene = new CoreLoadingScene(files, loading_renderer, starting_scene);
		active_scene._core_width = this._core_width;
		active_scene._core_height = this._core_height;
		imgLib = active_scene._core_image_library;
		while (active_scene != null) {
			events = $get_events();
			if (this._core_allow_direct_quit) {
				for (i = 0; i < events.length; ++i) {
					ev = events[i];
					if (ev[0] == 'exit') {
						return;
					}
				}
			}
			
			active_scene.update(events);
			
			$fill_screen(0, 0, 0);
			active_scene.render();
			
			if (active_scene._core_next != null) {
				next = active_scene._core_next;
				active_scene._core_next = null;
				active_scene = next;
				active_scene.load_images(imgLib);
			}
			
			$clock_tick();
		}
	}
}

