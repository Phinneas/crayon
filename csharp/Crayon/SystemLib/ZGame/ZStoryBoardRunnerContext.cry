class _ZSBRunnerContext {
	constructor(window, storyboard) {
		this.window = window;
		this.storyboard = storyboard;
		this.cache_data = [];
		this.index = 0;
		this.length = storyboard._Z_instructions.length;
		this.ticks_on_instruction = 0;
		this.total_ticks_on_instruction = 0;
		this.easing_start = null;
		this.easing_end = null;
		this.instruction = null;
		this.element = null;
		this.easing = null;
		this.ease_start = null;
		this.ease_end = null;
		this.done = false;
	}

	function run() {
		if (++this.ticks_on_instruction == 1) {
			first = true;
			this.instruction = this.storyboard._Z_instructions[this.index];
			this.easing = this.storyboard._Z_easing[this.index];
		} else {
			first = false;
		}

		instr = this.instruction[0];

		switch (instr) {
			case _ZSBCommand.BRANCH:
				this.window.add_storyboard(instr[1]);
				return this.run_next();

			case _ZSBCommand.INVOKE:
				if (this.instruction[2]) {// accepts args
					this.instruction[1](this.instruction[3]);
				} else {
					this.instruction[1]();
				}
				return this.run_next();
			
			case _ZSBCommand.OFFSET:
			case _ZSBCommand.OPACITY:
			case _ZSBCommand.SCALE:
				if (first) {
					integers_only = true;
					this.element = this.window.get_element_by_id(this.instruction[1]);
					if (this.element == null) {
						$assert(false, "Element not found: '" + this.instruction[1] + "'");
					}

					switch (instr) {
						case _ZSBCommand.OFFSET:
							start = [this.element._Z_x, this.element._Z_y];
							end = [this.instruction[2], this.instruction[3]];
							break;
						case _ZSBCommand.OPACITY:
							start = this.element._Z_opacity;
							end = this.instruction[2];
							break;
						case _ZSBCommand.SCALE:
							start = this.element._Z_scale;
							end = this.instruction[2];
							integers_only = false;
							break;
					}

					if (this.easing != null) {
						this.ease_start = start;
						this.ease_end = end;
						this.ease_function = this.easing[1];
						this.ease_frames = this.easing[2];
						this.ease_type = this.easing[0];
						this.ease_integers_only = integers_only;
					}
				}
				
				if (this.easing == null) {
					run_next = true;
				} else {
					end = _EASING_ease_impl(
						this.ease_function,
						this.ease_start,
						this.ease_end,
						this.ticks_on_instruction,
						this.ease_frames,
						this.ease_integers_only,
						this.ease_type);
					run_next = this.ticks_on_instruction >= this.ease_frames;
				}

				switch (instr) {
					case _ZSBCommand.OFFSET:
						if (end[0] != null) this.element._Z_x = end[0];
						if (end[1] != null) this.element._Z_y = end[1];
						break;
					case _ZSBCommand.OPACITY: this.element._Z_opacity = end; break;
					case _ZSBCommand.SCALE: this.element._Z_scale = end; break;
				}
				
				if (run_next) {
					return this.run_next();
				}
				break;

			case _ZSBCommand.PRINT:
				$print(this.instruction[1]);
				return this.run_next();

			case _ZSBCommand.REPEAT:
				this.index = -1;
				return this.run_next();
		}
	}

	function run_next() {
		this.ticks_on_instruction = 0;
		if (++this.index == this.length) {
			this.done = true;
			return;
		}
		this.run();
	}
}
