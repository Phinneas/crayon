
class ZElement {
	constructor(id = null) {
		this._Z_window = _Z_WINDOW_INSTANCE[0];
		if (this._Z_window == null) {
			$assert(false, "Cannot create UI elements until a window has been created.");
		}

		this._Z_id = id;
		this._Z_loaded = false;

		this._Z_parent = null;

		this._Z_is_container = false;

		this._Z_visible = true;
		this._Z_x_offset = 0;
		this._Z_y_offset = 0;
		this._Z_valignment = ZVerticalAlignment.TOP;
		this._Z_halignment = ZHorizontalAlignment.LEFT;
		this._Z_scale = 1.0;
		this._Z_rotation = null;

		this._Z_width_type = _ZBoundsType.NONE;
		this._Z_height_type = _ZBoundsType.NONE;

		this._Z_neighbors = null;

		this._Z_bounds = null;
		this._Z_zindex = 0;

		this._Z_events = null;

		this._Z_requested_width = 0;
		this._Z_requested_height = 0;

		this._Z_set_precomputed_bounds(0, 0, 0.0, 0.0);
	}

	function _Z_precompute_bounds(whwh) {
		$assert(false, "Override me.");
	}

	function _Z_set_precomputed_bounds(pix_w, pix_h, per_w, per_h) {
		this._Z_precomputed_width_pixels = $floor(pix_w);
		this._Z_precomputed_height_pixels = $floor(pix_h);
		this._Z_precomputed_width_ratio = per_w;
		this._Z_precomputed_height_ratio = per_h;
	}

	function on_load(storyboard) {
		return this._Z_push_event('on_load', storyboard);
	}

	function on_focus(storyboard) {
		return this._Z_push_event('on_focus', storyboard);
	}

	function on_unfocus(storyboard) {
		return this._Z_push_event('on_unfocus', storyboard);
	}

	function on_click(storyboard) {
		return this._Z_push_event('on_click', storyboard);
	}

	function _Z_invoke_events(type) {
		if (this._Z_events != null) {
			events = this._Z_events.get(type, null);
			if (events != null) {
				this._Z_window.add_storyboards(events);
			}
		}
	}

	function _Z_push_event(type, storyboard) {
		if (this._Z_events == null) {
			this._Z_events = {};
		}
		list = this._Z_events.get(type, null);
		if (list == null) {
			list = [];
			this._Z_events[type] = list;
		}
		list.add(storyboard);
		return this;
	}
	
	function _Z_update() {
		if (!this._Z_loaded) {
			if (this._Z_events != null) {
				events = this._Z_events.get('on_load', null);
				if (events != null) {
					this._Z_window.add_storyboards(events);
				}
			}
			this._Z_loaded = true;
		}

		if (this._Z_is_container) {
			for (element : this._Z_children) {
				element._Z_update();
			}
		}
	}

	function clear_width() {
		this._Z_width_type = _ZBoundsType.NONE;
		return this;
	}
	
	function set_width_pixels(width) {
		this._Z_width_type = _ZBoundsType.PIXELS;
		this._Z_width = width;
		return this;
	}

	function set_width_pecentage(width) {
		this._Z_width_type = _ZBoundsType.RATIO;
		this._Z_width = width;
		return this;
	}

	function clear_height() {
		this._Z_height_type = _ZBoundsType.NONE;
		return this;
	}

	function set_height_pixels(height) {
		this._Z_height_type = _ZBoundsType.PIXELS;
		this._Z_height = height;
		return this;
	}

	function set_height_pecentage(height) {
		this._Z_height_type = _ZBoundsType.RATIO;
		this._Z_height = height;
		return this;
	}

	function set_size_percentage(width, height) {
		this._Z_width_type = _ZBoundsType.RATIO;
		this._Z_height_type = _ZBoundsType.RATIO;
		this._Z_width = width / 100.0;
		this._Z_height = height / 100.0;
		return this;
	}

	function set_vertical_alignment(alignment) {
		this._Z_valignment = alignment;
		return this;
	}

	function set_horizontal_alignment(alignment) {
		this._Z_halignment = alignment;
		return this;
	}

	function set_neighbor_north(element) {
		return this._Z_set_neighbor(element, 1);
	}

	function set_neighbor_south(element) {
		return this._Z_set_neighbor(element, 3);
	}

	function set_neighbor_east(element) {
		return this._Z_set_neighbor(element, 2);
	}

	function set_neighbor_west(element) {
		return this._Z_set_neighbor(element, 0);
	}

	function _Z_set_neighbor(element, index) {
		if (this._Z_neighbors == null) this._Z_neighbors = [null] * 4;
		this._Z_neighbors[index] = element;
		return this;
	}

	// Panels will pass in the top left coordinate of where this should be rendered.
	// This coordinate already takes into account the alignment and reported width/height properties of the element.
	function render(left, top, width, height) {
		$assert(false, "ZElement.render(left, right) has no default implementation and must be overridden.");
	}
}
