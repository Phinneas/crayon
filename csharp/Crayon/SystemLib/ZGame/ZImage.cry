class ZImage : ZElement {
	constructor(id = null) : base(id) {
		this._Z_image = null;
		this._Z_reported_width = 0;
		this._Z_reported_height = 0;
	}

	function _Z_precompute_bounds() {
		if (this._Z_image == null) {
			this._Z_set_precomputed_bounds(0, 0, 0.0, 0.0);
		} else {
			switch (this._Z_width_type) {
				case _ZBoundsType.NONE:
					pix_w = this._Z_image.width;
					per_w = 0;
					break;
				case _ZBoundsType.RATIO:
					pix_w = 0;
					per_w = this._Z_width;
					break;
				case _ZBoundsType.PIXELS:
					pix_w = this._Z_width;
					per_w = 0;
					break;
			}
			switch (this._Z_height_type) {
				case _ZBoundsType.NONE:
					pix_h = this._Z_image.height;
					per_h = 0;
					break;
				case _ZBoundsType.RATIO:
					pix_h = 0;
					per_h = this._Z_height;
					break;
				case _ZBoundsType.PIXELS:
					pix_h = this._Z_height;
					per_h = 0;
					break;
			}
			this._Z_set_precomputed_bounds(pix_w, pix_h, per_w, per_h);
		}
	}

	function set_source(image) {
		if ($typeof(image) == 'string') {
			image = _Z_IMAGE_MANAGER[0].get(image);
		}
		this._Z_image = image;
		return this;
	}

	function render(left, top, width, height) {
		if (this._Z_image != null) {
			if (this._Z_scale != 1.0) {
				width = this._Z_image.width;
				height = this._Z_image.height;
				new_width = width * this._Z_scale;
				new_height = height * this._Z_scale;
				
				left = left + this._Z_x_offset + (width - new_width) / 2;
				top = top + this._Z_y_offset + (height - new_height) / 2;
				$gfx_blit_image_partial_at_scale(this._Z_image, left, top, new_width, new_height, 0, 0, width, height);
			} else {
				$gfx_blit_image(this._Z_image, left + this._Z_x_offset, top + this._Z_y_offset);
			}
		}
	}
}
