
// Many of these read functions take in an integer _pointer_ as an index. This is accomplished
// by passing in a reference to an integer array of length 1.

function generateSourceFiles() {
	@type('ProgramData') p = $_get_program_data();
	return ProgramData$p.sourceCode;
}

function read_till(@type('Array<int>') index, @type('string') raw, @type('int') length, @type('char') char) {
	@type('List<string>') output = [];
	@type('bool') ctn = true;
	while (ctn) {
		@type('char') c = $_string_char_at(raw, index[0]);
		if (c == char) {
			ctn = false;
		} else {
			$_list_push(output, c);
		}
		index[0] += 1;
	}

	return $_list_join(output, '');
}

function read_integer(@type('Array<int>') pindex, @type('string') raw, @type('int') length) {
	@type('char') c = raw[pindex[0]];
	@type('int') num = 0;
	pindex[0] += 1;
	if (c == $_string_as_char('%')) {
		@type('string') value = read_till(pindex, raw, length, '%');
		num = $_string_parse_int(value);
	} else if (c == $_string_as_char('@')) {
		num = read_integer(pindex, raw, length);
		num *= 62;
		num += read_integer(pindex, raw, length);
	} else if (c == $_string_as_char('#')) {
		num = read_integer(pindex, raw, length);
		num *= 62;
		num += read_integer(pindex, raw, length);
		num *= 62;
		num += read_integer(pindex, raw, length);
	} else if (c == $_string_as_char('^')) {
		num = -1 * read_integer(pindex, raw, length);
	} else {
		num = $_string_index_of(ALPHA_NUMS, c);
		if (num == -1) {
			// TODO: assert
		}
	}
	return num;
}

function read_string(@type('Array<int>') pindex, @type('string') raw, @type('int') length) {
	@type('List<string>') output = [];
	@type('bool') cont = true;
	@type('char') c = ' ';
	while (cont) {
		c = $_string_char_at(raw, $_list_get(pindex, 0));
		$_list_set(pindex, 0, $_list_get(pindex, 0) + 1);
		if (c == $_string_as_char('@')) {
			@type('int') repeat = read_integer(pindex, raw, length);
			@type('string') last = $_list_get(output, $_list_length(output) - 1);
			while (repeat > 0) {
				$_list_push(output, last);
				repeat -= 1;
			}
		} else if (c == $_string_as_char('~')) {
			@type('int') d1 = read_integer(pindex, raw, length);
			@type('int') d2 = read_integer(pindex, raw, length);
			@type('int') charcode = d1 * 62 + d2;
			$_list_push(output, $_string_from_code(charcode));
		} else if (c == $_string_as_char('`')) {
			@type('int') d1 = read_integer(pindex, raw, length);
			@type('int') d2 = read_integer(pindex, raw, length);
			@type('int') d3 = read_integer(pindex, raw, length);
			@type('int') d4 = read_integer(pindex, raw, length);
			@type('int') charcode = ((d1 * 62 + d2) * 62 + d3) * 62 + d4;
			$_list_push(output, $_string_from_code(charcode));
		} else if (c == $_string_as_char('%')) {
			cont = false;
		} else {
			$_list_push(output, c);
		}
	}
	return $_list_join(output, '');
}

function loadByteCode() {
	@type('string') raw = $_get_raw_byte_code_string();

	@type('Array<int>') index = [0];
	length = $_string_length(raw);

	@type('string') header = read_till(index, raw, length, '@');
	if (header != 'CRAYON') {
		// TODO: assert
	}

	@type('int') opCount = read_integer(index, raw, length);

	ops = [];
	iargs = [];
	sargs = [];
	@type('char') c = ' ';
	@type('int') argc = 0;
	for (@type('int') i = 0; i < opCount; i += 1) {
		c = $_string_char_at(raw, index[0]);
		index[0] += 1;
		argc = 0;
		stringPresent = true;
		if (c == $_string_as_char('!')) argc = 1;
		else if (c == $_string_as_char('&')) argc = 2;
		else if (c == $_string_as_char('*')) argc = 3;
		else {
			if (c != $_string_as_char('~')) {
				stringPresent = false;
				$_list_set(index, 0, $_list_get(index, 0) - 1);
			}
			argc = read_integer(index, raw, length);
		}

		iarglist = [];
		for (j = 0; j < argc; j += 1) {
			iarg = read_integer(index, raw, length);
			if (j == 0) {
				$_list_push(ops, iarg);
			} else {
				$_list_push(iarglist, iarg);
			}
		}
		$_list_push(iargs, iarglist);
		if (stringPresent) {
			stringarg = read_string(index, raw, length);
		} else {
			stringarg = null;
		}
		$_list_push(sargs, stringarg);
	}
	
	return new Code(ops, iargs, sargs);
}
