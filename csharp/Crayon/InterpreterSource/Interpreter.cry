
function @type('string') interpret(
		@type('StackFrame') stack,
		@type('Array<int>') ops,
		@type('Array<Array<int>>') args,
		@type('Array<string>') stringArgs, 
		@type('Array<string>') identifiers, 
		@type('Dictionary<string, int>') inv_identifiers, 
		literalTable, 
		classTable, 
		classMethods, 
		specialCache, 
		globals) {
	@type('Stack<Value>') valueStack = StackFrame$stack.valueStack;
	@type('Dictionary<int, Value>') locals = StackFrame$stack.locals;
	@type('int') LENGTH_ID = $_dictionary_get(inv_identifiers, 'length', -999);
	@type('ProgramData') p = $_get_program_data();

	// declare types...
	@type('int') type = 0;
	@type('int') nameId = 0;
	@type('int') classId = 0;
	@type('Array<int>') classData = null;
	@type('int') len = 0;
	@type('Value') root = null;
	@type('Array<int>') row = null;
	@type('int') pc = 0;
	@type('int') argCount = 0;
	@type('List<Value>') funcArgs = null;
	@type('bool') returnValueUsed = false;
	@type('Value') output = null;

	@type('int') int1 = 0;
	@type('int') i = 0;
	@type('double') float1 = 3.14;
	@type('Value') value = null;
	@type('Value') value2 = null;
	@type('string') string1 = null;
	@type('List<Value>') list1 = null;

	// binary op variables...
	@type('int') op = 0;
	@type('Value') leftValue = null;
	@type('Value') rightValue = null;
	@type('object') left = null;
	@type('object') right = null;
	@type('int') leftType = 0;
	@type('int') rightType = 0;

	integerSwitches = ProgramData$p.integerSwitchLookups;
	stringSwitches = ProgramData$p.stringSwitchLookups;
	primitiveMethodLookup = ProgramData$p.primitiveMethodLookup;
	

	while (true) {
		row = args[StackFrame$stack.pc];
		switch (ops[StackFrame$stack.pc]) {

			case OpCodes.ADD_LITERAL:
				$_comment('ADD_LITERAL');
				type = $_list_get(row, 0);
				if (type == Types.NULL) {
					$_list_push(literalTable, VALUE_NULL);
				} else if (type == Types.BOOLEAN) {
					if (row[1] == 1) {
						$_list_push(literalTable, VALUE_TRUE);
					} else {
						$_list_push(literalTable, VALUE_FALSE);
					}
				} else if (type == Types.INTEGER) {
					$_list_push(literalTable, build_integer(row[1]));
				} else if (type == Types.FLOAT) {
					$_list_push(literalTable, new Value(Types.FLOAT, $_string_parse_float(stringArgs[StackFrame$stack.pc])));
				} else if (type == Types.STRING) {
					$_list_push(literalTable, new Value(Types.STRING, stringArgs[StackFrame$stack.pc]));
				}
				break;

			case OpCodes.ADD_NAME:
				$_comment('ADD_NAME');
				
				string1 = $_list_get(stringArgs, StackFrame$stack.pc);
				
				// the list length is the ID
				int1 = $_list_length(identifiers);
				$_dictionary_set(inv_identifiers, string1, int1);
				$_list_push(identifiers, string1);
				if (string1 == 'length') {
					LENGTH_ID = int1;
				}
				break;

			case OpCodes.ASSIGN_FUNCTION_ARG:
				$_comment('ASSIGN_FUNCTION_ARG');
				nameId = $_list_get(row, 0);
				i = $_list_get(row, 1);
				if (i >= $_array_length(StackFrame$stack.args)) {
					// pass in previous stack so that it's pointing at the spot where you invoke the function.
					return killExecution(StackFrame$stack.previous, "Not enough arguments supplied.");
				}
				value = $_list_get(StackFrame$stack.args, row[1]);
				$_dictionary_set(locals, nameId, value);
				break;

			case OpCodes.ASSIGN_FUNCTION_ARG_AND_JUMP:
				$_comment('ASSIGN_FUNCTION_ARG_AND_JUMP');
				nameId = $_list_get(row, 0);
				i = $_list_get(row, 1);
				if (i < $_array_length(StackFrame$stack.args)) {
					value = $_list_get(StackFrame$stack.args, i);
					$_dictionary_set(locals, nameId, value);
					StackFrame$stack.pc += $_list_get(row, 2);
				}
				break;

			case OpCodes.ASSIGN_INDEX:
				$_comment('ASSIGN_INDEX');
				value = $_stack_pop(valueStack);
				value2 = $_stack_pop(valueStack); // index
				root = $_stack_pop(valueStack);
				type = Value$root.type;
				if (type == Types.LIST) {
					if (Value$value2.type == Types.INTEGER) {
						i = $_cast('int', Value$value2.internalValue);
						list1 = $_cast('List<Value>', Value$root.internalValue);
						if (i < 0) {
							return killExecution(stack, "Index must be non-negative.");
						} else if (i >= $_list_length(list1)) {
							return killExecution(stack, "Index is out of range.");
						} else {
							$_list_set(list1, i, value);
						}
					} else {
						return killExecution(stack, "List index must be an integer.");
					}
				} else if (type == Types.DICTIONARY) {
					nativeKeyType = Value$value2.type;
					if (nativeKeyType == Types.INTEGER) {
						nativeKey = Value$value2.internalValue;
					} else if (nativeKeyType == Types.STRING) {
						nativeKey = Value$value2.internalValue;
					} else if (nativeKeyType == Types.INSTANCE) {
						nativeKey = $_list_get(Value$value2.internalValue, 2); // object ID
					} else {
						return killExecution(stack, "Invalid key for a dictionary.");
					}

					dictImpl = Value$root.internalValue;
					nonEmpty = DictImpl$dictImpl.size > 0;
					if (nonEmpty && DictImpl$dictImpl.keyType != nativeKeyType) {
						return killExecution(stack, "Cannot have multiple keys in one dictionary with different types.");
					}
					if (!$_dictionary_contains(DictImpl$dictImpl.keyLookup, nativeKey)) {
						$_dictionary_set(DictImpl$dictImpl.keyLookup, nativeKey, value2);
						DictImpl$dictImpl.size += 1;
						if (!nonEmpty) {
							DictImpl$dictImpl.keyType = nativeKeyType;
						}
					}
					$_dictionary_set(DictImpl$dictImpl.valueLookup, nativeKey, value);
				} else {
					return killExecution(stack, getTypeFromId(type) + " type does not support indexing");
				}
				break;

			case OpCodes.ASSIGN_STEP:
				$_comment('ASSIGN_STEP');
				value = $_stack_pop(valueStack);
				value2 = $_stack_pop(valueStack); // target root
				nameId = $_list_get(row, 0);
				if (Value$value2.type == Types.INSTANCE) {
					dict = $_list_get(Value$value2.internalValue, 1);
					$_dictionary_set(dict, nameId, value);
				} else {
					killExecution(stack, "Cannot assign to a field on this type.");
				}
				break;
				
			case OpCodes.ASSIGN_THIS_STEP:
				$_comment('ASSIGN_THIS_STEP');
				value2 = StackFrame$stack.objectContext; // value2 will never be null because that is a compile error.
				// TODO: prevent assignment to methods
				value = $_stack_pop(valueStack);
				nameId = $_list_get(row, 0);
				dict = $_list_get(Value$value2.internalValue, 1);
				$_dictionary_set(dict, nameId, value);
				break;

			case OpCodes.ASSIGN_VAR:
				$_comment('ASSIGN_VAR');
				value = $_stack_pop(valueStack);
				$_dictionary_set(locals, row[0], value);
				break;

			case OpCodes.BINARY_OP:
				$_comment('BINARY_OP');
				rightValue = $_stack_pop(valueStack);
				leftValue = $_stack_pop(valueStack);

				leftType = Value$leftValue.type;
				rightType = Value$rightValue.type;
				
				left = Value$leftValue.internalValue;
				right = Value$rightValue.internalValue;
				
				// TODO: special switch for when left == right
				op = $_list_get(row, 0);
				value = null;
				if (op == BinaryOps.EQUALS || op == BinaryOps.NOT_EQUALS) {
					// TODO: replace this with a platform code import
					if (leftType == rightType) {
						if (leftType <= Types.DICTIONARY) { // Note that this exists. Changing the ordering of types in the enum definition could ruin ==/!=
							if (left == right) { // may have to change if a platform doesn't support == for strings
								value = VALUE_TRUE;
							} else {
								value = VALUE_FALSE;
							}
						} else if (leftType == Types.INSTANCE) {
							if ($_list_get(left, 2) == $_list_get(right, 2)) {
								value = VALUE_TRUE;
							} else {
								value = VALUE_FALSE;
							}
						}
					} else {
						if ((leftType == Types.INTEGER && rightType == Types.FLOAT) || (leftType == Types.FLOAT && rightType == Types.INTEGER)) {
							if (left == right) {
								value = VALUE_TRUE;
							} else {
								value = VALUE_FALSE;
							}
						} else {
							value = VALUE_FALSE;
						}
					}
					
					if (value != null) {
						if (op == BinaryOps.NOT_EQUALS) {
							if ($_cast('bool', Value$value.internalValue)) {
								value = VALUE_FALSE;
							} else {
								value = VALUE_TRUE;
							}
						}
					} else {
						return killExecution(stack, "== and != not defined here yet.");
					}
				} else if ((leftType == Types.STRING || rightType == Types.STRING) && op == BinaryOps.ADDITION && leftType != Types.NULL && rightType != Types.NULL) {
					value = new Value(Types.STRING, valueToString(leftValue) + valueToString(rightValue));
				} else {
					switch
						{((MAX_TYPE * MAX_OP + MAX_OP) * MAX_TYPE + MAX_TYPE)} // maximum possible value
						((((Value$leftValue.type * MAX_OP) + op) * MAX_TYPE) + Value$rightValue.type) {
						
						// int ** int
						case (Types.INTEGER * MAX_OP + BinaryOps.EXPONENT) * MAX_TYPE + Types.INTEGER:
							$_comment('int ** int');
							if ($_cast('int', right) == 0) value = INTEGERS_CACHE[0][1];
							else if ($_cast('int', right) > 0)
								value = build_integer($_int($_exponent($_cast('int', left), $_cast('int', right))));
							else
								value = new Value(Types.FLOAT, $_exponent($_cast('int', left), $_cast('int', right)));
							break;

						// int ** float
						case (Types.INTEGER * MAX_OP + BinaryOps.EXPONENT) * MAX_TYPE + Types.FLOAT:
							$_comment('int ** float');
							value = new Value(Types.FLOAT, 0.0 + $_exponent($_cast('int', left), $_cast('double', right)));
							break;

						// float ** int
						case (Types.FLOAT * MAX_OP + BinaryOps.EXPONENT) * MAX_TYPE + Types.INTEGER:
							$_comment('float ** int');
							// add 0.0 just in case underlying platform likes to fall back to integer when possible
							value = new Value(Types.FLOAT, 0.0 + $_exponent($_cast('double', left), $_cast('int', right)));
							break;

						// float ** float
						case (Types.FLOAT * MAX_OP + BinaryOps.EXPONENT) * MAX_TYPE + Types.FLOAT:
							$_comment('float ** float');
							value = new Value(Types.FLOAT, 0.0 + $_exponent($_cast('double', left), $_cast('double', right)));
							break;
						
						// float % float
						case (Types.FLOAT * MAX_OP + BinaryOps.MODULO) * MAX_TYPE + Types.FLOAT:
							$_comment('float % float');
							if ($_cast('double', right) == 0) return killExecution(stack, "Modulo by 0");
							float1 = $_cast('double', left) % $_cast('double', right);
							if (float1 < 0) float1 += $_cast('double', right);
							value = new Value(Types.FLOAT, float1);
							break;

						// int % int
						case (Types.INTEGER * MAX_OP + BinaryOps.MODULO) * MAX_TYPE + Types.INTEGER:
							$_comment('int % int');
							if ($_cast('int', right) == 0) return killExecution(stack, "Modulo by 0");
							int1 = $_cast('int', left) % $_cast('int', right);
							if (int1 < 0) int1 += $_cast('int', right);
							value = build_integer(int1);
							break;

						// list + list
						case (Types.LIST * MAX_OP + BinaryOps.ADDITION) * MAX_TYPE + Types.LIST:
							$_comment('list + list');
							value = new Value(Types.LIST, $_list_concat($_cast('List<Value>', left), $_cast('List<Value>', right))); break;

						// int + int
						case (Types.INTEGER * MAX_OP + BinaryOps.ADDITION) * MAX_TYPE + Types.INTEGER:
							$_comment('int + int');
							value = build_integer($_cast('int', left) + $_cast('int', right)); break;

						// float + int
						case (Types.FLOAT * MAX_OP + BinaryOps.ADDITION) * MAX_TYPE + Types.INTEGER:
							$_comment('float + int');
							value = new Value(Types.FLOAT, $_cast('double', left) + $_cast('int', right)); break;

						// int + float
						case (Types.INTEGER * MAX_OP + BinaryOps.ADDITION) * MAX_TYPE + Types.FLOAT:
							$_comment('int + float');
							value = new Value(Types.FLOAT, $_cast('int', left) + $_cast('double', right)); break;

						// float + float
						case (Types.FLOAT * MAX_OP + BinaryOps.ADDITION) * MAX_TYPE + Types.FLOAT:
							$_comment('float + float');
							value = new Value(Types.FLOAT, $_cast('double', left) + $_cast('double', right)); break;
							
						// int - int
						case (Types.INTEGER * MAX_OP + BinaryOps.SUBTRACTION) * MAX_TYPE + Types.INTEGER:
							$_comment('int - int');
							value = build_integer($_cast('int', left) - $_cast('int', right)); break;
							
						// int - float
						case (Types.INTEGER * MAX_OP + BinaryOps.SUBTRACTION) * MAX_TYPE + Types.FLOAT:
							$_comment('int - float');
							value = new Value(Types.FLOAT, $_cast('int', left) - $_cast('double', right)); break;
							
						// float - int
						case (Types.FLOAT * MAX_OP + BinaryOps.SUBTRACTION) * MAX_TYPE + Types.INTEGER:
							$_comment('float - int');
							value = new Value(Types.FLOAT, $_cast('double', left) - $_cast('int', right)); break;
							
						// float - float
						case (Types.FLOAT * MAX_OP + BinaryOps.SUBTRACTION) * MAX_TYPE + Types.FLOAT:
							$_comment('float - float');
							value = new Value(Types.FLOAT, $_cast('double', left) - $_cast('double', right)); break;

						// int * int
						case (Types.INTEGER * MAX_OP + BinaryOps.MULTIPLICATION) * MAX_TYPE + Types.INTEGER:
							$_comment('int * int');
							value = build_integer($_cast('int', left) * $_cast('int', right)); break;

						// float * int
						case (Types.FLOAT * MAX_OP + BinaryOps.MULTIPLICATION) * MAX_TYPE + Types.INTEGER:
							$_comment('float * int');
							value = new Value(Types.FLOAT, $_cast('double', left) * $_cast('int', right)); break;

						// int * float
						case (Types.INTEGER * MAX_OP + BinaryOps.MULTIPLICATION) * MAX_TYPE + Types.FLOAT:
							$_comment('int * float');
							value = new Value(Types.FLOAT, $_cast('int', left) * $_cast('double', right)); break;

						// float * float
						case (Types.FLOAT * MAX_OP + BinaryOps.MULTIPLICATION) * MAX_TYPE + Types.FLOAT:
							$_comment('float * float');
							value = new Value(Types.FLOAT, $_cast('double', left) * $_cast('double', right)); break;
							
						// int / int
						case (Types.INTEGER * MAX_OP + BinaryOps.DIVISION) * MAX_TYPE + Types.INTEGER:
							$_comment('int / int');
							if ($_cast('int', right) == 0) return killExecution(stack, "Division by 0");
							value = build_integer($_unsafe_integer_division($_cast('int', left), $_cast('int', right))); break;
							
						// int / float
						case (Types.INTEGER * MAX_OP + BinaryOps.DIVISION) * MAX_TYPE + Types.FLOAT:
							$_comment('int / float');
							if ($_cast('double', right) == 0) return killExecution(stack, "Division by 0");
							value = new Value(Types.FLOAT, $_unsafe_float_division($_cast('int', left), $_cast('double', right))); break;

						// float / int
						case (Types.FLOAT * MAX_OP + BinaryOps.DIVISION) * MAX_TYPE + Types.INTEGER:
							$_comment('float / int');
							if ($_cast('int', right) == 0) return killExecution(stack, "Division by 0"); 
							value = new Value(Types.FLOAT, $_unsafe_float_division($_cast('double', left), $_cast('int', right))); break;

						// float / float
						case (Types.FLOAT * MAX_OP + BinaryOps.DIVISION) * MAX_TYPE + Types.FLOAT:
							$_comment('float / float');
							if ($_cast('double', right) == 0) return killExecution(stack, "Division by 0"); 
							value = new Value(Types.FLOAT, $_unsafe_float_division($_cast('double', left), $_cast('double', right))); break;

						// int < int
						case (Types.INTEGER * MAX_OP + BinaryOps.LESS_THAN) * MAX_TYPE + Types.INTEGER:
							$_comment('int < int');
							if ($_cast('int', left) < $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// int <= int
						case (Types.INTEGER * MAX_OP + BinaryOps.LESS_THAN_OR_EQUAL) * MAX_TYPE + Types.INTEGER:
							$_comment('int <= int');
							if ($_cast('int', left) <= $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;
							
						// float < int
						case (Types.FLOAT * MAX_OP + BinaryOps.LESS_THAN) * MAX_TYPE + Types.INTEGER:
							$_comment('float < int');
							if ($_cast('double', left) < $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float <= int
						case (Types.FLOAT * MAX_OP + BinaryOps.LESS_THAN_OR_EQUAL) * MAX_TYPE + Types.INTEGER:
							$_comment('float <= int');
							if ($_cast('double', left) <= $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;
							
						// int < float
						case (Types.INTEGER * MAX_OP + BinaryOps.LESS_THAN) * MAX_TYPE + Types.FLOAT:
							$_comment('int < float');
							if ($_cast('int', left) < $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// int <= float
						case (Types.INTEGER * MAX_OP + BinaryOps.LESS_THAN_OR_EQUAL) * MAX_TYPE + Types.FLOAT:
							$_comment('int <= float');
							if ($_cast('int', left) <= $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float < float
						case (Types.FLOAT * MAX_OP + BinaryOps.LESS_THAN) * MAX_TYPE + Types.FLOAT:
							$_comment('float < float');
							if ($_cast('double', left) < $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float <= float
						case (Types.FLOAT * MAX_OP + BinaryOps.LESS_THAN_OR_EQUAL) * MAX_TYPE + Types.FLOAT:
							$_comment('float <= float');
							if ($_cast('double', left) <= $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// int >= int
						case (Types.INTEGER * MAX_OP + BinaryOps.GREATER_THAN_OR_EQUAL) * MAX_TYPE + Types.INTEGER:
							$_comment('int >= int');
							if ($_cast('int', left) >= $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// int > int
						case (Types.INTEGER * MAX_OP + BinaryOps.GREATER_THAN) * MAX_TYPE + Types.INTEGER:
							$_comment('int > int');
							if ($_cast('int', left) > $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float >= int
						case (Types.FLOAT * MAX_OP + BinaryOps.GREATER_THAN_OR_EQUAL) * MAX_TYPE + Types.INTEGER:
							$_comment('float >= int');
							if ($_cast('double', left) >= $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float > int
						case (Types.FLOAT * MAX_OP + BinaryOps.GREATER_THAN) * MAX_TYPE + Types.INTEGER:
							$_comment('float > int');
							if ($_cast('double', left) >= $_cast('int', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// int >= float
						case (Types.INTEGER * MAX_OP + BinaryOps.GREATER_THAN_OR_EQUAL) * MAX_TYPE + Types.FLOAT:
							$_comment('int >= float');
							if ($_cast('int', left) >= $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// int > float
						case (Types.INTEGER * MAX_OP + BinaryOps.GREATER_THAN) * MAX_TYPE + Types.FLOAT:
							$_comment('int > float');
							if ($_cast('int', left) > $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float >= float
						case (Types.FLOAT * MAX_OP + BinaryOps.GREATER_THAN_OR_EQUAL) * MAX_TYPE + Types.FLOAT:
							$_comment('float >= float');
							if ($_cast('double', left) >= $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// float > float
						case (Types.FLOAT * MAX_OP + BinaryOps.GREATER_THAN) * MAX_TYPE + Types.FLOAT:
							$_comment('float > float');
							if ($_cast('double', left) > $_cast('double', right)) value = VALUE_TRUE; else value = VALUE_FALSE; break;

						// list * int
						case (Types.LIST * MAX_OP + BinaryOps.MULTIPLICATION) * MAX_TYPE + Types.INTEGER:
							$_comment('list * int');
							list1 = $_new_list('Value');
							while (right > 0) {
								$_list_push(list1, left);
								right -= 1;
							}
							value = new Value(Types.LIST, list1);
							break;
							
						// int * list
						case (Types.INTEGER * MAX_OP + BinaryOps.MULTIPLICATION) * MAX_TYPE + Types.LIST:
							$_comment('int * list');
							list1 = $_new_list('Value');
							while (left > 0) {
								$_list_push(list1, right);
								left -= 1;
							}
							value = new Value(Types.LIST, list1);
							break;

						default:
							$_comment('unrecognized op');
							return killExecution(stack, "The '" + getBinaryOpFromId($_list_get(row, 0)) + "' operator is not supported for these types: " + getTypeFromId(Value$leftValue.type) + " and " + getTypeFromId(Value$rightValue.type));
							break;
					}
				}

				$_stack_push(valueStack, value);
				break;

			case OpCodes.BOOLEAN_NOT:
				$_comment('BOOLEAN_NOT');
				value = $_stack_pop(valueStack);
				if (Value$value.type != Types.BOOLEAN) return killExecution(stack, "Boolean expected.");
				if ($_cast('bool', Value$value.internalValue)) {
					$_stack_push(valueStack, VALUE_FALSE);
				} else {
					$_stack_push(valueStack, VALUE_TRUE);
				}
				break;

			case OpCodes.BUILD_SWITCH_INT:
				$_comment('BUILD_SWITCH_INT');
				integerSwitchLookup = {};
				for (i = 0; i < $_list_length(row); i += 2) {
					$_dictionary_set(integerSwitchLookup, $_list_get(row, i), $_list_get(row, i + 1));
				}
				$_list_push(ProgramData$p.integerSwitchLookups, integerSwitchLookup);
				break;

			case OpCodes.BUILD_SWITCH_STRING:
				$_comment('BUILD_SWITCH_STRING');
				allLookups = ProgramData$p.stringSwitchLookups;
				// int1 is id
				int1 = $_list_get(row, 0);
				while ($_list_length(allLookups) <= int1) {
					$_list_push(allLookups, {});
				}
				lookup = $_list_get(allLookups, int1);
				key = $_list_get(stringArgs, StackFrame$stack.pc);
				$_dictionary_set(lookup, key, $_list_get(row, 1));
				break;

			case OpCodes.CALL_BASE_CONSTRUCTOR:
				$_comment('CALL_BASE_CONSTRUCTOR');
				sc_row = $_list_get(specialCache, StackFrame$stack.pc);
				classId = $_list_get(sc_row, 0);
				classData = $_list_get(classTable, classId);
				value = StackFrame$stack.objectContext;
				
				// This is copied identically below in CALL_CONSTRUCTOR
				pc = $_list_get(classData, 1);
				argCount = $_list_get(row, 0);
				if (pc != 0) {
					funcArgs = $_new_list('Value');
					while (argCount > 0) {
						$_list_push(funcArgs, $_stack_pop(valueStack));
						argCount -= 1;
					}
					if ($_list_get(row, 0) > 1) {
						$_list_reverse_in_place(funcArgs);
					}

					valueStack = $_new_stack('Value');
					locals = $_new_dictionary('int', 'Value');
					stack = new StackFrame(pc - 1, locals, valueStack, funcArgs, stack, false, value);
				} else {
					$_stack_push(valueStack, value);
				}
				break;

			case OpCodes.CALL_CONSTRUCTOR:
				$_comment('CALL_CONSTRUCTOR');
				sc_row = $_list_get(specialCache, StackFrame$stack.pc);
				classId = $_list_get(sc_row, 0);
				ProgramData$p.instanceCounter += 1;
				value = new Value(Types.INSTANCE, [classId, $_new_dictionary('int', 'Value'), ProgramData$p.instanceCounter]);
				classData = $_list_get(classTable, classId);
				if ($_list_get(classData, 5) == 0) {
					return killExecution(stack, "This class has not been defined yet.");
				}
				pc = $_list_get(classData, 1);
				argCount = $_list_get(row, 0);
				if (pc != 0) {
					funcArgs = $_new_list('Value');
					returnValueUsed = $_list_get(row, 2) == 1;
					while (argCount > 0) {
						$_list_push(funcArgs, $_stack_pop(valueStack));
						argCount -= 1;
					}
					if ($_list_get(row, 0) > 1) {
						$_list_reverse_in_place(funcArgs);
					}

					if (returnValueUsed) {
						$_stack_push(valueStack, value);
					}

					valueStack = $_new_stack('Value');
					locals = $_new_dictionary('int', 'Value');
					stack = new StackFrame(pc - 1, locals, valueStack, funcArgs, stack, false, value);
				} else {
					$_stack_push(valueStack, value);
				}
				break;

			case OpCodes.CALL_FRAMEWORK_FUNCTION:
				$_comment('CALL_FRAMEWORK_FUNCTION');
				// TODO: the types for these values must be verified.
				// The arg count is verified to be in the correct range at compile time.
				// However if there are optional arguments, the number of args used in this call are located in row[2]
				output = VALUE_NULL;
				switch (row[0]) {
					case %%%FF_ABS%%%:
						value = $_stack_pop(valueStack);
						if (Value$value.type == Types.INTEGER) {
							if ($_cast('int', Value$value.internalValue) < 0) {
								output = build_integer(-$_cast('int', Value$value.internalValue));
							} else {
								output = value;
							}
						} else if (Value$value.type == Types.FLOAT) {
							if ($_cast('double', Value$value.internalValue) < 0) {
								output = new Value(Types.FLOAT, -$_cast('double', Value$value.internalValue));
							} else {
								output = value;
							}
						} else {
							return killExecution(stack, "$abs requires a number as input.");
						}
						break;

					case %%%FF_ARCTAN2%%%:
						x = $_stack_pop(valueStack);
						y = $_stack_pop(valueStack);
						$_insert_platform_code('ff_arctan2');
						break;

					case %%%FF_ASSERT%%%:
						msg = $_stack_pop(valueStack);
						value = $_stack_pop(valueStack);
						if (Value$value.type != Types.BOOLEAN || !$_cast('bool', Value$value.internalValue)) {
							return killExecution(stack, "Assertion failed: " + valueToString(msg));
						}
						break;

					case %%%FF_BLIT_IMAGE%%%:
						y = $_stack_pop(valueStack);
						x = $_stack_pop(valueStack);
						image = $_stack_pop(valueStack);
						$_insert_platform_code('ff_blit_image');
						break;
						
					case %%%FF_CLOCK_TICK%%%:
						ProgramData$p.stackTop = stack;
						StackFrame$stack.pc += 1;
						return null;
						// this extra break is not a mistake. Python translation will get confused without the break here. Ultimately I plan to make this smart enough that it'll figure it out, but it's not a high priority.
						break;

					case %%%FF_COS%%%:
						x = $_stack_pop(valueStack);
						$_insert_platform_code('ff_cos');
						break;

					case %%%FF_CURRENT_TIME%%%:
						$_insert_platform_code('ff_current_time');
						break;
						
					case %%%FF_DOWNLOAD_IMAGE%%%:
						url = $_stack_pop(valueStack);
						key = $_stack_pop(valueStack);
						$_insert_platform_code('ff_download_image');
						break;

					case %%%FF_DRAW_ELLIPSE%%%:
						alpha = $_stack_pop(valueStack);
						blue = $_stack_pop(valueStack);
						green = $_stack_pop(valueStack);
						red = $_stack_pop(valueStack);
						height = $_stack_pop(valueStack);
						width = $_stack_pop(valueStack);
						top = $_stack_pop(valueStack);
						left = $_stack_pop(valueStack);
						$_insert_platform_code('ff_draw_ellipse');
						break;

					case %%%FF_DRAW_LINE%%%:
						alpha = $_stack_pop(valueStack);
						blue = $_stack_pop(valueStack);
						green = $_stack_pop(valueStack);
						red = $_stack_pop(valueStack);
						width = $_stack_pop(valueStack);
						y2 = $_stack_pop(valueStack);
						x2 = $_stack_pop(valueStack);
						y1 = $_stack_pop(valueStack);
						x1 = $_stack_pop(valueStack);
						$_insert_platform_code('ff_draw_line');
						break;

					case %%%FF_DRAW_RECTANGLE%%%:
						alpha = $_stack_pop(valueStack);
						blue = $_stack_pop(valueStack);
						green = $_stack_pop(valueStack);
						red = $_stack_pop(valueStack);
						height = $_stack_pop(valueStack);
						width = $_stack_pop(valueStack);
						y = $_stack_pop(valueStack);
						x = $_stack_pop(valueStack);
						$_insert_platform_code('ff_draw_rectangle');
						break;

					case %%%FF_FILL_SCREEN%%%:
						blue = $_stack_pop(valueStack);
						green = $_stack_pop(valueStack);
						red = $_stack_pop(valueStack);
						$_insert_platform_code('ff_fill_screen');
						break;
						
					case %%%FF_FLIP_IMAGE%%%:
						y = $_stack_pop(valueStack);
						x = $_stack_pop(valueStack);
						img = $_stack_pop(valueStack);
						$_insert_platform_code('ff_flip_image');
						break;

					case %%%FF_FLOOR%%%:
						value = $_stack_pop(valueStack);
						$_insert_platform_code('ff_floor');
						break;

					case %%%FF_GET_EVENTS%%%:
						$_insert_platform_code('ff_get_events');
						break;
						
					case %%%FF_GET_IMAGE%%%:
						key = $_stack_pop(valueStack);
						$_insert_platform_code('ff_get_image');
						break;
						
					case %%%FF_GET_IMAGE_HEIGHT%%%:
						value = $_stack_pop(valueStack);
						$_insert_platform_code('ff_get_image_height');
						break;

					case %%%FF_GET_IMAGE_WIDTH%%%:
						value = $_stack_pop(valueStack);
						$_insert_platform_code('ff_get_image_width');
						break;

					case %%%FF_INITIALIZE_GAME%%%: 
						fps = $_stack_pop(valueStack);
						$_insert_platform_code('ff_initialize_game');
						break;
						
					case %%%FF_INITIALIZE_SCREEN%%%:
						height = $_stack_pop(valueStack);
						width = $_stack_pop(valueStack);
						$_insert_platform_code('ff_initialize_screen');
						break;
						
					case %%%FF_INITIALIZE_SCREEN_SCALED%%%:
						pheight = $_stack_pop(valueStack);
						pwidth = $_stack_pop(valueStack);
						height = $_stack_pop(valueStack);
						width = $_stack_pop(valueStack);
						$_insert_platform_code('ff_initialize_screen_scaled');
						break;
						
					case %%%FF_IS_IMAGE_LOADED%%%:
						key = $_stack_pop(valueStack);
						$_insert_platform_code('ff_is_image_loaded');
						break;

					case %%%FF_PARSE_INT%%%:
						value = $_stack_pop(valueStack);
						$_insert_platform_code('ff_parse_int');
						break;

					case %%%FF_PRINT%%%: 
						value = $_stack_pop(valueStack);
						string1 = valueToString(value);
						$_insert_platform_code('ff_print'); 
						break;
					case %%%FF_RANDOM%%%:
						$_insert_platform_code('ff_random');
						break;
					case %%%FF_SET_TITLE%%%:
						value = $_stack_pop(valueStack);
						value = valueToString(value);
						$_insert_platform_code('ff_set_title');
						break;

					case %%%FF_SIN%%%:
						x = $_stack_pop(valueStack);
						$_insert_platform_code('ff_sin');
						break;


					case %%%FF_TYPEOF%%%:
						value = $_stack_pop(valueStack);

						switch (Value$value.type) {
							case Types.NULL: string1 = "null"; break;
							case Types.INTEGER: string1 = "integer"; break;
							case Types.FLOAT: string1 = "float"; break;
							case Types.STRING: string1 = "string"; break;
							case Types.LIST: string1 = "list"; break;
							case Types.DICTIONARY: string1 = "dictionary"; break;
							case Types.INSTANCE: string1 = "instance"; break;
							case Types.FUNCTION: string1 = "function"; break;
							case Types.METHOD: string1 = "method"; break;
							case Types.SYS_METHOD: string1 = "primitive_method"; break;
							case Types.NATIVE_OBJECT: string1 = "native_system_object"; break;
							default: string1 = "unknown_type"; break;
						}
						output = new Value(Types.STRING, string1);
						break;
					default: 
						return killExecution(stack, "Invalid framework function: " + $_string_cast_weak(row[0])); 
						break;
				}
				if (row[1] == 1) {
					$_stack_push(valueStack, output);
				}
				break;

			case OpCodes.CALL_FUNCTION:
				$_comment('CALL_FUNCTION');
				// This is mostly replicated below. Be sure to keep changes in sync.
				func = $_stack_pop(valueStack);
				funcArgs = $_new_list('Value');
				argCount = $_list_get(row, 0);
				returnValueUsed = $_list_get(row, 1) == 1;
				while (argCount > 0) {
					$_list_push(funcArgs, $_stack_pop(valueStack));
					argCount -= 1;
				}
				if ($_list_get(row, 0) > 1) {
					$_list_reverse_in_place(funcArgs);
				}
				funcType = Value$func.type;
				if (funcType == Types.SYS_METHOD) {
					sysMethod = Value$func.internalValue;
					context = $_list_get(sysMethod, 0);
					methodId = $_list_get(sysMethod, 1);
					error = callSystemMethod(methodId, context, funcArgs, valueStack, returnValueUsed);
					if (error != null) {
						return killExecution(stack, error);
					}
				} else if (funcType == Types.METHOD) {
					methodData = Value$func.internalValue;
					obj = methodData[0];
					pc = methodData[1];
					maxArgs = methodData[2];
					if (maxArgs < $_list_length(funcArgs)) {
						return killExecution(stack, "Too many args were passed in.");
					}
					valueStack = $_new_stack('Value');
					locals = $_new_dictionary('int', 'Value');
					stack = new StackFrame(pc - 1, locals, valueStack, funcArgs, stack, returnValueUsed, obj);
				} else if (funcType == Types.FUNCTION) {
					valueStack = $_new_stack('Value');
					locals = $_new_dictionary('int', 'Value');
					stack = new StackFrame(Value$func.internalValue[0], locals, valueStack, funcArgs, stack, returnValueUsed, null);
				} else {
					return killExecution(stack, "Cannot invoke " + getTypeFromId(funcType) + " like a function.");
				}
				break;

			case OpCodes.CALL_FUNCTION_ON_VARIABLE:
				$_comment('CALL_FUNCTION_ON_VARIABLE');
				// This is mostly replicated above. Be sure to keep changes in sync.
				funcArgs = $_new_list('Value');
				argCount = row[1];
				returnValueUsed = $_list_get(row, 2) == 1;
				while (argCount > 0) {
					$_list_push(funcArgs, $_stack_pop(valueStack));
					argCount -= 1;
				}
				if ($_list_get(row, 1) > 1) {
					$_list_reverse_in_place(funcArgs);
				}
				funcPointer = $_dictionary_get(locals, row[0], null);
				if (funcPointer == null) {
					funcPointer = $_dictionary_get(globals, row[0], null);
				}

				if (funcPointer != null) {
					
					type = Value$funcPointer.type;
					if (type == Types.FUNCTION) {
						valueStack = $_new_stack('Value');
						locals = $_new_dictionary('int', 'Value');
						stack = new StackFrame(Value$funcPointer.internalValue[0], locals, valueStack, funcArgs, stack, returnValueUsed, null);
					} else {
						return killExecution(stack, "Cannot invoke " + getTypeFromId(type) + " types like a function.");
					}
				} else {
					return killExecution(stack, "That function is not defined: '" + identifiers[row[0]] + "'");
				}
				break;

			case OpCodes.CLASS_DEFINITION:
				$_comment('CLASS_DEFINITION');
				sc_row = $_list_get(specialCache, StackFrame$stack.pc);
				classId = $_list_get(sc_row, 0);
				classInfo = $_list_get(classTable, classId);
				classInfo[5] = 1;
				break;

			case OpCodes.DEF_DICTIONARY:
				$_comment('DEF_DICT');
				dictKeyLookup = {};
				dictValueLookup = {};
				size = row[0];
				keyType = Types.INTEGER; // always ignored when size is 0
				prevType = null;
				first = true;
				anticipatedSize = size;
				while (size > 0) {
					value = $_stack_pop(valueStack);
					key = $_stack_pop(valueStack);
					keyType = Value$key.type;
					if (first) prevType = keyType;
					if (!first && keyType != prevType) return killExecution(stack, "Cannot have multiple key types in one dictionary.");

					if (keyType == Types.INTEGER || keyType == Types.STRING) {
						nativeKey = Value$key.internalValue;
					} else if (keyType == Types.INSTANCE) {
						obj = Value$key.internalValue;
						objId = $_list_get(obj, 2);
						nativeKey = objId;
					} else {
						return killExecution(stack, "Only integers, strings, and objects can be used as dictionary keys.");
					}

					$_dictionary_set(dictKeyLookup, nativeKey, key);
					$_dictionary_set(dictValueLookup, nativeKey, value);

					first = false;
					size -= 1;
				}

				if ($_dictionary_size(dictKeyLookup) != anticipatedSize) {
					return killExecution(stack, "Key collision"); // TODO: do a better job of figuring out where this collision is.
				}

				dict = new Value(Types.DICTIONARY, new DictImpl(dictKeyLookup, dictValueLookup, anticipatedSize, keyType));
				$_stack_push(valueStack, dict);
				break;

			case OpCodes.DEF_LIST:
				$_comment('DEF_LIST');
				list1 = $_new_list('Value');
				size = $_list_get(row, 0);
				while (size > 0) {
					$_stack_push(list1, $_stack_pop(valueStack));
					size -= 1;
				}
				$_list_reverse_in_place(list1);
				$_stack_push(valueStack, new Value(Types.LIST, list1));
				break;

			case OpCodes.DEF_ORIGINAL_CODE:
				fileId = $_list_get(row, 0);
				content = $_list_get(ProgramData$p.stringArgs, StackFrame$stack.pc);
				codeLookup = ProgramData$p.sourceCode;
				while ($_list_length(codeLookup) <= fileId) {
					$_list_push(codeLookup, null);
				}
				$_list_set(codeLookup, fileId, content);
				break;

			case OpCodes.DEREF_DOT:
				$_comment('DEREF_DOT');
				// TODO: no caching of methods occur here because ideally, I want to create another op for dotStepInvoke which eliminates the need to instantiate the method in 99.5% of cases.
				root = $_stack_pop(valueStack);
				type = Value$root.type;
				if (type == Types.INSTANCE) {
					dict = $_list_get(Value$root.internalValue, 1);
					value = $_dictionary_get(dict, row[0], null);
					if (value == null) {
						classId = $_list_get(Value$root.internalValue, 0);
						method = $_dictionary_get($_list_get(classMethods, classId), row[0], null);
						if (method == null) {
							return killExecution(stack, "Field used before it was defined.");
						} else {
							value = new Value(Types.METHOD, [root, method[2], method[1]]); // context, pc, maxArgs
							$_dictionary_set(dict, row[0], value);
							$_stack_push(valueStack, value);
						}
					} else {
						$_stack_push(valueStack, value);
					}
				} else if (row[0] == LENGTH_ID) { // Length is a field. All other primitive type stuff is not.
					len = -1;
					if (type == Types.LIST) {
						// might need to revisit this if other platforms aren't as easy to do a list implementation?
						len = $_list_length(Value$root.internalValue);
					} else if (type == Types.DICTIONARY) {
						t = Value$root.internalValue;
						len = DictImpl$t.size;
					} else if (type == Types.STRING) {
						len = $_string_length(Value$root.internalValue);
					} else {
						return killExecution(stack, getTypeFromId(type) + " does not have a length property.");
					}

					if (len < INTEGER_POSITIVE_CACHE) {
						$_stack_push(valueStack, INTEGERS_CACHE[0][len]);
					} else {
						$_stack_push(valueStack, new Value(Types.INTEGER, len));
					}
				} else {
					// Everything else will presumably be hit 99% of the time via the DOT_STEP_INVOKE op instead of here, since they're methods. 
					// Therefore I'm not particularly concerned about optimizing the rest of this.

					primitive_method_id = $_dictionary_get(primitiveMethodLookup, $_string_cast_weak(type) + identifiers[row[0]], -1);
					if (primitive_method_id == -1) {
						return killExecution(stack, getTypeFromId(type) + " type does not have a field called '" + identifiers[row[0]] + "'.");
					} else {
						$_stack_push(valueStack, new Value(Types.SYS_METHOD, [root, primitive_method_id]));
					}
				}
				break;

			case OpCodes.DUPLICATE_STACK_TOP:
				$_comment('DUPLICATE_STACK_TOP');
				if (row[0] == 1) {
					$_stack_push(valueStack, $_list_get(valueStack, $_list_length(valueStack) - 1));
				} else {
					for (i = 0; i < row[0]; i += 1) {
						$_stack_push(valueStack, $_list_get(valueStack, $_list_length(valueStack) - row[0]));
					}
				}
				break;

			case OpCodes.FUNCTION_DEFINITION:
				$_comment('FUNCTION_DEFINITION');
				if (row[3] == 1) {
					
				} else {
					funcDef = new Value(Types.FUNCTION, 
						// PC                             Max arg count    Name ID]
						[StackFrame$stack.pc + row[1],    row[2],          identifiers[row[0]]]);
						// TODO: Struct this ^
					$_stack_push(valueStack, funcDef);
				}
				break;

			case OpCodes.INDEX:
				$_comment('INDEX');
				index = $_stack_pop(valueStack);
				root = $_stack_pop(valueStack);
				if (Value$root.type == Types.LIST) {
					if (Value$index.type != Types.INTEGER) {
						return killExecution(stack, "List index must be an integer.");
					} else {
						indexValue = Value$index.internalValue;
						listValue = Value$root.internalValue;
						if (indexValue < 0) return killExecution(stack, "List index cannot be negative.");
						else if (indexValue >= $_list_length(listValue)) return killExecution(stack, "List index is out of bounds");
						else {
							item = $_list_get(listValue, indexValue);
							$_stack_push(valueStack, item);
						}
					}
				} else if (Value$root.type == Types.DICTIONARY) {
					dictImpl = Value$root.internalValue;
					nativeKeyType = Value$index.type;
					if (nativeKeyType != DictImpl$dictImpl.keyType) {
						return killExecution(stack, "Key not found.");
					} else {
						if (nativeKeyType == Types.INTEGER) {
							nativeKey = Value$index.internalValue;
						} else if (nativeKeyType == Types.STRING) {
							nativeKey = Value$index.internalValue;
						} else if (nativeKeyType == Types.INSTANCE) {
							nativeKey = $_list_get(Value$index.internalValue, 2);
						} else {
							return killExecution(stack, "Key not found.");
						}

						value = $_dictionary_get(DictImpl$dictImpl.valueLookup, nativeKey, null);
						if (value == null) return killExecution(stack, "Key not found.");
							
						$_stack_push(valueStack, value);
					}
				} else if (Value$root.type == Types.STRING) {
					t = Value$root.internalValue;
					if (Value$index.type != Types.INTEGER) {
						return killExecution(stack, "indexes into strings must be integers.");
					}
					index = Value$index.internalValue;
					if (index < 0 || index >= $_string_length(t)) {
						return killExecution(stack, "String index out of range.");
					}
					$_stack_push(valueStack, new Value(Types.STRING, $_string_char_at(t, index)));
				} else {
					return killExecution(stack, "Cannot index into this type: " + $_string_cast_weak(Value$root.type) + ", " + $_list_get(identifiers, args[StackFrame$stack.pc - 2][0]));
				}
				break;

			case OpCodes.INDEX_INT:
				$_comment('INDEX_INT');
				return killExecution(stack, "TODO: index int");
				break;

			case OpCodes.INDEX_STRING:
				$_comment('INDEX_STRING');
				return killExecution(stack, "TODO: index string");
				break;

			case OpCodes.ITERATION_STEP:
				$_comment('ITERATION_STEP');
				stacklen = $_list_length(valueStack);
				index = $_list_get(valueStack, stacklen - 3);
				varId = $_list_get(valueStack, stacklen - 2);
				list = $_list_get(valueStack, stacklen - 1);
				index = Value$index.internalValue;
				list = Value$list.internalValue;
				varId = Value$varId.internalValue;
				listlen = $_list_length(list);
				if (index < listlen) {
					$_dictionary_set(locals, varId, $_list_get(list, index));
				} else {
					StackFrame$stack.pc += $_list_get(row, 0);
				}
				index += 1;
				$_list_set(valueStack, stacklen - 3, build_integer(index));
				break;

			case OpCodes.JUMP:
				$_comment('JUMP');
				StackFrame$stack.pc += $_list_get(row, 0);
				break;
			
			case OpCodes.JUMP_IF_FALSE:
				$_comment('JUMP_IF_FALSE');
				value = $_stack_pop(valueStack);
				if (Value$value.type != Types.BOOLEAN) {
					return killExecution(stack, "Boolean expected.");
				} else if (!Value$value.internalValue) {
					StackFrame$stack.pc += $_list_get(row, 0);
				}
				break;

			case OpCodes.JUMP_IF_FALSE_NO_POP:
				$_comment('JUMP_IF_FALSE_NON_POP');
				value = $_stack_pop(valueStack);
				if (Value$value.type != Types.BOOLEAN) {
					return killExecution(stack, "Boolean expected.");
				} else if (!Value$value.internalValue) {
					StackFrame$stack.pc += $_list_get(row, 0);
					$_stack_push(valueStack, VALUE_FALSE);
				}
				break;

			case OpCodes.JUMP_IF_TRUE:
				$_comment('JUMP_IF_TRUE');
				value = $_stack_pop(valueStack);
				if (Value$value.type != Types.BOOLEAN) {
					return killExecution(stack, "Boolean expected.");
				} else if (Value$value.internalValue) {
					StackFrame$stack.pc += $_list_get(row, 0);
				}
				break;

			case OpCodes.JUMP_IF_TRUE_NO_POP:
				$_comment('JUMP_IF_TRUE_NO_POP');
				value = $_stack_pop(valueStack);
				if (Value$value.type != Types.BOOLEAN) {
					return killExecution(stack, "Boolean expected.");
				} else if (Value$value.internalValue) {
					StackFrame$stack.pc += $_list_get(row, 0);
					$_stack_push(valueStack, VALUE_TRUE);
				}
				break;
				
			case OpCodes.LITERAL:
				$_comment('LITERAL');
				$_stack_push(valueStack, $_list_get(literalTable, $_list_get(row, 0)));
				break;

			case OpCodes.LITERAL_STREAM:
				$_comment('LITERAL_STREAM');
				for (i = $_list_length(row) - 1; i >= 0; i -= 1) {
					$_stack_push(valueStack, $_list_get(literalTable, $_list_get(row, i)));
				}
				break;

			case OpCodes.NEGATIVE_SIGN:
				$_comment('NEGATIVE_SIGN');
				value = $_stack_pop(valueStack);
				type = Value$value.type;
				if (type == Types.INTEGER) {
					value = build_integer(-$_cast('int', Value$value.internalValue));
				} else if (type == Types.FLOAT) {
					value = new Value(Types.FLOAT, -$_cast('double', Value$value.internalValue));
				} else {
					return killExecution(stack, "Negative sign can only be applied to numbers. Found " + typeToString(type) + " instead.");
				}

				$_stack_push(valueStack, value);
				break;

			case OpCodes.POP:
				$_comment('POP');
				$_stack_pop(valueStack);
				break;

			case OpCodes.RETURN:
				$_comment('RETURN');
				value = $_stack_pop(valueStack);
				bool1 = StackFrame$stack.returnValueUsed;
				stack = StackFrame$stack.previous;
				if (stack == null) {
					StackFrame$stack.pc += 1;
					return '';
				}
				valueStack = StackFrame$stack.valueStack;
				locals = StackFrame$stack.locals;
				if (bool1) {
					$_stack_push(valueStack, value);
				}
				break;
			
			case OpCodes.RETURN_NULL:
				$_comment('RETURN_NULL');
				// use return value
				bool1 = StackFrame$stack.returnValueUsed;
				stack = StackFrame$stack.previous;
				if (stack == null) {
					return '';
				}
				locals = StackFrame$stack.locals;
				valueStack = StackFrame$stack.valueStack;
				if (bool1) {
					$_stack_push(valueStack, VALUE_NULL);
				}
				break;

			case OpCodes.SWITCH_INT:
				$_comment('SWITCH_INT');
				value = $_stack_pop(valueStack);
				if (Value$value.type == Types.INTEGER) {
					key = Value$value.internalValue;
					// offset
					int1 = $_dictionary_get($_list_get(integerSwitches, $_list_get(row, 0)), key, $_list_get(row, 1));
					StackFrame$stack.pc += int1;
				} else {
					return killExecution(stack, "Switch statement expects an integer.");
				}
				break;

			case OpCodes.SWITCH_STRING:
				$_comment('SWITCH_STRING');
				value = $_stack_pop(valueStack);
				if (Value$value.type == Types.STRING) {
					key = Value$value.internalValue;
					// offset
					int1 = $_dictionary_get($_list_get(stringSwitches, $_list_get(row, 0)), key, $_list_get(row, 1));
					StackFrame$stack.pc += int1;
				} else {
					return killExecution(stack, "Switch statement expects a string.");
				}
				break;

			case OpCodes.THIS:
				$_comment('THIS');
				// will never be called outside of a method.
				$_stack_push(valueStack, StackFrame$stack.objectContext);
				break;

			case OpCodes.TOKEN_DATA:
				$_comment('TOKEN_DATA');
				tokensByPc = ProgramData$p.tokenData;
				pc = $_list_get(row, 0) + ProgramData$p.userCodeStart;
				line = $_list_get(row, 1);
				col = $_list_get(row, 2);
				file = $_list_get(row, 3);
				tokens = $_list_get(tokensByPc, pc);
				if (tokens == null) {
					tokens = $_new_array('int', 0);
					$_list_set(tokensByPc, pc, tokens);
				}
				$_list_push(tokens, new Token(line, col, file));
				break;

			case OpCodes.USER_CODE_START:
				$_comment('USER_CODE_START');
				int1 = $_list_get(row, 0);
				ProgramData$p.userCodeStart = int1;
				break;

			case OpCodes.VARIABLE:
				$_comment('VARIABLE');
				value = $_dictionary_get(locals, row[0], null);
				if (value == null) {
					value = $_dictionary_get(globals, row[0], null);
					if (value == null) {
						return killExecution(stack, "Variable not defined: " + identifiers[row[0]]);
					} else {
						$_stack_push(valueStack, value);
					}
				} else {
					$_stack_push(valueStack, value);
				}
				break;

			case OpCodes.VARIABLE_STREAM:
				$_comment('VARIABLE_STREAM');
				// TODO: trim off the token data from the args now that this is done differently.
				for (i = 0; $_list_get(row, i) != -1; i += 1) {
					value = $_dictionary_get(locals, $_list_get(row, i), null);
					if (value == null) {
						value = $_dictionary_get(globals, $_list_get(row, i), null);
					}
					if (value == null) {
						sc_row = $_list_get(specialCache, StackFrame$stack.pc);
						fakeToken = $_list_get(sc_row, i);
						return killExecutionWithTokenOverride(stack, fakeToken, "Variable not defined: " + identifiers[$_list_get(row, i)]);
					} else {
						$_stack_push(valueStack, value);
					}
				}
				break;

			case OpCodes.VERIFY_IS_LIST:
				$_comment('VERIFY_IS_LIST');
				value = $_stack_pop(valueStack);
				if (Value$value.type != Types.LIST) {
					return killExecution(stack, "Expected a list.");
				}
				$_stack_push(valueStack, value);
				break;

			default:
				$_comment('THIS SHOULD NEVER HAPPEN');
				return killExecution(stack, "Bad op code: " + $_string_cast_weak(ops[StackFrame$stack.pc]));
		}
		StackFrame$stack.pc += 1;
	}
}

function @type('string') killExecution(@type('StackFrame') stack, @type('string') message) {
	return killExecutionWithTokenOverride(stack, null, message);
}

function @type('string') killExecutionWithTokenOverride(
		@type('StackFrame') stack, 
		@type('Token') firstTokenOverride, 
		@type('string') message) {
	@type('string') fullMessage = '';
	@type('ProgramData') programData = $_get_program_data(); 
	allTokens = ProgramData$programData.tokenData;
	allFiles = generateSourceFiles();
	@type('bool') first = true;
	while (stack != null) {
		@type('int') pc = StackFrame$stack.pc;
		@type('StackFrame') stack = StackFrame$stack.previous;

		@type('Token') token = null;

		tokenlist = $_list_get(allTokens, pc);
		if (tokenlist != null) {
			token = $_list_get(tokenlist, 0);
		}
		if (first && firstTokenOverride != null) {
			token = firstTokenOverride;
		}

		if (token != null) {
			line = $_list_get(token, 0);
			col = $_list_get(token, 1);
			fileId = $_list_get(token, 2);
			if (fileId < $_list_length(allFiles)) {
				fileData = $_list_get(allFiles, fileId);
				lines = $_string_split(fileData, '\n');
				filename = lines[0];
				linevalue = lines[line + 1];
				fullMessage = filename + ", Line: " + $_string_cast_weak(line + 1) + ", Col: " + $_string_cast_weak(col + 1) + "\n" + fullMessage;
				if (first) {
					linedisplay = '';
					arrowdisplay = '';
					lefttrim = true;
					for (i = 0; i < $_string_length(linevalue); i += 1) {
						c = $_string_char_at(linevalue, i);
						if (lefttrim) {
							if (c == ' ' || c == '\t' || c == '\r') {
								col -= 1;
							} else {
								lefttrim = false;
								i -= 1;
							}
						} else {
							if (col == 0) {
								arrowdisplay += '^';
								linedisplay += c;
							} else if (c == '\t') {
								arrowdisplay += '    ';
								linedisplay += '    ';
							} else {
								arrowdisplay += ' ';
								linedisplay += c;
							}
							col -= 1;
						}
					}
					lineCopy = linevalue;

					fullMessage = fullMessage + "\n  " + message + "\n\n" + linedisplay + "\n" + arrowdisplay;
				}
			} else {
				token = null; // execution killed before file data was loaded
			}
		}

		if (token == null) {
			fullMessage = "[No Stack Info]\n" + fullMessage;
			if (first) {
				fullMessage += "[No Stack Info]\n  " + message + "\n";
			}
		}

		first = false;
		token = null;
	}
	return "Error:\n" + fullMessage;
}
