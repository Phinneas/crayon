
function @type('SoundStatus') getSoundStatus() {
	@type('ProgramData') p = $_get_program_data();
	return ProgramData$p.soundStatus;
}

function @type('bool') soundManagerUpdate() {
	@type('SoundStatus') soundStatus = getSoundStatus();
	@type('List<SoundEvent>') eventQueue = SoundStatus$soundStatus.soundEventQueue;
	if ($_list_length(eventQueue) > 0) {
		@type('List<SoundEvent>') newQueue = $_new_list('SoundEvent');
		for (@type('int') i = 0; i < $_list_length(eventQueue); i += 1) {
			@type('SoundEvent') ev = $_list_get(eventQueue, i);
			if (SoundEvent$ev.type == SoundEventType.FADE_MUSIC) {
				
			} else if (SoundEvent$ev.type == SoundEventType.PLAY_MUSIC) {
				@type('MusicInstance') music = SoundEvent$ev.music;
				$_music_play_now(MusicInstance$music.nativeObject, MusicInstance$music.realFilePath, true);
				SoundStatus$soundStatus.currentMusic = music;
			} else if (SoundEvent$ev.type == SoundEventType.PLAY_SOUND) {
				
			}
		}
		SoundStatus$soundStatus.soundEventQueue = newQueue;
	}
	return true;
}

function @type('SoundInstance') instantiateSoundInstance(
	@type('string') userpath,
	@type('object') nativeObject,
	@type('string') realpath,
	@type('bool') isLoaded) {
	return new SoundInstance(userpath, nativeObject, realpath, 1.0, isLoaded);
}

function @type('MusicInstance') instantiateMusicInstance(
	@type('string') userpath,
	@type('object') nativeObject,
	@type('string') realpath,
	@type('bool') isLoaded) {
	return new MusicInstance(userpath, nativeObject, realpath, 1.0, isLoaded);
}

function @type('int') soundManagerPlayMusic(
	@type('MusicInstance') music,
	@type('bool') loop,
	@type('double') startTime,
	@type('double') fadeIn,
	@type('double') fadeOut
) {
	// TODO: apply inputs.
	@type('SoundStatus') soundStatus = getSoundStatus();
	@type('List<SoundEvent>') eventQueue = SoundStatus$soundStatus.soundEventQueue;
	$_list_push(eventQueue, new SoundEvent(SoundEventType.PLAY_MUSIC, null, music, false, 0, 0, 0, 0, 0));
	return 0;
}