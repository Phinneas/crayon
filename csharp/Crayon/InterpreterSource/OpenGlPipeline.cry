

function @type('bool') render() {
	@type('int') i = 0;
	@type('int') length = GL_VIRTUAL_SIZE;
	while (i < length) {
		switch ($_array_get(GL_DATA, i)) {
			case OpenGlAction.DRAW_RECTANGLE:
				break;
			case OpenGlAction.DRAW_ELLIPSE:
				break;
			case OpenGlAction.DRAW_LINE:
				break;
			case OpenGlAction.DRAW_IMAGE:
				break;
			default:
				return false;
		}
		i += 16;
	}
	return true;
}

function @type('boolean') glDrawRectangle(
	@type('int') left,
	@type('int') top,
	@type('int') width,
	@type('int') height,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_RECTANGLE;
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, left);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, top);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, alpha & 255);
	GL_DATA_VIRTUAL_SIZE += 16;
	return true;
}

function @type('boolean') glDrawEllipse(
	@type('int') left,
	@type('int') top,
	@type('int') width,
	@type('int') height,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	if (width <= 2 || height <= 2)
		return glDrawRectangle(left, top, width, height, red, green, blue, alpha);

	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_ELLIPSE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, left);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, top);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, width);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, height);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, alpha & 255);
	GL_DATA_VIRTUAL_SIZE += 16;
	return true;
}

function @type('boolean') glDrawLine(
	@type('int') startX,
	@type('int') startY,
	@type('int') endX,
	@type('int') endY,
	@type('int') lineWidth,
	@type('int') red,
	@type('int') green,
	@type('int') blue,
	@type('int') alpha) {

	// perfectly horizontal and vertical should use the rectangle logic.
	if (startX == endX || startY == endY)
	{
		@type('int') left = startX;
		@type('int') top = startY;
		@type('int') width = 0;
		@type('int') height = 0;

		if (startX == endX)
		{
			left = startX - lineWidth / 2;
			width = lineWidth;
			if (startY < endY) {
				height = endY - startY + 1;
			} else {
				height = startY - endY + 1;
				top = endY;
			}
		}
		else
		{
			top = startY - lineWidth / 2;
			height = lineWidth;
			if (startX < endX) {
				width = endX - startX + 1;
			} else {
				width = startX - endX + 1;
				left = endX;
			}
		}

		return glDrawRectangle(left, top, width, height, red, green, blue, alpha);
	}
	
	if (GL_VIRTUAL_SIZE == GL_REAL_SIZE) glIncreaseDataCapacity();
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE, OpenGlAction.DRAW_LINE);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 1, startX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 2, startY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 3, endX);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 4, endY);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 5, lineWidth);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 6, red & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 7, green & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 8, blue & 255);
	$_array_set(GL_DATA, GL_VIRTUAL_SIZE | 9, alpha & 255);
	return true;
}

function glDrawImageDirect() {
	
}

function glDrawImageAdvanced() {
	
}

// size must ALWAYS be divisible by 16
function glIncreaseDataCapacity() {
	if (GL_VIRTUAL_SIZE == 0) {
		GL_DATA = $_new_array('int', 16 * 50);
	} else {
		@type('int') capacity = GL_REAL_SIZE * 2;
		@type('Array<int>') newGlData = $_new_array('int', capacity);
		for (@type('int') i = 0; i < GL_VIRTUAL_SIZE; i += 1) {
			$_array_set(newGlData, i, $_array_get(GL_DATA, i));
		}
		GL_DATA = newGlData;
	}
	GL_REAL_SIZE = $_array_length(GL_DATA);
}