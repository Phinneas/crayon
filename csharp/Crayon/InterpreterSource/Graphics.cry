
function @type('Image') instantiateImage(
	@type('CompositeImage') resource,
	@type('int') x,
	@type('int') y,
	@type('int') width,
	@type('int') height,
	@type('bool') flipX,
	@type('bool') flipY) {

	@type('int') resourceWidth = CompositeImage$resource.width;
	@type('int') resourceHeight = CompositeImage$resource.height;

	@type('float') textureLeft = $_cast('float', $_unsafe_float_division(1.0 * x, resourceWidth));
	@type('float') textureRight = $_cast('float', $_unsafe_float_division(1.0 * (x + width), resourceWidth));
	@type('float') textureTop = $_cast('float', $_unsafe_float_division(1.0 * y, resourceHeight));
	@type('float') textureBottom = $_cast('float', $_unsafe_float_division(1.0 * (y + height), resourceHeight));

	if (flipX) {
		@type('float') t = textureLeft;
		textureLeft = textureRight;
		textureRight = t;
	}

	if (flipY) {
		@type('float') t = textureTop;
		textureTop = textureBottom;
		textureBottom = t;
	}

	return new Image(
		resource,
		null,
		x,
		y,
		width,
		height,
		textureLeft,
		textureTop,
		textureRight,
		textureBottom);
}

function @type('Image') flipImage(
	@type('Image') image,
	@type('bool') flipX,
	@type('bool') flipY) {
	if (Image$image.compositeResource == null) {
		// TODO: create a flipped copy of the raw resource.
		return null;
	}

	@type('bool') flippedX = Image$image.textureLeft > Image$image.textureRight;
	@type('bool') flippedY = Image$image.textureTop > Image$image.textureBottom;
	return instantiateImage(
		Image$image.compositeResource,
		Image$image.x,
		Image$image.y,
		Image$image.width,
		Image$image.height,
		flipX != flippedX,
		flipY != flippedY);
}


function @type('List<SpriteSheetItemDescriptor>') getSpriteSheetMembers(
	@type('ImageSheetStatus') sheetStatus, 
	@type('string') groupName) {

	@type('int') groupId = $_dictionary_get_guaranteed(ImageSheetStatus$sheetStatus.groupNameToId, groupName);
	return $_dictionary_get_guaranteed(ImageSheetStatus$sheetStatus.spriteSheetItemDescriptorsByGroupId, groupId);
}

function getImageByKey(@type('string') key) {
	@type('ProgramData') p = $_get_program_data();
	@type('ImageSheetStatus') imageUtil = ProgramData$p.imageSheetStatus;
	if ($_dictionary_contains(ImageSheetStatus$imageUtil.resourceImagesByKeys, key)) {
		// TODO: conditional logic for non-GL based platforms
		// JavaScript uses R.get_image_impl
		// Java uses ImageLibrary.getImage
		// Python uses get_image_impl
		@type('CompositeImage') bmp = $_dictionary_get_guaranteed(ImageSheetStatus$imageUtil.resourceImagesByKeys, key);
		@type('int') x = 0;
		@type('int') y = 0;
		@type('int') width = CompositeImage$bmp.width;
		@type('int') height = CompositeImage$bmp.height;
		if ($_dictionary_contains(ImageSheetStatus$imageUtil.texturePartitioningInformation, key)) {
			@type('Array<int>') location = $_dictionary_get_guaranteed(ImageSheetStatus$imageUtil.texturePartitioningInformation, key);
			x = $_array_get(location, 1);
			y = $_array_get(location, 2);
			width = $_array_get(location, 3);
			height = $_array_get(location, 4);
		}
		return instantiateImage(bmp, x, y, width, height, false, false);
	}
	return null;
}

function @type('CompositeImage') createCompositeImage(nativeBitmap) {
	return new CompositeImage(
		nativeBitmap,
		$_image_native_bitmap_width(nativeBitmap),
		$_image_native_bitmap_height(nativeBitmap),
		-1,
		false);
}

function imageSheetStatusInitialization() {
	@type('ProgramData') p = $_get_program_data();
	@type('ImageSheetStatus') imageUtil = ProgramData$p.imageSheetStatus;
	@type('SpriteSheetData') ssd = ProgramData$p.spriteSheetData;
	@type('Array<string>') groupNames = $_dictionary_get_keys(SpriteSheetData$ssd.groupIdsByName);
	@type('int') i = 0;
	@type('int') id = 0;

	// Create a mapping of group names and group IDs.
	// Declare that these sheets are not loaded.
	// Determine which tile IDs are in which groups.
	for (i = 0; i < $_array_length(groupNames); i += 1) {
		@type('string') groupName = $_array_get(groupNames, i);
		id = $_dictionary_get_guaranteed(SpriteSheetData$ssd.groupIdsByName, groupName);
		$_dictionary_set(ImageSheetStatus$imageUtil.groupNameToId, groupName, id);
		$_dictionary_set(ImageSheetStatus$imageUtil.sheetStatus, id, IMAGE_SHEET_STATUS_NOT_LOADED);
		@type('Array<int>') tileIds = $_dictionary_get_keys($_dictionary_get_guaranteed(SpriteSheetData$ssd.tileIdsByGroupId, id));
		@type('Array<int>') tileIdsSorted = $_sorted_copy_of_int_array(tileIds);
		$_dictionary_set(ImageSheetStatus$imageUtil.tilesPerId, id, tileIdsSorted);
	}

	// TODO: I should really add comments to the rest of this.
	@type('Dictionary<string, SpriteSheetItemDescriptor>') filesLookup = SpriteSheetData$ssd.files;
	@type('List<SpriteSheetItemDescriptor>') ssids = $_cast_to_list('SpriteSheetItemDescriptor', $_dictionary_get_values(filesLookup));
	for (i = 0; i < $_list_length(ssids); i += 1) {
		@type('SpriteSheetItemDescriptor') ssid = $_list_get(ssids, i);
		@type('List<SpriteSheetItemDescriptor>') ssidsForGroup = null;
		id = SpriteSheetItemDescriptor$ssid.groupId;
		if ($_dictionary_contains(ImageSheetStatus$imageUtil.spriteSheetItemDescriptorsByGroupId, id)) {
			ssidsForGroup = $_dictionary_get_guaranteed(ImageSheetStatus$imageUtil.spriteSheetItemDescriptorsByGroupId, id);
		} else {
			ssidsForGroup = $_new_list('SpriteSheetItemDescriptor');
			$_dictionary_set(ImageSheetStatus$imageUtil.spriteSheetItemDescriptorsByGroupId, id, ssidsForGroup);
		}
		$_list_push(ssidsForGroup, ssid);
	}

	@type('Array<int>') groupIds = $_dictionary_get_keys(SpriteSheetData$ssd.tileIdsByGroupId);
	for (i = 0; i < $_array_length(groupIds); i += 1) {
		id = $_array_get(groupIds, i);
		@type('Array<int>') keys = $_dictionary_get_keys($_dictionary_get_guaranteed(SpriteSheetData$ssd.tileIdsByGroupId, id));
		@type('Array<string>') tileNamesForGroupId = $_new_array('string', $_array_length(keys));
		for (@type('int') j = 0; j < $_array_length(keys); j += 1) {
			@type('string') name = id + "_" + $_array_get(keys, j);
			$_array_set(tileNamesForGroupId, j, name);
		}
		$_dictionary_set(
			ImageSheetStatus$imageUtil.generatedTileNamesByGroupId,
			id,
			$_convert_list_to_array('string', tileNamesForGroupId));
	}
}

function loadCompositeImageResource(@type('CompositeImage') compositeImage) {
	CompositeImage$compositeImage.glTextureId = $_gl_load_texture(CompositeImage$compositeImage.nativeBitmap);
	CompositeImage$compositeImage.loaded = true;
}

function initiateTileLoading(@type('TileLoadRequest') request) {
	// TODO: conditional logic for aysnchronous downloads that have a handler that basically do the same thing.
	
	// In most platforms, this is synchronous...
	TileLoadRequest$request.nativeResource = $_read_local_tile_resource(TileLoadRequest$request.path);

	// ...and so you immediately want to mark the status as loaded.
	TileLoadRequest$request.status = IMAGE_SHEET_STATUS_LOADED;
}

// once an image is loaded it is added to the tilesByName genName->Bitmap lookup.
// If all the tile ID's in a particular group ID are represented, then all downloads are complete for this group.
function @type('bool') areAllTilesLoadedForGroupId(
	@type('ImageSheetStatus') iss,
	@type('int') groupId) {

	@type('Array<int>') tileIds = $_dictionary_get_guaranteed(ImageSheetStatus$iss.tilesPerId, groupId);
	@type('Dictionary<string, object>') tilesByName = ImageSheetStatus$iss.tilesByName;
	for (@type('int') i = $_array_length(tileIds) - 1; i >= 0; i -= 1) {
		@type('int') tileId = $_array_get(tileIds, i);
		@type('string') genName = $_string_cast_weak(groupId) + "_" + $_string_cast_weak(tileId);
		if (!$_dictionary_contains(tilesByName, genName)) {
			return false;
		}
	}
	return true;
}

function @type('int') getNumTiles(@type('string') groupName) {
	@type('ProgramData') p = $_get_program_data();
	@type('ImageSheetStatus') iss = ProgramData$p.imageSheetStatus;
	if ($_dictionary_contains(ImageSheetStatus$iss.groupNameToId, groupName)) {
		@type('int') groupId = $_dictionary_get_guaranteed(ImageSheetStatus$iss.groupNameToId, groupName);
		@type('Array<int>') tileIds = $_dictionary_get_guaranteed(ImageSheetStatus$iss.tilesPerId, groupId);
		return $_array_length(tileIds);
	}
	return -1;
}

// returns false if the sheet name provided does not exist.
// This populates the entire loader queue for all the required tiles.
// This queue is pumped by the performWorkNugget[Pre|Post]Frame methods.
function @type('bool') loadImageSheet(@type('string') groupName) {
	@type('ProgramData') p = $_get_program_data();
	@type('ImageSheetStatus') iss = ProgramData$p.imageSheetStatus;

	// This group doesn't exist.
	if (!$_dictionary_contains(ImageSheetStatus$iss.groupNameToId, groupName)) {
		return false;
	}

	// Determine group ID.
	@type('int') groupId = $_dictionary_get_guaranteed(ImageSheetStatus$iss.groupNameToId, groupName);

	// Have you loaded this before? No-op.
	if ($_dictionary_get_guaranteed(ImageSheetStatus$iss.sheetStatus, groupId) != IMAGE_SHEET_STATUS_NOT_LOADED) {
		return true;
	}

	// At this point mark the sheet as being actively loaded.
	$_dictionary_set(ImageSheetStatus$iss.sheetStatus, groupId, IMAGE_SHEET_STATUS_LOADING);

	// Okay, so what do we actually need to load?
	@type('Array<int>') tileIds = $_dictionary_get_guaranteed(ImageSheetStatus$iss.tilesPerId, groupId);

	// Is this group empty? Honestly, that would be really weird. But let's check anyway and exit out if it is.
	if ($_array_length(tileIds) == 0) {
		// Mark it as done and exit out. This way it doesn't act like it's loading forever since the image load
		// handler is the thing that marks it as no longer loading.
		$_dictionary_set(ImageSheetStatus$iss.sheetStatus, groupId, IMAGE_SHEET_STATUS_LOADED);
		return true;
	}

	// Go through all the tile IDs and create a loader status object for each.
	// Add them to a queue.
	// This queue is pumped by the workNugget methods.
	for (@type('int') i = 0; i < $_array_length(tileIds); i += 1) {
		@type('int') tileId = $_array_get(tileIds, i);
		@type('string') tileGenName = $_string_cast_weak(groupId) + "_" + $_string_cast_weak(tileId);
		$_list_push(ImageSheetStatus$iss.tileLoadQueue,
			new TileLoadRequest(
				tileGenName,
				IMAGE_SHEET_STATUS_NOT_LOADED,
				groupId,
				groupName,
				tileId,
				null));
	}

	return true;
}

function @type('ImageSheetStatus') getImageSheetStatus() {
	@type('ProgramData') p = $_get_program_data();
	return ProgramData$p.imageSheetStatus;
}

function @type('int') getGroupId(@type('ImageSheetStatus') iss, @type('string') groupName) {
	if ($_dictionary_contains(ImageSheetStatus$iss.groupNameToId, groupName)) {
		return $_dictionary_get_guaranteed(ImageSheetStatus$iss.groupNameToId, groupName);
	}
	return -1;
}

function @type('int') getNumTilesLoaded(@type('string') groupName) {
	@type('ImageSheetStatus') iss = getImageSheetStatus();
	@type('int') groupId = getGroupId(iss, groupName);
	if (groupId == -1) return -1;

	@type('int') tileCount = 0;
	@type('Array<int>') tileIds = $_dictionary_get_guaranteed(ImageSheetStatus$iss.tilesPerId, groupId);
	for (@type('int') i = 0; i < $_array_length(tileIds); i += 1) {
		@type('int') tileId = $_array_get(tileIds, i);
		if ($_dictionary_contains(ImageSheetStatus$iss.tilesByName, $_string_cast_weak(groupId) + "_" + $_string_cast_weak(tileId))) {
			tileCount += 1;
		}
	}
	return tileCount;
}

function @type('int') getSheetErrorCode(@type('string') groupName) {
	// TODO: this
	return 0;
}

// return values:
// 0 -> no
// 1 -> yes
// 2 -> error, not found, or not initialized
function @type('int') isImageSheetLoaded(@type('string') groupName) {
	@type('ImageSheetStatus') iss = getImageSheetStatus();
	@type('int') groupId = getGroupId(iss, groupName);
	if (groupId == -1)
		return 2;

	@type('int') status = $_dictionary_get_guaranteed(ImageSheetStatus$iss.sheetStatus, groupId);

	if (status == IMAGE_SHEET_STATUS_LOADED)
		return 1;

	if (status == IMAGE_SHEET_STATUS_LOADING)
		return 0;

	return 2;
}
