
function @type('Image') instantiateImage(
	@type('CompositeImage') resource,
	@type('int') x,
	@type('int') y,
	@type('int') width,
	@type('int') height,
	@type('bool') flipX,
	@type('bool') flipY) {

	@type('int') resourceWidth = CompositeImage$resource.width;
	@type('int') resourceHeight = CompositeImage$resource.height;

	@type('float') textureLeft = $_cast('float', $_unsafe_float_division(1.0 * x, resourceWidth));
	@type('float') textureRight = $_cast('float', $_unsafe_float_division(1.0 * (x + width), resourceWidth));
	@type('float') textureTop = $_cast('float', $_unsafe_float_division(1.0 * y, resourceHeight));
	@type('float') textureBottom = $_cast('float', $_unsafe_float_division(1.0 * (y + height), resourceHeight));

	if (flipX) {
		@type('float') t = textureLeft;
		textureLeft = textureRight;
		textureRight = t;
	}

	if (flipY) {
		@type('float') t = textureTop;
		textureTop = textureBottom;
		textureBottom = t;
	}

	return new Image(
		resource,
		null,
		x,
		y,
		width,
		height,
		textureLeft,
		textureTop,
		textureRight,
		textureBottom);
}

function @type('Image') flipImage(
	@type('Image') image,
	@type('bool') flipX,
	@type('bool') flipY) {
	if (Image$image.compositeResource == null) {
		// TODO: create a flipped copy of the raw resource.
		return null;
	}

	@type('bool') flippedX = Image$image.textureLeft > Image$image.textureRight;
	@type('bool') flippedY = Image$image.textureTop > Image$image.textureBottom;
	return instantiateImage(
		Image$image.compositeResource,
		Image$image.x,
		Image$image.y,
		Image$image.width,
		Image$image.height,
		flipX != flippedX,
		flipY != flippedY);
}


function @type('List<SpriteSheetItemDescriptor>') getSpriteSheetMembers(
	@type('ImageSheetStatus') sheetStatus, 
	@type('string') groupName) {

	@type('int') groupId = $_dictionary_get_guaranteed(ImageSheetStatus$sheetStatus.groupNameToId, groupName);
	return $_dictionary_get_guaranteed(ImageSheetStatus$sheetStatus.spriteSheetItemDescriptorsByGroupId, groupId);
}

function getImageByKey(@type('string') key) {
	@type('ProgramData') p = $_get_program_data();
	@type('ImageSheetStatus') imageUtil = ProgramData$p.imageSheetStatus;
	if ($_dictionary_contains(ImageSheetStatus$imageUtil.resourceImagesByKeys, key)) {
		// TODO: conditional logic for non-GL based platforms
		// JavaScript uses R.get_image_impl
		// Java uses ImageLibrary.getImage
		// Python uses get_image_impl
		@type('CompositeImage') bmp = $_dictionary_get_guaranteed(ImageSheetStatus$imageUtil.resourceImagesByKeys, key);
		@type('int') x = 0;
		@type('int') y = 0;
		@type('int') width = CompositeImage$bmp.width;
		@type('int') height = CompositeImage$bmp.height;
		if ($_dictionary_contains(ImageSheetStatus$imageUtil.texturePartitioningInformation, key)) {
			@type('Array<int>') location = $_dictionary_get_guaranteed(ImageSheetStatus$imageUtil.texturePartitioningInformation, key);
			x = $_array_get(location, 1);
			y = $_array_get(location, 2);
			width = $_array_get(location, 3);
			height = $_array_get(location, 4);
		}
		return instantiateImage(bmp, x, y, width, height, false, false);
	}
	return null;
}

function @type('CompositeImage') createCompositeImage(nativeBitmap) {
	return new CompositeImage(
		nativeBitmap,
		$_image_native_bitmap_width(nativeBitmap),
		$_image_native_bitmap_height(nativeBitmap),
		-1,
		false);
}
