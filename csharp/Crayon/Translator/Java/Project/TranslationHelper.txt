package %%%PACKAGE%%%;

import java.util.ArrayList;
import java.util.Random;
import java.util.Set;

final class TranslationHelper {

    private TranslationHelper() {}

    private static ProgramData programData = null;

    public static Random random = new Random();

    public static void setProgramData(ProgramData pd) {
        programData = pd;
    }

    public static ProgramData getProgramData() {
        return programData;
    }

    public static <T> void reverseList(ArrayList<T> list) {
        int length = list.size();
        int lengthMinusOne = length - 1;
        for (int i = length / 2; i >= 0; --i) {
            T t = list.get(i);
            int tIndex = lengthMinusOne - i;
            list.set(i, list.get(tIndex));
            list.set(tIndex, t);
        }
    }

    public static String joinList(String sep, ArrayList<String> items) {
        int length = items.size();
        if (length == 0) return "";
        boolean useSeparator = sep.length() > 0;
        StringBuilder sb = new StringBuilder(useSeparator ? (length * 2 - 1) : length);
        sb.append(items.get(0));
        if (useSeparator) {
            for (int i = 1; i < length; ++i) {
                sb.append(sep);
                sb.append(items.get(i));
            }
        } else {
            for (int i = 1; i < length; ++i) {
                sb.append(items.get(i));
            }
        }
        return sb.toString();
    }

    public static String joinChars(ArrayList<Character> chars) {
        char[] output = new char[chars.size()];
        for (int i = output.length - 1; i >= 0; --i) {
            output[i] = chars.get(i);
        }
        return String.copyValueOf(output);
    }

    public static String reverseString(String original) {
        char[] output = original.toCharArray();
        int length = output.length;
        int lengthMinusOne = length - 1;
        char c;
        int tIndex;
        for (int i = length / 2 - 1; i >= 0; --i) {
            c = output[i];
            output[i] = output[lengthMinusOne - i];
            output[lengthMinusOne] = c;
        }
        return String.copyValueOf(output);
    }

    public static void shuffleInPlace(ArrayList<Value> list) {
        int length = list.size();
        int tIndex;
        Value t;
        for (int i = length - 1; i >= 0; --i) {
            tIndex = random.nextInt(length);
            t = list.get(tIndex);
            list.set(tIndex, list.get(i));
            list.set(i, t);
        }
    }

    public static int[] convertIntegerSetToIntArray(Set<Integer> original) {
        int[] output = new int[original.size()];
        int i = 0;
        for (int value : original) {
            output[i++] = value;
        }
        return output;
    }

    public static String getRawByteCodeString() {
        return "TODO:this";
    }

    public static ArrayList<Value> concatLists(ArrayList<Value> listA, ArrayList<Value> listB) {
        ArrayList<Value> output = new ArrayList<Value>(listA.size() + listB.size());
        output.addAll(listA);
        output.addAll(listB);
        return output;
    }

    public static ArrayList<Value> multiplyList(ArrayList<Value> list, int num) {
        ArrayList<Value> output = new ArrayList<Value>(list.size() * num);
        while (num-- > 0) {
            output.addAll(list);
        }
        return output;
    }

    public static int[] createIntArray(ArrayList<Integer> nums) {
        int[] output = new int[nums.size()];
        for (int i = nums.size() - 1; i >= 0; --i) {
            output[i] = nums.get(i);
        }
        return output;
    }
}
