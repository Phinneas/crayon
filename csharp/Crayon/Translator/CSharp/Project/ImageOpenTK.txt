using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;

namespace %%%PROJECT_ID%%%
{
	internal class Image
	{
		public int TextureID;
		public readonly int Width;
		public readonly int Height;
		public readonly int X;
		public readonly int Y;
		public readonly float TextureLeft;
		public readonly float TextureTop;
		public readonly float TextureRight;
		public readonly float TextureBottom;
		public readonly Bitmap RawResource;
		public readonly bool flippedX;
		public readonly bool flippedY;

		public Image(Bitmap resource, int x, int y, int width, int height, bool flipX, bool flipY)
		{
			this.RawResource = resource;

			this.X = x;
			this.Y = y;
			this.Width = width;
			this.Height = height;

			this.TextureLeft = 1F * this.X / resource.Width;
			this.TextureRight = 1F * (this.X + this.Width) / resource.Width;
			this.TextureTop = 1F * this.Y / resource.Height;
			this.TextureBottom = 1F * (this.Y + this.Height) / resource.Height;

			this.flippedX = flipX;
			this.flippedY = flipY;

			if (flipX)
			{
				float t = this.TextureLeft;
				this.TextureLeft = this.TextureRight;
				this.TextureRight = t;
			}

			if (flipY)
			{
				float t = this.TextureTop;
				this.TextureTop = this.TextureBottom;
				this.TextureBottom = t;
			}
		}

		public static Image FlipImage(object original, bool flipX, bool flipY)
		{
			Image image = (Image)original;
			Image flipped = new Image(image.RawResource,
				image.X, image.Y, image.Width, image.Height,
				flipX != image.flippedX, flipY != image.flippedY);
			flipped.TextureID = image.TextureID;
			return flipped;
		}
	}
}
