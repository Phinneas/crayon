using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace %%%PROJECT_ID%%%
{
	internal static class ImageUtil
	{
		public const int IMAGE_SHEET_TILES_LOADED_PER_FRAME = 3;
		public const int IMAGE_SHEET_STATUS_NOT_LOADED = 0;
		public const int IMAGE_SHEET_STATUS_LOADING = 1;
		public const int IMAGE_SHEET_STATUS_LOADED = 2;

		private static ImageSheetStatus imageUtil { get { return TranslationHelper.ProgramData.imageSheetStatus; } }

		public static int GetImageErrorCode(string key)
		{
			throw new NotImplementedException();
		}

		// TODO: retry counter support
		public static void DownloadImageFromInternetTubes(string key, string url)
		{
			BackgroundWorker bgWorker = new BackgroundWorker();
			bgWorker.DoWork += (sender, args) =>
			{
				System.Net.WebClient wc = new System.Net.WebClient();
				try
				{
					byte[] imageBytes = wc.DownloadData(url);
					Bitmap bmp = new Bitmap(new System.IO.MemoryStream(imageBytes));
					bmp.SetResolution(96, 96);
					args.Result = bmp;
				}
				catch (Exception)
				{
					args.Result = null;
				}
			};
			bgWorker.RunWorkerCompleted += (sender, args) =>
			{
				ImageDownloadCompletionHandler(key, args.Result);
			};
			bgWorker.RunWorkerAsync();
		}

		private static void ImageDownloadCompletionHandler(string key, object bitmap)
		{
			// TODO: more in-depth error codes than "2"
			imageUtil.downloadedImagesByKey[key] = bitmap;
			imageUtil.downloadedImagesErrorCodes[key] = bitmap == null ? 2 : 1;
		}

		public static void LoadImageFromUserData(string key, string path)
		{
			throw new NotImplementedException();
		}

		public static int IsImageLoaded(string key)
		{
			throw new NotImplementedException();
		}
	}
}
