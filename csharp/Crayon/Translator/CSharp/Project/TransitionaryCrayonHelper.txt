using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace %%%PROJECT_ID%%%
{
	public static class TransitionaryCrayonHelper
	{
		public const int IMAGE_SHEET_TILES_LOADED_PER_FRAME = 3;
		public const int IMAGE_SHEET_STATUS_NOT_LOADED = 0;
		public const int IMAGE_SHEET_STATUS_LOADING = 1;
		public const int IMAGE_SHEET_STATUS_LOADED = 2;

		private static Dictionary<int, Imagette> VirtualizationGridDoFurtherConsolidations(
			int biggestSheetId,
			int maxTextureSize,
			Dictionary<int, Imagette> nonSolitarySheets,
			Dictionary<string, int[]> locations)
		{
			int unitLength = maxTextureSize / 1024;
			int maxSheetsPerMegaSheet = unitLength * unitLength;
			int sheetCount = nonSolitarySheets.Count;

			// Start making a list of ID groupings that don't exceed the maximum capacity of a megasheet.
			List<List<int>> megaSheetMapping = new List<List<int>>();
			int[] orderedSheetIds = nonSolitarySheets.Keys.OrderBy<int, int>(i => i).ToArray(); // order IDs for deterministicly generated images.
			foreach (int sheetIdToCombine in orderedSheetIds)
			{
				if (megaSheetMapping.Count == 0 ||
					megaSheetMapping[megaSheetMapping.Count - 1].Count == maxSheetsPerMegaSheet)
				{
					megaSheetMapping.Add(new List<int>());
				}
				megaSheetMapping[megaSheetMapping.Count - 1].Add(sheetIdToCombine);
			}

			// now that the members of the mega sheets are fully determined, create the images.
			int megaSheetId = biggestSheetId;
			Dictionary<int, Imagette> megaSheetById = new Dictionary<int, Imagette>();
			Dictionary<int, int[]> oldSheetOffsetInformation = new Dictionary<int, int[]>();
			foreach (List<int> megaSheetMemberSheetIds in megaSheetMapping)
			{
				++megaSheetId;
				megaSheetById[megaSheetId] = CrayonWrapper.v_virtualizationGridBuildAMegaSheet(
					megaSheetId,
					megaSheetMemberSheetIds,
					nonSolitarySheets,
					oldSheetOffsetInformation);
			}

			// now update the location information to reflect the new sheet ID's and locations
			foreach (int[] locationInfo in locations.Values)
			{
				int oldSheetId = locationInfo[0];
				if (oldSheetOffsetInformation.ContainsKey(oldSheetId))
				{
					int[] updatedInfo = oldSheetOffsetInformation[oldSheetId];
					locationInfo[0] = updatedInfo[0];
					locationInfo[1] += updatedInfo[1];
					locationInfo[2] += updatedInfo[2];
				}
			}

			return megaSheetById;
		}

		public static ImageSheetVirtualizationGrid InstantiateVirtualizationGrid(
			int groupId,
			string groupName,
			List<SpriteSheetItemDescriptor> spriteSheetItemDescriptors,
			Dictionary<string, object> nativeTileBitmapsByGeneratedName)
		{
			Dictionary<string, int[]> locations = new Dictionary<string, int[]>(); // [ tile ID, x, y, width, height ]
			List<string> paths = new List<string>();
			Dictionary<int, Imagette> nonSolitarySheets = new Dictionary<int, Imagette>();
			Dictionary<int, Imagette> solitarySheets = new Dictionary<int, Imagette>();

			int biggestSheetId = CrayonWrapper.v_virtualizationGridDoBasicConsolidations(
				groupId,
				spriteSheetItemDescriptors,
				nativeTileBitmapsByGeneratedName,
				locations,
				paths,
				nonSolitarySheets,
				solitarySheets);

			int maxTextureSize = GlUtil.MaxTextureSize;

			// Go through and further consolidate things if possible. 
			if (maxTextureSize > 1024 && nonSolitarySheets.Count > 1)
			{
				// replace the non solitary sheets with the new mega sheets.
				nonSolitarySheets = VirtualizationGridDoFurtherConsolidations(
					biggestSheetId,
					maxTextureSize,
					nonSolitarySheets,
					locations);
			}

			Dictionary<int, CompositeImage> sheets = new Dictionary<int, CompositeImage>();
			Dictionary<int, Imagette> allSheets = nonSolitarySheets;
			foreach (int sheetId in solitarySheets.Keys)
			{
				allSheets[sheetId] = solitarySheets[sheetId];
			}

			foreach (int sheetId in allSheets.Keys)
			{
				Imagette imagette = allSheets[sheetId];
				object actualBitmap = TranslationHelper.ImagetteFlushToNativeBitmap(imagette);
				sheets[sheetId] = CrayonWrapper.v_createCompositeImage(actualBitmap);
			}

			return new ImageSheetVirtualizationGrid(
				locations,
				sheets,
				groupName,
				groupId,
				paths.ToArray());
		}
	}
}
