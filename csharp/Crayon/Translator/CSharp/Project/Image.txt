using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using OpenTK.Graphics.OpenGL;

namespace %%%PROJECT_ID%%%
{
	internal class Image
	{
		private static readonly Point TOP_LEFT = new Point(0, 0);

		private static readonly Dictionary<string, Image> IMAGE_LOOKUP = new Dictionary<string, Image>();

		public readonly int ImageID;
		public readonly int Width;
		public readonly int Height;
		public readonly float TextureRight;
		public readonly float TextureBottom;

		public Image(int imageId, int width, int height)
		{
			this.ImageID = imageId;
			this.Width = width;
			this.Height = height;
			this.TextureRight = 1F * width / NextPowerOf2(width);
			this.TextureBottom = 1F * height / NextPowerOf2(height);
		}

		public static bool LoadImage(string key, string path)
		{
			Bitmap bmp = ResourceReader.ReadImageFile(path);
			if (bmp == null) return false;
			int width = bmp.Width;
			int height = bmp.Height;
			int id = ForceLoadTexture(bmp);
			IMAGE_LOOKUP[key] = new Image(id, width, height);
			return true;
		}

		public static Image GetImageByKey(string key)
		{
			Image output;
			if (IMAGE_LOOKUP.TryGetValue(key, out output))
			{
				return output;
			}
			return null;
		}

		public static Image FlipImage(object original, bool flipX, bool flipY)
		{
			throw new System.NotImplementedException();
		}

		private static int ForceLoadTexture(Bitmap bitmap)
		{
			bitmap = NormalizeBitmap(bitmap);
			int width = bitmap.Width;
			int height = bitmap.Height;
			int textureId;

			Rectangle rectangle = new System.Drawing.Rectangle(0, 0, width, height);
			BitmapData bmpData = bitmap.LockBits(
				rectangle, System.Drawing.Imaging.ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);

			GL.GenTextures(1, out textureId);
			GL.BindTexture(TextureTarget.Texture2D, textureId);
			GL.TexImage2D(
				TextureTarget.Texture2D,
				0,
				PixelInternalFormat.Rgba,
				width, height, 0,
				OpenTK.Graphics.OpenGL.PixelFormat.Bgra, PixelType.UnsignedByte,
				bmpData.Scan0);

			bitmap.UnlockBits(bmpData);

			GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
			GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Nearest);

			return textureId;
		}

		private static Bitmap NormalizeBitmap(Bitmap bitmap)
		{
			int oldWidth = bitmap.Width;
			int oldHeight = bitmap.Height;

			int newWidth = NextPowerOf2(oldWidth);
			int newHeight = NextPowerOf2(oldHeight);

			if (newWidth == oldWidth &&
				newHeight == oldHeight &&
				bitmap.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb)
			{
				return bitmap;
			}

			Bitmap targetBmp = new Bitmap(newWidth, newHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
			targetBmp.SetResolution(bitmap.HorizontalResolution, bitmap.VerticalResolution);
			System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(targetBmp);
			g.DrawImage(bitmap, TOP_LEFT);
			return targetBmp;
		}

		private static int NextPowerOf2(int value)
		{
			if (((value - 1) & value) == 0) return value;

			int output = 1;
			while (output < value)
			{
				output = output << 1;
			}
			return output;
		}
	}
}
